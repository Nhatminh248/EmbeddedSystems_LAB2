
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb8  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f8  080085f8  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008600  08008600  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08008608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          00000214  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014700  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fbf  00000000  00000000  00034760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00037720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00038678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c33  00000000  00000000  00039458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013242  00000000  00000000  0005c08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd449  00000000  00000000  0006f2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ee8  00000000  00000000  0013c76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005628 	.word	0x08005628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08005628 	.word	0x08005628

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <button_init>:
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <button_init+0x14>)
 8000ca6:	f002 fe37 	bl	8003918 <HAL_GPIO_WritePin>
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <button_Scan>:
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <button_Scan+0xc8>)
 8000cc0:	f002 fe2a 	bl	8003918 <HAL_GPIO_WritePin>
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <button_Scan+0xc8>)
 8000cca:	f002 fe25 	bl	8003918 <HAL_GPIO_WritePin>
 8000cce:	230a      	movs	r3, #10
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	492b      	ldr	r1, [pc, #172]	; (8000d80 <button_Scan+0xcc>)
 8000cd4:	482b      	ldr	r0, [pc, #172]	; (8000d84 <button_Scan+0xd0>)
 8000cd6:	f003 fb02 	bl	80042de <HAL_SPI_Receive>
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	817b      	strh	r3, [r7, #10]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e03f      	b.n	8000d6a <button_Scan+0xb6>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db06      	blt.n	8000cfe <button_Scan+0x4a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dc03      	bgt.n	8000cfe <button_Scan+0x4a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e018      	b.n	8000d30 <button_Scan+0x7c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd07      	ble.n	8000d14 <button_Scan+0x60>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	dc04      	bgt.n	8000d14 <button_Scan+0x60>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1c3 0307 	rsb	r3, r3, #7
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00d      	b.n	8000d30 <button_Scan+0x7c>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	dd06      	ble.n	8000d28 <button_Scan+0x74>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0b      	cmp	r3, #11
 8000d1e:	dc03      	bgt.n	8000d28 <button_Scan+0x74>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3304      	adds	r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e003      	b.n	8000d30 <button_Scan+0x7c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1c3 0317 	rsb	r3, r3, #23
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <button_Scan+0xcc>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	4013      	ands	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <button_Scan+0x96>
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <button_Scan+0xd4>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2100      	movs	r1, #0
 8000d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d48:	e009      	b.n	8000d5e <button_Scan+0xaa>
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <button_Scan+0xd4>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <button_Scan+0xd4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d5e:	897b      	ldrh	r3, [r7, #10]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	817b      	strh	r3, [r7, #10]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	ddbc      	ble.n	8000cea <button_Scan+0x36>
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	2000004c 	.word	0x2000004c
 8000d84:	200001a0 	.word	0x200001a0
 8000d88:	20000054 	.word	0x20000054

08000d8c <is_button_pressed>:
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d901      	bls.n	8000da0 <is_button_pressed+0x14>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e008      	b.n	8000db2 <is_button_pressed+0x26>
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <is_button_pressed+0x34>)
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000054 	.word	0x20000054

08000dc4 <is_button_long_pressed>:
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d901      	bls.n	8000dd8 <is_button_long_pressed+0x14>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e00a      	b.n	8000dee <is_button_long_pressed+0x2a>
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <is_button_long_pressed+0x38>)
 8000ddc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <is_button_long_pressed+0x3c>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d201      	bcs.n	8000dec <is_button_long_pressed+0x28>
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <is_button_long_pressed+0x2a>
 8000dec:	2301      	movs	r3, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000054 	.word	0x20000054
 8000e00:	20000000 	.word	0x20000000

08000e04 <fsm_led>:

/*@brief:	state machine to blink led in 2Hz
 * @para:	none
 * @retval:	none*/
void fsm_led(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	switch (led_st)
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <fsm_led+0xd0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <fsm_led+0x12>
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d041      	beq.n	8000e98 <fsm_led+0x94>
		{
			led_st = ON;
			set_timer(3, TOGGLE_TIME);
		}
	}
}
 8000e14:	e05b      	b.n	8000ece <fsm_led+0xca>
		switch (light_st)
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <fsm_led+0xd4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d020      	beq.n	8000e60 <fsm_led+0x5c>
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	dc2b      	bgt.n	8000e7a <fsm_led+0x76>
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d002      	beq.n	8000e2c <fsm_led+0x28>
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d00d      	beq.n	8000e46 <fsm_led+0x42>
			break;
 8000e2a:	e026      	b.n	8000e7a <fsm_led+0x76>
			control_traffic_light(0, 1, 0, 0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	2000      	movs	r0, #0
 8000e34:	f001 fe18 	bl	8002a68 <control_traffic_light>
			control_traffic_light(1, 1, 0, 0);
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 fe12 	bl	8002a68 <control_traffic_light>
			break;
 8000e44:	e01a      	b.n	8000e7c <fsm_led+0x78>
			control_traffic_light(0, 0, 1, 0);
 8000e46:	2300      	movs	r3, #0
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f001 fe0b 	bl	8002a68 <control_traffic_light>
			control_traffic_light(1, 0, 1, 0);
 8000e52:	2300      	movs	r3, #0
 8000e54:	2201      	movs	r2, #1
 8000e56:	2100      	movs	r1, #0
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 fe05 	bl	8002a68 <control_traffic_light>
			break;
 8000e5e:	e00d      	b.n	8000e7c <fsm_led+0x78>
			control_traffic_light(0, 0, 0, 1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f001 fdfe 	bl	8002a68 <control_traffic_light>
			control_traffic_light(1, 0, 0, 1);
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2001      	movs	r0, #1
 8000e74:	f001 fdf8 	bl	8002a68 <control_traffic_light>
			break;
 8000e78:	e000      	b.n	8000e7c <fsm_led+0x78>
			break;
 8000e7a:	bf00      	nop
		if (!flag_timer(3))
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f002 f869 	bl	8002f54 <flag_timer>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d121      	bne.n	8000ecc <fsm_led+0xc8>
			led_st = OFF;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <fsm_led+0xd0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000e8e:	21fa      	movs	r1, #250	; 0xfa
 8000e90:	2003      	movs	r0, #3
 8000e92:	f001 fff7 	bl	8002e84 <set_timer>
		break;
 8000e96:	e019      	b.n	8000ecc <fsm_led+0xc8>
		control_traffic_light(0, 0, 0, 0);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f001 fde2 	bl	8002a68 <control_traffic_light>
		control_traffic_light(1, 0, 0, 0);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f001 fddc 	bl	8002a68 <control_traffic_light>
		if (!flag_timer(3))
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f002 f84f 	bl	8002f54 <flag_timer>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <fsm_led+0xca>
			led_st = ON;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <fsm_led+0xd0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000ec2:	21fa      	movs	r1, #250	; 0xfa
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f001 ffdd 	bl	8002e84 <set_timer>
}
 8000eca:	e000      	b.n	8000ece <fsm_led+0xca>
		break;
 8000ecc:	bf00      	nop
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000074 	.word	0x20000074
 8000ed8:	20000002 	.word	0x20000002

08000edc <increase_value>:
 * @brief  increase the time value based-on previous state (short-pressed)
 * @param  None
 * @retval None
 */
void increase_value(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	if (light_pre_st == RED_ADJUSTMENT)
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <increase_value+0x74>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d10c      	bne.n	8000f02 <increase_value+0x26>
	{
		red_time_buffer++;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <increase_value+0x78>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <increase_value+0x78>)
 8000ef0:	6013      	str	r3, [r2, #0]
		if (red_time_buffer >= 100)
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <increase_value+0x78>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b63      	cmp	r3, #99	; 0x63
 8000ef8:	d924      	bls.n	8000f44 <increase_value+0x68>
		{
			red_time_buffer = 0;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <increase_value+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
		if (green_time_buffer >= 100)
		{
			green_time_buffer = 0;
		}
	}
}
 8000f00:	e020      	b.n	8000f44 <increase_value+0x68>
	else if (light_pre_st == YELLOW_ADJUSTMENT)
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <increase_value+0x74>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d10c      	bne.n	8000f24 <increase_value+0x48>
		yellow_time_buffer++;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <increase_value+0x7c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <increase_value+0x7c>)
 8000f12:	6013      	str	r3, [r2, #0]
		if (yellow_time_buffer >= 100)
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <increase_value+0x7c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b63      	cmp	r3, #99	; 0x63
 8000f1a:	d913      	bls.n	8000f44 <increase_value+0x68>
			yellow_time_buffer = 0;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <increase_value+0x7c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	e00f      	b.n	8000f44 <increase_value+0x68>
	else if (light_pre_st == GREEN_ADJUSTMENT)
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <increase_value+0x74>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d10b      	bne.n	8000f44 <increase_value+0x68>
		green_time_buffer++;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <increase_value+0x80>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <increase_value+0x80>)
 8000f34:	6013      	str	r3, [r2, #0]
		if (green_time_buffer >= 100)
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <increase_value+0x80>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b63      	cmp	r3, #99	; 0x63
 8000f3c:	d902      	bls.n	8000f44 <increase_value+0x68>
			green_time_buffer = 0;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <increase_value+0x80>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000003 	.word	0x20000003
 8000f54:	20000010 	.word	0x20000010
 8000f58:	20000018 	.word	0x20000018
 8000f5c:	20000014 	.word	0x20000014

08000f60 <button0_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	switch (button_st[0])
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <button0_fsm+0xa8>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <button0_fsm+0x12>
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d038      	beq.n	8000fe2 <button0_fsm+0x82>
 8000f70:	e043      	b.n	8000ffa <button0_fsm+0x9a>
	{
	case release:
		if (is_button_pressed(0) == 1)
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff ff0a 	bl	8000d8c <is_button_pressed>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d129      	bne.n	8000fd2 <button0_fsm+0x72>
		{
			// to do
			light_pre_st = light_st;
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <button0_fsm+0xac>)
 8000f80:	781a      	ldrb	r2, [r3, #0]
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <button0_fsm+0xb0>)
 8000f84:	701a      	strb	r2, [r3, #0]
			switch (light_st)
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <button0_fsm+0xac>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d81b      	bhi.n	8000fc8 <button0_fsm+0x68>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <button0_fsm+0x38>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fb1 	.word	0x08000fb1
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fc1 	.word	0x08000fc1
			{
			case TRAFFIC_LIGHT:
				light_st = RED_ADJUSTMENT;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <button0_fsm+0xac>)
 8000faa:	2202      	movs	r2, #2
 8000fac:	701a      	strb	r2, [r3, #0]
				break;
 8000fae:	e00c      	b.n	8000fca <button0_fsm+0x6a>
			case RED_ADJUSTMENT:
				light_st = YELLOW_ADJUSTMENT;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <button0_fsm+0xac>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
				break;
 8000fb6:	e008      	b.n	8000fca <button0_fsm+0x6a>
			case YELLOW_ADJUSTMENT:
				light_st = GREEN_ADJUSTMENT;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <button0_fsm+0xac>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	701a      	strb	r2, [r3, #0]
				break;
 8000fbe:	e004      	b.n	8000fca <button0_fsm+0x6a>
			case GREEN_ADJUSTMENT:
				light_st = TRAFFIC_LIGHT;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <button0_fsm+0xac>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
				break;
 8000fc6:	e000      	b.n	8000fca <button0_fsm+0x6a>
			default:
				break;
 8000fc8:	bf00      	nop
			}
			button_st[0] = pressed;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <button0_fsm+0xa8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
		}
		else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8000fd0:	e015      	b.n	8000ffe <button0_fsm+0x9e>
		else if (is_button_pressed(0) == ERROR)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff feda 	bl	8000d8c <is_button_pressed>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d10f      	bne.n	8000ffe <button0_fsm+0x9e>
			return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e00f      	b.n	8001002 <button0_fsm+0xa2>
	case pressed:
		if (!is_button_pressed(0))
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fed2 	bl	8000d8c <is_button_pressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d103      	bne.n	8000ff6 <button0_fsm+0x96>
		{
			button_st[0] = release;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <button0_fsm+0xa8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
		}
		else
		{
			return 0;
		}
		break;
 8000ff4:	e004      	b.n	8001000 <button0_fsm+0xa0>
			return 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e003      	b.n	8001002 <button0_fsm+0xa2>
	default:
		return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e001      	b.n	8001002 <button0_fsm+0xa2>
		break;
 8000ffe:	bf00      	nop
	}
	return 1;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000078 	.word	0x20000078
 800100c:	20000002 	.word	0x20000002
 8001010:	20000003 	.word	0x20000003

08001014 <button2_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	switch (button_st[2])
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <button2_fsm+0x68>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <button2_fsm+0x12>
 8001020:	2b01      	cmp	r3, #1
 8001022:	d019      	beq.n	8001058 <button2_fsm+0x44>
 8001024:	e024      	b.n	8001070 <button2_fsm+0x5c>
	{
	case release:
		if (is_button_pressed(2) == 1)
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff feb0 	bl	8000d8c <is_button_pressed>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10a      	bne.n	8001048 <button2_fsm+0x34>
		{
			// to do
			light_pre_st = light_st;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <button2_fsm+0x6c>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <button2_fsm+0x70>)
 8001038:	701a      	strb	r2, [r3, #0]
			light_st = SET_VALUE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <button2_fsm+0x6c>)
 800103c:	2205      	movs	r2, #5
 800103e:	701a      	strb	r2, [r3, #0]
			button_st[2] = pressed;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <button2_fsm+0x68>)
 8001042:	2201      	movs	r2, #1
 8001044:	709a      	strb	r2, [r3, #2]
		}
		else if (is_button_pressed(2) == ERROR)
			return 0;
		break;
 8001046:	e015      	b.n	8001074 <button2_fsm+0x60>
		else if (is_button_pressed(2) == ERROR)
 8001048:	2002      	movs	r0, #2
 800104a:	f7ff fe9f 	bl	8000d8c <is_button_pressed>
 800104e:	4603      	mov	r3, r0
 8001050:	2bff      	cmp	r3, #255	; 0xff
 8001052:	d10f      	bne.n	8001074 <button2_fsm+0x60>
			return 0;
 8001054:	2300      	movs	r3, #0
 8001056:	e00f      	b.n	8001078 <button2_fsm+0x64>
	case pressed:
		if (!is_button_pressed(2))
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff fe97 	bl	8000d8c <is_button_pressed>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <button2_fsm+0x58>
		{
			button_st[2] = release;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <button2_fsm+0x68>)
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
		}
		else
		{
			return 0;
		}
		break;
 800106a:	e004      	b.n	8001076 <button2_fsm+0x62>
			return 0;
 800106c:	2300      	movs	r3, #0
 800106e:	e003      	b.n	8001078 <button2_fsm+0x64>
	default:
		return 0;
 8001070:	2300      	movs	r3, #0
 8001072:	e001      	b.n	8001078 <button2_fsm+0x64>
		break;
 8001074:	bf00      	nop
		break;
	}
	return 1;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000078 	.word	0x20000078
 8001080:	20000002 	.word	0x20000002
 8001084:	20000003 	.word	0x20000003

08001088 <button1_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch (button_st[1])
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <button1_fsm+0xc0>)
 800108e:	785b      	ldrb	r3, [r3, #1]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d035      	beq.n	8001100 <button1_fsm+0x78>
 8001094:	2b02      	cmp	r3, #2
 8001096:	dc4f      	bgt.n	8001138 <button1_fsm+0xb0>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <button1_fsm+0x1a>
 800109c:	2b01      	cmp	r3, #1
 800109e:	d019      	beq.n	80010d4 <button1_fsm+0x4c>
 80010a0:	e04a      	b.n	8001138 <button1_fsm+0xb0>
	{
	case release:
		if (is_button_pressed(1) == 1)
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff fe72 	bl	8000d8c <is_button_pressed>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10a      	bne.n	80010c4 <button1_fsm+0x3c>
		{
			light_pre_st = light_st;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <button1_fsm+0xc4>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <button1_fsm+0xc8>)
 80010b4:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1;
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <button1_fsm+0xc4>)
 80010b8:	2206      	movs	r2, #6
 80010ba:	701a      	strb	r2, [r3, #0]
			button_st[1] = pressed;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <button1_fsm+0xc0>)
 80010be:	2201      	movs	r2, #1
 80010c0:	705a      	strb	r2, [r3, #1]
		}
		else if (is_button_pressed(1) == ERROR)
			return 0;
		break;
 80010c2:	e03b      	b.n	800113c <button1_fsm+0xb4>
		else if (is_button_pressed(1) == ERROR)
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fe61 	bl	8000d8c <is_button_pressed>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d135      	bne.n	800113c <button1_fsm+0xb4>
			return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e037      	b.n	8001144 <button1_fsm+0xbc>
	case pressed:
		if (!is_button_pressed(1))
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fe59 	bl	8000d8c <is_button_pressed>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <button1_fsm+0x60>
		{
			button_st[1] = release;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <button1_fsm+0xc0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	705a      	strb	r2, [r3, #1]
		}
		else
		{
			return 0;
		}
		break;
 80010e6:	e02c      	b.n	8001142 <button1_fsm+0xba>
		else if (is_button_long_pressed(1) == 1)
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fe6b 	bl	8000dc4 <is_button_long_pressed>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d103      	bne.n	80010fc <button1_fsm+0x74>
			button_st[1] = long_pressed;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <button1_fsm+0xc0>)
 80010f6:	2202      	movs	r2, #2
 80010f8:	705a      	strb	r2, [r3, #1]
		break;
 80010fa:	e022      	b.n	8001142 <button1_fsm+0xba>
			return 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	e021      	b.n	8001144 <button1_fsm+0xbc>
	case long_pressed:
		if (light_st != INCREASE_BY_1_OVER_TIME)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <button1_fsm+0xc4>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b07      	cmp	r3, #7
 8001106:	d006      	beq.n	8001116 <button1_fsm+0x8e>
		{
			light_pre_st = light_st;
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <button1_fsm+0xc4>)
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <button1_fsm+0xc8>)
 800110e:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1_OVER_TIME;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <button1_fsm+0xc4>)
 8001112:	2207      	movs	r2, #7
 8001114:	701a      	strb	r2, [r3, #0]
		}
		if (!is_button_pressed(1))
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff fe38 	bl	8000d8c <is_button_pressed>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10e      	bne.n	8001140 <button1_fsm+0xb8>
		{
			light_st = light_pre_st;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <button1_fsm+0xc8>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <button1_fsm+0xc4>)
 8001128:	701a      	strb	r2, [r3, #0]
			light_pre_st = INCREASE_BY_1_OVER_TIME;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <button1_fsm+0xc8>)
 800112c:	2207      	movs	r2, #7
 800112e:	701a      	strb	r2, [r3, #0]
			button_st[1] = release;
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <button1_fsm+0xc0>)
 8001132:	2200      	movs	r2, #0
 8001134:	705a      	strb	r2, [r3, #1]
		}
		break;
 8001136:	e003      	b.n	8001140 <button1_fsm+0xb8>
	default:
		return 0;
 8001138:	2300      	movs	r3, #0
 800113a:	e003      	b.n	8001144 <button1_fsm+0xbc>
		break;
 800113c:	bf00      	nop
 800113e:	e000      	b.n	8001142 <button1_fsm+0xba>
		break;
 8001140:	bf00      	nop
		break;
	}
	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000078 	.word	0x20000078
 800114c:	20000002 	.word	0x20000002
 8001150:	20000003 	.word	0x20000003

08001154 <button3_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button3_fsm(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	switch (button_st[3])
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <button3_fsm+0x84>)
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <button3_fsm+0x12>
 8001160:	2b01      	cmp	r3, #1
 8001162:	d026      	beq.n	80011b2 <button3_fsm+0x5e>
 8001164:	e031      	b.n	80011ca <button3_fsm+0x76>
	{
	case release:
		if (is_button_pressed(3) == 1)
 8001166:	2003      	movs	r0, #3
 8001168:	f7ff fe10 	bl	8000d8c <is_button_pressed>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d117      	bne.n	80011a2 <button3_fsm+0x4e>
		{
			// to do
			light_pre_st = light_st;
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <button3_fsm+0x88>)
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <button3_fsm+0x8c>)
 8001178:	701a      	strb	r2, [r3, #0]
			light_st = TRAFFIC_LIGHT;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <button3_fsm+0x88>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
			red_time = RED_TIME_INIT;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <button3_fsm+0x90>)
 8001182:	2205      	movs	r2, #5
 8001184:	601a      	str	r2, [r3, #0]
			green_time = GREEN_TIME_INIT;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <button3_fsm+0x94>)
 8001188:	2203      	movs	r2, #3
 800118a:	601a      	str	r2, [r3, #0]
			yellow_time = YELLOW_TIME_INIT;
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <button3_fsm+0x98>)
 800118e:	2202      	movs	r2, #2
 8001190:	601a      	str	r2, [r3, #0]
			lcd_Clear(WHITE);
 8001192:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001196:	f000 fc5b 	bl	8001a50 <lcd_Clear>
			button_st[3] = pressed;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <button3_fsm+0x84>)
 800119c:	2201      	movs	r2, #1
 800119e:	70da      	strb	r2, [r3, #3]
		}
		else if (is_button_pressed(3) == ERROR)
			return 0;
		break;
 80011a0:	e015      	b.n	80011ce <button3_fsm+0x7a>
		else if (is_button_pressed(3) == ERROR)
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff fdf2 	bl	8000d8c <is_button_pressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2bff      	cmp	r3, #255	; 0xff
 80011ac:	d10f      	bne.n	80011ce <button3_fsm+0x7a>
			return 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	e00f      	b.n	80011d2 <button3_fsm+0x7e>
	case pressed:
		if (!is_button_pressed(3))
 80011b2:	2003      	movs	r0, #3
 80011b4:	f7ff fdea 	bl	8000d8c <is_button_pressed>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <button3_fsm+0x72>
		{
			button_st[3] = release;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <button3_fsm+0x84>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	70da      	strb	r2, [r3, #3]
		}
		else
		{
			return 0;
		}
		break;
 80011c4:	e004      	b.n	80011d0 <button3_fsm+0x7c>
			return 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e003      	b.n	80011d2 <button3_fsm+0x7e>
	default:
		return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e001      	b.n	80011d2 <button3_fsm+0x7e>
		break;
 80011ce:	bf00      	nop
		break;
	}
	return 1;
 80011d0:	2301      	movs	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000078 	.word	0x20000078
 80011dc:	20000002 	.word	0x20000002
 80011e0:	20000003 	.word	0x20000003
 80011e4:	20000004 	.word	0x20000004
 80011e8:	20000008 	.word	0x20000008
 80011ec:	2000000c 	.word	0x2000000c

080011f0 <traffic_light_fsm>:
/*
 * @brief: 	finite state machine to control behavior of traffic light
 * @para:	none
 * @retval:	none*/
void traffic_light_fsm(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	update_led_buf(traffic_light_timer1, traffic_light_timer2, 1);
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <traffic_light_fsm+0x11c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a45      	ldr	r2, [pc, #276]	; (8001310 <traffic_light_fsm+0x120>)
 80011fa:	6811      	ldr	r1, [r2, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fcf0 	bl	8002be4 <update_led_buf>
	switch (tl_st)
 8001204:	4b43      	ldr	r3, [pc, #268]	; (8001314 <traffic_light_fsm+0x124>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d873      	bhi.n	80012f4 <traffic_light_fsm+0x104>
 800120c:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <traffic_light_fsm+0x24>)
 800120e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001212:	bf00      	nop
 8001214:	08001225 	.word	0x08001225
 8001218:	08001255 	.word	0x08001255
 800121c:	0800128d 	.word	0x0800128d
 8001220:	080012bd 	.word	0x080012bd
	{
	case RED_GREEN:
		control_traffic_light(0, 1, 0, 0);
 8001224:	2300      	movs	r3, #0
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	2000      	movs	r0, #0
 800122c:	f001 fc1c 	bl	8002a68 <control_traffic_light>
		control_traffic_light(1, 0, 0, 1);
 8001230:	2301      	movs	r3, #1
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fc16 	bl	8002a68 <control_traffic_light>
		if (traffic_light_timer2 <= 0)
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <traffic_light_fsm+0x120>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d159      	bne.n	80012f8 <traffic_light_fsm+0x108>
		{
			traffic_light_timer2 = yellow_time;
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <traffic_light_fsm+0x128>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a31      	ldr	r2, [pc, #196]	; (8001310 <traffic_light_fsm+0x120>)
 800124a:	6013      	str	r3, [r2, #0]
			tl_st = RED_YELLOW;
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <traffic_light_fsm+0x124>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001252:	e051      	b.n	80012f8 <traffic_light_fsm+0x108>
	case RED_YELLOW:
		control_traffic_light(0, 1, 0, 0);
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2101      	movs	r1, #1
 800125a:	2000      	movs	r0, #0
 800125c:	f001 fc04 	bl	8002a68 <control_traffic_light>
		control_traffic_light(1, 0, 1, 0);
 8001260:	2300      	movs	r3, #0
 8001262:	2201      	movs	r2, #1
 8001264:	2100      	movs	r1, #0
 8001266:	2001      	movs	r0, #1
 8001268:	f001 fbfe 	bl	8002a68 <control_traffic_light>
		if (traffic_light_timer2 <= 0)
 800126c:	4b28      	ldr	r3, [pc, #160]	; (8001310 <traffic_light_fsm+0x120>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d143      	bne.n	80012fc <traffic_light_fsm+0x10c>
		{
			traffic_light_timer1 = green_time;
 8001274:	4b29      	ldr	r3, [pc, #164]	; (800131c <traffic_light_fsm+0x12c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a24      	ldr	r2, [pc, #144]	; (800130c <traffic_light_fsm+0x11c>)
 800127a:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = red_time;
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <traffic_light_fsm+0x130>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <traffic_light_fsm+0x120>)
 8001282:	6013      	str	r3, [r2, #0]
			tl_st = GREEN_RED;
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <traffic_light_fsm+0x124>)
 8001286:	2202      	movs	r2, #2
 8001288:	701a      	strb	r2, [r3, #0]
		}
		break;
 800128a:	e037      	b.n	80012fc <traffic_light_fsm+0x10c>
	case GREEN_RED:
		control_traffic_light(0, 0, 0, 1);
 800128c:	2301      	movs	r3, #1
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2000      	movs	r0, #0
 8001294:	f001 fbe8 	bl	8002a68 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8001298:	2300      	movs	r3, #0
 800129a:	2200      	movs	r2, #0
 800129c:	2101      	movs	r1, #1
 800129e:	2001      	movs	r0, #1
 80012a0:	f001 fbe2 	bl	8002a68 <control_traffic_light>
		if (traffic_light_timer1 <= 0)
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <traffic_light_fsm+0x11c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d129      	bne.n	8001300 <traffic_light_fsm+0x110>
		{
			traffic_light_timer1 = yellow_time;
 80012ac:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <traffic_light_fsm+0x128>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <traffic_light_fsm+0x11c>)
 80012b2:	6013      	str	r3, [r2, #0]
			tl_st = YELLOW_RED;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <traffic_light_fsm+0x124>)
 80012b6:	2203      	movs	r2, #3
 80012b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012ba:	e021      	b.n	8001300 <traffic_light_fsm+0x110>
	case YELLOW_RED:
		control_traffic_light(0, 0, 1, 0);
 80012bc:	2300      	movs	r3, #0
 80012be:	2201      	movs	r2, #1
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f001 fbd0 	bl	8002a68 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 80012c8:	2300      	movs	r3, #0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	2001      	movs	r0, #1
 80012d0:	f001 fbca 	bl	8002a68 <control_traffic_light>
		if (traffic_light_timer1 <= 0)
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <traffic_light_fsm+0x11c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d113      	bne.n	8001304 <traffic_light_fsm+0x114>
		{
			traffic_light_timer1 = red_time;
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <traffic_light_fsm+0x130>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	; (800130c <traffic_light_fsm+0x11c>)
 80012e2:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = green_time;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <traffic_light_fsm+0x12c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <traffic_light_fsm+0x120>)
 80012ea:	6013      	str	r3, [r2, #0]
			tl_st = RED_GREEN;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <traffic_light_fsm+0x124>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012f2:	e007      	b.n	8001304 <traffic_light_fsm+0x114>
	default:
		break;
 80012f4:	bf00      	nop
 80012f6:	e006      	b.n	8001306 <traffic_light_fsm+0x116>
		break;
 80012f8:	bf00      	nop
 80012fa:	e004      	b.n	8001306 <traffic_light_fsm+0x116>
		break;
 80012fc:	bf00      	nop
 80012fe:	e002      	b.n	8001306 <traffic_light_fsm+0x116>
		break;
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <traffic_light_fsm+0x116>
		break;
 8001304:	bf00      	nop
	}
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000001c 	.word	0x2000001c
 8001310:	20000020 	.word	0x20000020
 8001314:	2000004e 	.word	0x2000004e
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <traffic_run>:
 * @brief  Top-layer finite state machine
 * @param  None
 * @retval None
 */
void traffic_run(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af04      	add	r7, sp, #16
	switch (light_st)
 800132a:	4b9b      	ldr	r3, [pc, #620]	; (8001598 <traffic_run+0x274>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b07      	cmp	r3, #7
 8001330:	f200 8128 	bhi.w	8001584 <traffic_run+0x260>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <traffic_run+0x18>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	080013f7 	.word	0x080013f7
 8001340:	0800135d 	.word	0x0800135d
 8001344:	080013fd 	.word	0x080013fd
 8001348:	0800143f 	.word	0x0800143f
 800134c:	08001481 	.word	0x08001481
 8001350:	080014c3 	.word	0x080014c3
 8001354:	08001507 	.word	0x08001507
 8001358:	0800151b 	.word	0x0800151b
	{
	case TRAFFIC_LIGHT:
		if (red_time != green_time + yellow_time)
 800135c:	4b8f      	ldr	r3, [pc, #572]	; (800159c <traffic_run+0x278>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <traffic_run+0x27c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	441a      	add	r2, r3
 8001366:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <traffic_run+0x280>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d021      	beq.n	80013b2 <traffic_run+0x8e>
		{
			// off all leds
			control_traffic_light(0, 0, 0, 0);
 800136e:	2300      	movs	r3, #0
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2000      	movs	r0, #0
 8001376:	f001 fb77 	bl	8002a68 <control_traffic_light>
			control_traffic_light(1, 0, 0, 0);
 800137a:	2300      	movs	r3, #0
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2001      	movs	r0, #1
 8001382:	f001 fb71 	bl	8002a68 <control_traffic_light>
			lcd_Clear(WHITE);
 8001386:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800138a:	f000 fb61 	bl	8001a50 <lcd_Clear>
			lcd_ShowStr(20, 160, "SYSTEM ERROR!", RED, WHITE, 32, 1);
 800138e:	2301      	movs	r3, #1
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2320      	movs	r3, #32
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013a0:	4a81      	ldr	r2, [pc, #516]	; (80015a8 <traffic_run+0x284>)
 80013a2:	21a0      	movs	r1, #160	; 0xa0
 80013a4:	2014      	movs	r0, #20
 80013a6:	f001 f873 	bl	8002490 <lcd_ShowStr>
			light_st = SYSTEM_ERROR;
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <traffic_run+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
 80013b0:	e01e      	b.n	80013f0 <traffic_run+0xcc>
		}
		else
		{
			// decrease timer every 1s
			if (!flag_timer(1))
 80013b2:	2001      	movs	r0, #1
 80013b4:	f001 fdce 	bl	8002f54 <flag_timer>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <traffic_run+0xc8>
			{
				if (traffic_light_timer1 > 0)
 80013be:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <traffic_run+0x288>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <traffic_run+0xac>
					traffic_light_timer1--;
 80013c6:	4b79      	ldr	r3, [pc, #484]	; (80015ac <traffic_run+0x288>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4a77      	ldr	r2, [pc, #476]	; (80015ac <traffic_run+0x288>)
 80013ce:	6013      	str	r3, [r2, #0]
				if (traffic_light_timer2 > 0)
 80013d0:	4b77      	ldr	r3, [pc, #476]	; (80015b0 <traffic_run+0x28c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <traffic_run+0xbe>
					traffic_light_timer2--;
 80013d8:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <traffic_run+0x28c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a74      	ldr	r2, [pc, #464]	; (80015b0 <traffic_run+0x28c>)
 80013e0:	6013      	str	r3, [r2, #0]
				set_timer(1, ONE_SECOND);
 80013e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e6:	2001      	movs	r0, #1
 80013e8:	f001 fd4c 	bl	8002e84 <set_timer>
			}
			traffic_light_fsm();
 80013ec:	f7ff ff00 	bl	80011f0 <traffic_light_fsm>
		}
		// button0;
		button0_fsm();
 80013f0:	f7ff fdb6 	bl	8000f60 <button0_fsm>
		break;
 80013f4:	e0c7      	b.n	8001586 <traffic_run+0x262>

	case SYSTEM_ERROR:
		button3_fsm();
 80013f6:	f7ff fead 	bl	8001154 <button3_fsm>
		break;
 80013fa:	e0c4      	b.n	8001586 <traffic_run+0x262>

	case RED_ADJUSTMENT:
		// update buffer of red with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE && light_pre_st != INCREASE_BY_1_OVER_TIME)
 80013fc:	4b6d      	ldr	r3, [pc, #436]	; (80015b4 <traffic_run+0x290>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b06      	cmp	r3, #6
 8001402:	d00b      	beq.n	800141c <traffic_run+0xf8>
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <traffic_run+0x290>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b05      	cmp	r3, #5
 800140a:	d007      	beq.n	800141c <traffic_run+0xf8>
 800140c:	4b69      	ldr	r3, [pc, #420]	; (80015b4 <traffic_run+0x290>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b07      	cmp	r3, #7
 8001412:	d003      	beq.n	800141c <traffic_run+0xf8>
		{
			red_time_buffer = red_time;
 8001414:	4b63      	ldr	r3, [pc, #396]	; (80015a4 <traffic_run+0x280>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a67      	ldr	r2, [pc, #412]	; (80015b8 <traffic_run+0x294>)
 800141a:	6013      	str	r3, [r2, #0]
		}
		// update buffer of four 7-seg leds: value of red buffer and the mode (2)
		update_led_buf(red_time_buffer, red_time_buffer, 2);
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <traffic_run+0x294>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <traffic_run+0x294>)
 8001422:	6811      	ldr	r1, [r2, #0]
 8001424:	2202      	movs	r2, #2
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fbdc 	bl	8002be4 <update_led_buf>
		fsm_led();
 800142c:	f7ff fcea 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 8001430:	f7ff fd96 	bl	8000f60 <button0_fsm>
		button1_fsm();
 8001434:	f7ff fe28 	bl	8001088 <button1_fsm>
		button2_fsm();
 8001438:	f7ff fdec 	bl	8001014 <button2_fsm>
		break;
 800143c:	e0a3      	b.n	8001586 <traffic_run+0x262>
	case YELLOW_ADJUSTMENT:
		// update buffer of yellow with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE && light_pre_st != INCREASE_BY_1_OVER_TIME)
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <traffic_run+0x290>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b06      	cmp	r3, #6
 8001444:	d00b      	beq.n	800145e <traffic_run+0x13a>
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <traffic_run+0x290>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d007      	beq.n	800145e <traffic_run+0x13a>
 800144e:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <traffic_run+0x290>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b07      	cmp	r3, #7
 8001454:	d003      	beq.n	800145e <traffic_run+0x13a>
			yellow_time_buffer = yellow_time;
 8001456:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <traffic_run+0x27c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a58      	ldr	r2, [pc, #352]	; (80015bc <traffic_run+0x298>)
 800145c:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (3)
		update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <traffic_run+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a56      	ldr	r2, [pc, #344]	; (80015bc <traffic_run+0x298>)
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	2203      	movs	r2, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fbbb 	bl	8002be4 <update_led_buf>
		fsm_led();
 800146e:	f7ff fcc9 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 8001472:	f7ff fd75 	bl	8000f60 <button0_fsm>
		button1_fsm();
 8001476:	f7ff fe07 	bl	8001088 <button1_fsm>
		button2_fsm();
 800147a:	f7ff fdcb 	bl	8001014 <button2_fsm>

		break;
 800147e:	e082      	b.n	8001586 <traffic_run+0x262>
	case GREEN_ADJUSTMENT:
		// update buffer of green with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE && light_pre_st != INCREASE_BY_1_OVER_TIME)
 8001480:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <traffic_run+0x290>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b06      	cmp	r3, #6
 8001486:	d00b      	beq.n	80014a0 <traffic_run+0x17c>
 8001488:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <traffic_run+0x290>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d007      	beq.n	80014a0 <traffic_run+0x17c>
 8001490:	4b48      	ldr	r3, [pc, #288]	; (80015b4 <traffic_run+0x290>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d003      	beq.n	80014a0 <traffic_run+0x17c>
			green_time_buffer = green_time;
 8001498:	4b40      	ldr	r3, [pc, #256]	; (800159c <traffic_run+0x278>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a48      	ldr	r2, [pc, #288]	; (80015c0 <traffic_run+0x29c>)
 800149e:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (4)
		update_led_buf(green_time_buffer, green_time_buffer, 4);
 80014a0:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <traffic_run+0x29c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <traffic_run+0x29c>)
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	2204      	movs	r2, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fb9a 	bl	8002be4 <update_led_buf>
		fsm_led();
 80014b0:	f7ff fca8 	bl	8000e04 <fsm_led>
		// transition mode function
		button0_fsm();
 80014b4:	f7ff fd54 	bl	8000f60 <button0_fsm>
		button1_fsm();
 80014b8:	f7ff fde6 	bl	8001088 <button1_fsm>
		button2_fsm();
 80014bc:	f7ff fdaa 	bl	8001014 <button2_fsm>
		break;
 80014c0:	e061      	b.n	8001586 <traffic_run+0x262>

	case SET_VALUE:
		// update the time value based-on previous state
		if (light_pre_st == RED_ADJUSTMENT)
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <traffic_run+0x290>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d104      	bne.n	80014d4 <traffic_run+0x1b0>
		{
			red_time = red_time_buffer;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <traffic_run+0x294>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a35      	ldr	r2, [pc, #212]	; (80015a4 <traffic_run+0x280>)
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e010      	b.n	80014f6 <traffic_run+0x1d2>
		}
		else if (light_pre_st == YELLOW_ADJUSTMENT)
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <traffic_run+0x290>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d104      	bne.n	80014e6 <traffic_run+0x1c2>
		{
			yellow_time = yellow_time_buffer;
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <traffic_run+0x298>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <traffic_run+0x27c>)
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e007      	b.n	80014f6 <traffic_run+0x1d2>
		}
		else if (light_pre_st == GREEN_ADJUSTMENT)
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <traffic_run+0x290>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d103      	bne.n	80014f6 <traffic_run+0x1d2>
		{
			green_time = green_time_buffer;
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <traffic_run+0x29c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a2a      	ldr	r2, [pc, #168]	; (800159c <traffic_run+0x278>)
 80014f4:	6013      	str	r3, [r2, #0]
		}

		light_st = light_pre_st;
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <traffic_run+0x290>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <traffic_run+0x274>)
 80014fc:	701a      	strb	r2, [r3, #0]
		light_pre_st = SET_VALUE;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <traffic_run+0x290>)
 8001500:	2205      	movs	r2, #5
 8001502:	701a      	strb	r2, [r3, #0]
		break;
 8001504:	e03f      	b.n	8001586 <traffic_run+0x262>
	case INCREASE_BY_1:
		// increase the time value based-on previous state (short-pressed)
		increase_value();
 8001506:	f7ff fce9 	bl	8000edc <increase_value>
		light_st = light_pre_st;
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <traffic_run+0x290>)
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <traffic_run+0x274>)
 8001510:	701a      	strb	r2, [r3, #0]
		light_pre_st = INCREASE_BY_1;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <traffic_run+0x290>)
 8001514:	2206      	movs	r2, #6
 8001516:	701a      	strb	r2, [r3, #0]
		break;
 8001518:	e035      	b.n	8001586 <traffic_run+0x262>
	case INCREASE_BY_1_OVER_TIME:
		// increase the time value every 0.25s based-on previous state (short-pressed)
		if (light_pre_st == RED_ADJUSTMENT)
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <traffic_run+0x290>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d108      	bne.n	8001534 <traffic_run+0x210>
		{
			update_led_buf(red_time_buffer, red_time_buffer, 2);
 8001522:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <traffic_run+0x294>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <traffic_run+0x294>)
 8001528:	6811      	ldr	r1, [r2, #0]
 800152a:	2202      	movs	r2, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fb59 	bl	8002be4 <update_led_buf>
 8001532:	e018      	b.n	8001566 <traffic_run+0x242>
		}
		else if (light_pre_st == YELLOW_ADJUSTMENT)
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <traffic_run+0x290>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d108      	bne.n	800154e <traffic_run+0x22a>
		{
			update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <traffic_run+0x298>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <traffic_run+0x298>)
 8001542:	6811      	ldr	r1, [r2, #0]
 8001544:	2203      	movs	r2, #3
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fb4c 	bl	8002be4 <update_led_buf>
 800154c:	e00b      	b.n	8001566 <traffic_run+0x242>
		}
		else if (light_pre_st == GREEN_ADJUSTMENT)
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <traffic_run+0x290>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d107      	bne.n	8001566 <traffic_run+0x242>
		{
			update_led_buf(green_time_buffer, green_time_buffer, 4);
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <traffic_run+0x29c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <traffic_run+0x29c>)
 800155c:	6811      	ldr	r1, [r2, #0]
 800155e:	2204      	movs	r2, #4
 8001560:	4618      	mov	r0, r3
 8001562:	f001 fb3f 	bl	8002be4 <update_led_buf>
		}
		if (!flag_timer(4))
 8001566:	2004      	movs	r0, #4
 8001568:	f001 fcf4 	bl	8002f54 <flag_timer>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <traffic_run+0x25a>
		{
			increase_value();
 8001572:	f7ff fcb3 	bl	8000edc <increase_value>
			set_timer(4, INCREASE_TIME);
 8001576:	21fa      	movs	r1, #250	; 0xfa
 8001578:	2004      	movs	r0, #4
 800157a:	f001 fc83 	bl	8002e84 <set_timer>
		}
		button1_fsm();
 800157e:	f7ff fd83 	bl	8001088 <button1_fsm>
		break;
 8001582:	e000      	b.n	8001586 <traffic_run+0x262>
	default:
		break;
 8001584:	bf00      	nop
	}

	if (light_st != SYSTEM_ERROR)
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <traffic_run+0x274>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <traffic_run+0x26e>
		LCD_DisplayNum();
 800158e:	f001 fb69 	bl	8002c64 <LCD_DisplayNum>
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000002 	.word	0x20000002
 800159c:	20000008 	.word	0x20000008
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000004 	.word	0x20000004
 80015a8:	08005640 	.word	0x08005640
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	20000020 	.word	0x20000020
 80015b4:	20000003 	.word	0x20000003
 80015b8:	20000010 	.word	0x20000010
 80015bc:	20000018 	.word	0x20000018
 80015c0:	20000014 	.word	0x20000014

080015c4 <MX_FSMC_Init>:
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08e      	sub	sp, #56	; 0x38
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <MX_FSMC_Init+0xec>)
 80015f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <MX_FSMC_Init+0xec>)
 80015fa:	4a2e      	ldr	r2, [pc, #184]	; (80016b4 <MX_FSMC_Init+0xf0>)
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <MX_FSMC_Init+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001612:	2210      	movs	r2, #16
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MX_FSMC_Init+0xec>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_FSMC_Init+0xec>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001638:	2200      	movs	r2, #0
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <MX_FSMC_Init+0xec>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	635a      	str	r2, [r3, #52]	; 0x34
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_FSMC_Init+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	645a      	str	r2, [r3, #68]	; 0x44
 8001656:	230f      	movs	r3, #15
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	230f      	movs	r3, #15
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	233c      	movs	r3, #60	; 0x3c
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	2310      	movs	r3, #16
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166a:	2311      	movs	r3, #17
 800166c:	633b      	str	r3, [r7, #48]	; 0x30
 800166e:	2300      	movs	r3, #0
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
 8001672:	2308      	movs	r3, #8
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	230f      	movs	r3, #15
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	2309      	movs	r3, #9
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	2310      	movs	r3, #16
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	2311      	movs	r3, #17
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	463a      	mov	r2, r7
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_FSMC_Init+0xec>)
 8001698:	f003 fa04 	bl	8004aa4 <HAL_SRAM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_FSMC_Init+0xe2>
 80016a2:	f001 fbe0 	bl	8002e66 <Error_Handler>
 80016a6:	bf00      	nop
 80016a8:	3738      	adds	r7, #56	; 0x38
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000007c 	.word	0x2000007c
 80016b4:	a0000104 	.word	0xa0000104

080016b8 <HAL_FSMC_MspInit>:
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_FSMC_MspInit+0x88>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d131      	bne.n	8001738 <HAL_FSMC_MspInit+0x80>
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_FSMC_MspInit+0x88>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_FSMC_MspInit+0x8c>)
 80016e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e2:	4a18      	ldr	r2, [pc, #96]	; (8001744 <HAL_FSMC_MspInit+0x8c>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6393      	str	r3, [r2, #56]	; 0x38
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_FSMC_MspInit+0x8c>)
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	2303      	movs	r3, #3
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	230c      	movs	r3, #12
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <HAL_FSMC_MspInit+0x90>)
 8001712:	f001 ff65 	bl	80035e0 <HAL_GPIO_Init>
 8001716:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	2302      	movs	r3, #2
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	2303      	movs	r3, #3
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	230c      	movs	r3, #12
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_FSMC_MspInit+0x94>)
 8001732:	f001 ff55 	bl	80035e0 <HAL_GPIO_Init>
 8001736:	e000      	b.n	800173a <HAL_FSMC_MspInit+0x82>
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000050 	.word	0x20000050
 8001744:	40023800 	.word	0x40023800
 8001748:	40021000 	.word	0x40021000
 800174c:	40020c00 	.word	0x40020c00

08001750 <HAL_SRAM_MspInit>:
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	f7ff ffae 	bl	80016b8 <HAL_FSMC_MspInit>
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <MX_GPIO_Init>:
 8001764:	b580      	push	{r7, lr}
 8001766:	b08c      	sub	sp, #48	; 0x30
 8001768:	af00      	add	r7, sp, #0
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <MX_GPIO_Init+0x1d8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <MX_GPIO_Init+0x1d8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a67      	ldr	r2, [pc, #412]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a60      	ldr	r2, [pc, #384]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b5e      	ldr	r3, [pc, #376]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b5a      	ldr	r3, [pc, #360]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a59      	ldr	r2, [pc, #356]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a52      	ldr	r2, [pc, #328]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <MX_GPIO_Init+0x1d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b4c      	ldr	r3, [pc, #304]	; (800193c <MX_GPIO_Init+0x1d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a44      	ldr	r2, [pc, #272]	; (800193c <MX_GPIO_Init+0x1d8>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <MX_GPIO_Init+0x1d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	2170      	movs	r1, #112	; 0x70
 8001842:	483f      	ldr	r0, [pc, #252]	; (8001940 <MX_GPIO_Init+0x1dc>)
 8001844:	f002 f868 	bl	8003918 <HAL_GPIO_WritePin>
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	483d      	ldr	r0, [pc, #244]	; (8001944 <MX_GPIO_Init+0x1e0>)
 8001850:	f002 f862 	bl	8003918 <HAL_GPIO_WritePin>
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	483b      	ldr	r0, [pc, #236]	; (8001948 <MX_GPIO_Init+0x1e4>)
 800185a:	f002 f85d 	bl	8003918 <HAL_GPIO_WritePin>
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	4839      	ldr	r0, [pc, #228]	; (800194c <MX_GPIO_Init+0x1e8>)
 8001866:	f002 f857 	bl	8003918 <HAL_GPIO_WritePin>
 800186a:	2200      	movs	r2, #0
 800186c:	2108      	movs	r1, #8
 800186e:	4838      	ldr	r0, [pc, #224]	; (8001950 <MX_GPIO_Init+0x1ec>)
 8001870:	f002 f852 	bl	8003918 <HAL_GPIO_WritePin>
 8001874:	2370      	movs	r3, #112	; 0x70
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	482d      	ldr	r0, [pc, #180]	; (8001940 <MX_GPIO_Init+0x1dc>)
 800188c:	f001 fea8 	bl	80035e0 <HAL_GPIO_Init>
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	2301      	movs	r3, #1
 8001898:	623b      	str	r3, [r7, #32]
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	4826      	ldr	r0, [pc, #152]	; (8001944 <MX_GPIO_Init+0x1e0>)
 80018aa:	f001 fe99 	bl	80035e0 <HAL_GPIO_Init>
 80018ae:	23c0      	movs	r3, #192	; 0xc0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	4822      	ldr	r0, [pc, #136]	; (800194c <MX_GPIO_Init+0x1e8>)
 80018c2:	f001 fe8d 	bl	80035e0 <HAL_GPIO_Init>
 80018c6:	2330      	movs	r3, #48	; 0x30
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	481a      	ldr	r0, [pc, #104]	; (8001944 <MX_GPIO_Init+0x1e0>)
 80018da:	f001 fe81 	bl	80035e0 <HAL_GPIO_Init>
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4814      	ldr	r0, [pc, #80]	; (8001948 <MX_GPIO_Init+0x1e4>)
 80018f6:	f001 fe73 	bl	80035e0 <HAL_GPIO_Init>
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <MX_GPIO_Init+0x1e8>)
 8001914:	f001 fe64 	bl	80035e0 <HAL_GPIO_Init>
 8001918:	2308      	movs	r3, #8
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	2301      	movs	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_GPIO_Init+0x1ec>)
 8001930:	f001 fe56 	bl	80035e0 <HAL_GPIO_Init>
 8001934:	bf00      	nop
 8001936:	3730      	adds	r7, #48	; 0x30
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	40021000 	.word	0x40021000
 8001944:	40020800 	.word	0x40020800
 8001948:	40021800 	.word	0x40021800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020c00 	.word	0x40020c00

08001954 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <LCD_WR_REG+0x1c>)
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	8013      	strh	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	600ffffe 	.word	0x600ffffe

08001974 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <LCD_WR_DATA+0x1c>)
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	8053      	strh	r3, [r2, #2]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	600ffffe 	.word	0x600ffffe

08001994 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <LCD_RD_DATA+0x20>)
 800199c:	885b      	ldrh	r3, [r3, #2]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	b29b      	uxth	r3, r3
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	600ffffe 	.word	0x600ffffe

080019b8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4604      	mov	r4, r0
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	80fb      	strh	r3, [r7, #6]
 80019ca:	4603      	mov	r3, r0
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80019d6:	202a      	movs	r0, #42	; 0x2a
 80019d8:	f7ff ffbc 	bl	8001954 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffc6 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ffc0 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ffba 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffb4 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a0c:	202b      	movs	r0, #43	; 0x2b
 8001a0e:	f7ff ffa1 	bl	8001954 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a12:	88bb      	ldrh	r3, [r7, #4]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ffab 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a1e:	88bb      	ldrh	r3, [r7, #4]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffa5 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a2a:	883b      	ldrh	r3, [r7, #0]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff9f 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff99 	bl	8001974 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a42:	202c      	movs	r0, #44	; 0x2c
 8001a44:	f7ff ff86 	bl	8001954 <LCD_WR_REG>
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}

08001a50 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <lcd_Clear+0x60>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <lcd_Clear+0x60>)
 8001a64:	885b      	ldrh	r3, [r3, #2]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ffa3 	bl	80019b8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	81fb      	strh	r3, [r7, #14]
 8001a76:	e011      	b.n	8001a9c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	81bb      	strh	r3, [r7, #12]
 8001a7c:	e006      	b.n	8001a8c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff77 	bl	8001974 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a86:	89bb      	ldrh	r3, [r7, #12]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	81bb      	strh	r3, [r7, #12]
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <lcd_Clear+0x60>)
 8001a8e:	885b      	ldrh	r3, [r3, #2]
 8001a90:	89ba      	ldrh	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d3f3      	bcc.n	8001a7e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	81fb      	strh	r3, [r7, #14]
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <lcd_Clear+0x60>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	89fa      	ldrh	r2, [r7, #14]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3e8      	bcc.n	8001a78 <lcd_Clear+0x28>
		}
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200000cc 	.word	0x200000cc

08001ab4 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	883b      	ldrh	r3, [r7, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	88b9      	ldrh	r1, [r7, #4]
 8001ae0:	88f8      	ldrh	r0, [r7, #6]
 8001ae2:	f7ff ff69 	bl	80019b8 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001ae6:	88bb      	ldrh	r3, [r7, #4]
 8001ae8:	81fb      	strh	r3, [r7, #14]
 8001aea:	e010      	b.n	8001b0e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	81bb      	strh	r3, [r7, #12]
 8001af0:	e006      	b.n	8001b00 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001af2:	8c3b      	ldrh	r3, [r7, #32]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff3d 	bl	8001974 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001afa:	89bb      	ldrh	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	81bb      	strh	r3, [r7, #12]
 8001b00:	89ba      	ldrh	r2, [r7, #12]
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3f4      	bcc.n	8001af2 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	81fb      	strh	r3, [r7, #14]
 8001b0e:	89fa      	ldrh	r2, [r7, #14]
 8001b10:	883b      	ldrh	r3, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d3ea      	bcc.n	8001aec <lcd_Fill+0x38>
		}
	}
}
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}

08001b20 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	80bb      	strh	r3, [r7, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001b32:	88bb      	ldrh	r3, [r7, #4]
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	88b9      	ldrh	r1, [r7, #4]
 8001b38:	88f8      	ldrh	r0, [r7, #6]
 8001b3a:	f7ff ff3d 	bl	80019b8 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff17 	bl	8001974 <LCD_WR_DATA>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001b4e:	b590      	push	{r4, r7, lr}
 8001b50:	b08d      	sub	sp, #52	; 0x34
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4604      	mov	r4, r0
 8001b56:	4608      	mov	r0, r1
 8001b58:	4611      	mov	r1, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	80fb      	strh	r3, [r7, #6]
 8001b60:	4603      	mov	r3, r0
 8001b62:	80bb      	strh	r3, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b70:	2300      	movs	r3, #0
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001b7c:	883a      	ldrh	r2, [r7, #0]
 8001b7e:	88bb      	ldrh	r3, [r7, #4]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	dd02      	ble.n	8001b98 <lcd_DrawLine+0x4a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e00b      	b.n	8001bb0 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <lcd_DrawLine+0x56>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e005      	b.n	8001bb0 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	425b      	negs	r3, r3
 8001bae:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dd02      	ble.n	8001bbc <lcd_DrawLine+0x6e>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e00b      	b.n	8001bd4 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <lcd_DrawLine+0x7a>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e005      	b.n	8001bd4 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001bd4:	6a3a      	ldr	r2, [r7, #32]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd02      	ble.n	8001be2 <lcd_DrawLine+0x94>
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	e001      	b.n	8001be6 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001bea:	e02b      	b.n	8001c44 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	b291      	uxth	r1, r2
 8001bf4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff91 	bl	8001b20 <lcd_DrawPoint>
		xerr+=delta_x;
 8001bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	4413      	add	r3, r2
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dd07      	ble.n	8001c26 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dd07      	ble.n	8001c3e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c40:	3301      	adds	r3, #1
 8001c42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dacf      	bge.n	8001bec <lcd_DrawLine+0x9e>
		}
	}
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3734      	adds	r7, #52	; 0x34
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd90      	pop	{r4, r7, pc}

08001c56 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001c56:	b590      	push	{r4, r7, lr}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	4608      	mov	r0, r1
 8001c60:	4611      	mov	r1, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	4623      	mov	r3, r4
 8001c66:	80fb      	strh	r3, [r7, #6]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	80bb      	strh	r3, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001c74:	88bc      	ldrh	r4, [r7, #4]
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	88b9      	ldrh	r1, [r7, #4]
 8001c7a:	88f8      	ldrh	r0, [r7, #6]
 8001c7c:	8b3b      	ldrh	r3, [r7, #24]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4623      	mov	r3, r4
 8001c82:	f7ff ff64 	bl	8001b4e <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001c86:	883c      	ldrh	r4, [r7, #0]
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	88b9      	ldrh	r1, [r7, #4]
 8001c8c:	88f8      	ldrh	r0, [r7, #6]
 8001c8e:	8b3b      	ldrh	r3, [r7, #24]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4623      	mov	r3, r4
 8001c94:	f7ff ff5b 	bl	8001b4e <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001c98:	883c      	ldrh	r4, [r7, #0]
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	8839      	ldrh	r1, [r7, #0]
 8001c9e:	88f8      	ldrh	r0, [r7, #6]
 8001ca0:	8b3b      	ldrh	r3, [r7, #24]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	f7ff ff52 	bl	8001b4e <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001caa:	883c      	ldrh	r4, [r7, #0]
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	88b9      	ldrh	r1, [r7, #4]
 8001cb0:	8878      	ldrh	r0, [r7, #2]
 8001cb2:	8b3b      	ldrh	r3, [r7, #24]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	f7ff ff49 	bl	8001b4e <lcd_DrawLine>
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	4611      	mov	r1, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4623      	mov	r3, r4
 8001cd4:	80fb      	strh	r3, [r7, #6]
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80bb      	strh	r3, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001cea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	fb12 f303 	smulbb	r3, r2, r3
 8001d1a:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	3b20      	subs	r3, #32
 8001d20:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29c      	uxth	r4, r3
 8001d30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	88bb      	ldrh	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	88b9      	ldrh	r1, [r7, #4]
 8001d42:	88f8      	ldrh	r0, [r7, #6]
 8001d44:	4622      	mov	r2, r4
 8001d46:	f7ff fe37 	bl	80019b8 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	827b      	strh	r3, [r7, #18]
 8001d4e:	e07a      	b.n	8001e46 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001d50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	d028      	beq.n	8001daa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001d58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d5c:	2b10      	cmp	r3, #16
 8001d5e:	d108      	bne.n	8001d72 <lcd_ShowChar+0xae>
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	493c      	ldr	r1, [pc, #240]	; (8001e58 <lcd_ShowChar+0x194>)
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	440a      	add	r2, r1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	75fb      	strb	r3, [r7, #23]
 8001d70:	e01b      	b.n	8001daa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d76:	2b18      	cmp	r3, #24
 8001d78:	d10b      	bne.n	8001d92 <lcd_ShowChar+0xce>
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	8a79      	ldrh	r1, [r7, #18]
 8001d7e:	4837      	ldr	r0, [pc, #220]	; (8001e5c <lcd_ShowChar+0x198>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4403      	add	r3, r0
 8001d8a:	440b      	add	r3, r1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	75fb      	strb	r3, [r7, #23]
 8001d90:	e00b      	b.n	8001daa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d15a      	bne.n	8001e50 <lcd_ShowChar+0x18c>
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	8a7b      	ldrh	r3, [r7, #18]
 8001d9e:	4930      	ldr	r1, [pc, #192]	; (8001e60 <lcd_ShowChar+0x19c>)
 8001da0:	0192      	lsls	r2, r2, #6
 8001da2:	440a      	add	r2, r1
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	75bb      	strb	r3, [r7, #22]
 8001dae:	e044      	b.n	8001e3a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001db0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d120      	bne.n	8001dfa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001db8:	7dfa      	ldrb	r2, [r7, #23]
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	fa42 f303 	asr.w	r3, r2, r3
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <lcd_ShowChar+0x10e>
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fdd2 	bl	8001974 <LCD_WR_DATA>
 8001dd0:	e003      	b.n	8001dda <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fdcd 	bl	8001974 <LCD_WR_DATA>
				m++;
 8001dda:	7d7b      	ldrb	r3, [r7, #21]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001de0:	7d7b      	ldrb	r3, [r7, #21]
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001de8:	fb02 f201 	mul.w	r2, r2, r1
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11f      	bne.n	8001e34 <lcd_ShowChar+0x170>
				{
					m=0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	757b      	strb	r3, [r7, #21]
					break;
 8001df8:	e022      	b.n	8001e40 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001dfa:	7dfa      	ldrb	r2, [r7, #23]
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	fa42 f303 	asr.w	r3, r2, r3
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <lcd_ShowChar+0x152>
 8001e0a:	883a      	ldrh	r2, [r7, #0]
 8001e0c:	88b9      	ldrh	r1, [r7, #4]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe85 	bl	8001b20 <lcd_DrawPoint>
				x++;
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	8a3b      	ldrh	r3, [r7, #16]
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d105      	bne.n	8001e34 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001e28:	8a3b      	ldrh	r3, [r7, #16]
 8001e2a:	80fb      	strh	r3, [r7, #6]
					y++;
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	80bb      	strh	r3, [r7, #4]
					break;
 8001e32:	e005      	b.n	8001e40 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001e34:	7dbb      	ldrb	r3, [r7, #22]
 8001e36:	3301      	adds	r3, #1
 8001e38:	75bb      	strb	r3, [r7, #22]
 8001e3a:	7dbb      	ldrb	r3, [r7, #22]
 8001e3c:	2b07      	cmp	r3, #7
 8001e3e:	d9b7      	bls.n	8001db0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	3301      	adds	r3, #1
 8001e44:	827b      	strh	r3, [r7, #18]
 8001e46:	8a7a      	ldrh	r2, [r7, #18]
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d380      	bcc.n	8001d50 <lcd_ShowChar+0x8c>
 8001e4e:	e000      	b.n	8001e52 <lcd_ShowChar+0x18e>
		else return;
 8001e50:	bf00      	nop
				}
			}
		}
	}
}
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	08005668 	.word	0x08005668
 8001e5c:	08005c58 	.word	0x08005c58
 8001e60:	08006e28 	.word	0x08006e28

08001e64 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	4613      	mov	r3, r2
 8001e72:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001e78:	e004      	b.n	8001e84 <mypow+0x20>
 8001e7a:	79fa      	ldrb	r2, [r7, #7]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	71ba      	strb	r2, [r7, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f5      	bne.n	8001e7a <mypow+0x16>
	return result;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	80fb      	strh	r3, [r7, #6]
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80bb      	strh	r3, [r7, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	807b      	strh	r3, [r7, #2]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e059      	b.n	8001f80 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ecc:	887c      	ldrh	r4, [r7, #2]
 8001ece:	787a      	ldrb	r2, [r7, #1]
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	200a      	movs	r0, #10
 8001ede:	f7ff ffc1 	bl	8001e64 <mypow>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	fbb4 f1f3 	udiv	r1, r4, r3
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <lcd_ShowIntNum+0xf8>)
 8001eea:	fba3 2301 	umull	r2, r3, r3, r1
 8001eee:	08da      	lsrs	r2, r3, #3
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	1aca      	subs	r2, r1, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d121      	bne.n	8001f48 <lcd_ShowIntNum+0xac>
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	787b      	ldrb	r3, [r7, #1]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	da1c      	bge.n	8001f48 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001f0e:	7b3b      	ldrb	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d117      	bne.n	8001f44 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	7b7b      	ldrb	r3, [r7, #13]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	fb12 f303 	smulbb	r3, r2, r3
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4413      	add	r3, r2
 8001f26:	b298      	uxth	r0, r3
 8001f28:	8c3a      	ldrh	r2, [r7, #32]
 8001f2a:	88b9      	ldrh	r1, [r7, #4]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f7ff fec1 	bl	8001cc4 <lcd_ShowChar>
				continue;
 8001f42:	e01a      	b.n	8001f7a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	7b7b      	ldrb	r3, [r7, #13]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	fb12 f303 	smulbb	r3, r2, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	7b3b      	ldrb	r3, [r7, #12]
 8001f5e:	3330      	adds	r3, #48	; 0x30
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8c3c      	ldrh	r4, [r7, #32]
 8001f64:	88b9      	ldrh	r1, [r7, #4]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4623      	mov	r3, r4
 8001f76:	f7ff fea5 	bl	8001cc4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	787b      	ldrb	r3, [r7, #1]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d3a1      	bcc.n	8001ecc <lcd_ShowIntNum+0x30>
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	cccccccd 	.word	0xcccccccd

08001f98 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <lcd_SetDir+0x44>)
 8001fb4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <lcd_SetDir+0x44>)
 8001fbc:	22f0      	movs	r2, #240	; 0xf0
 8001fbe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001fc0:	e006      	b.n	8001fd0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <lcd_SetDir+0x44>)
 8001fc4:	22f0      	movs	r2, #240	; 0xf0
 8001fc6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <lcd_SetDir+0x44>)
 8001fca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fce:	805a      	strh	r2, [r3, #2]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	200000cc 	.word	0x200000cc

08001fe0 <lcd_init>:


void lcd_init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	48aa      	ldr	r0, [pc, #680]	; (8002294 <lcd_init+0x2b4>)
 8001fec:	f001 fc94 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff4:	f001 f9be 	bl	8003374 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffe:	48a5      	ldr	r0, [pc, #660]	; (8002294 <lcd_init+0x2b4>)
 8002000:	f001 fc8a 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002008:	f001 f9b4 	bl	8003374 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff ffc3 	bl	8001f98 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002012:	20d3      	movs	r0, #211	; 0xd3
 8002014:	f7ff fc9e 	bl	8001954 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002018:	f7ff fcbc 	bl	8001994 <LCD_RD_DATA>
 800201c:	4603      	mov	r3, r0
 800201e:	461a      	mov	r2, r3
 8002020:	4b9d      	ldr	r3, [pc, #628]	; (8002298 <lcd_init+0x2b8>)
 8002022:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002024:	f7ff fcb6 	bl	8001994 <LCD_RD_DATA>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	4b9a      	ldr	r3, [pc, #616]	; (8002298 <lcd_init+0x2b8>)
 800202e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002030:	f7ff fcb0 	bl	8001994 <LCD_RD_DATA>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b97      	ldr	r3, [pc, #604]	; (8002298 <lcd_init+0x2b8>)
 800203a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800203c:	4b96      	ldr	r3, [pc, #600]	; (8002298 <lcd_init+0x2b8>)
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <lcd_init+0x2b8>)
 8002046:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002048:	f7ff fca4 	bl	8001994 <LCD_RD_DATA>
 800204c:	4603      	mov	r3, r0
 800204e:	461a      	mov	r2, r3
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <lcd_init+0x2b8>)
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	4313      	orrs	r3, r2
 8002056:	b29a      	uxth	r2, r3
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <lcd_init+0x2b8>)
 800205a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800205c:	20cf      	movs	r0, #207	; 0xcf
 800205e:	f7ff fc79 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff fc86 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002068:	20c1      	movs	r0, #193	; 0xc1
 800206a:	f7ff fc83 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800206e:	2030      	movs	r0, #48	; 0x30
 8002070:	f7ff fc80 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002074:	20ed      	movs	r0, #237	; 0xed
 8002076:	f7ff fc6d 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800207a:	2064      	movs	r0, #100	; 0x64
 800207c:	f7ff fc7a 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002080:	2003      	movs	r0, #3
 8002082:	f7ff fc77 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002086:	2012      	movs	r0, #18
 8002088:	f7ff fc74 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800208c:	2081      	movs	r0, #129	; 0x81
 800208e:	f7ff fc71 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002092:	20e8      	movs	r0, #232	; 0xe8
 8002094:	f7ff fc5e 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002098:	2085      	movs	r0, #133	; 0x85
 800209a:	f7ff fc6b 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7ff fc68 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80020a4:	207a      	movs	r0, #122	; 0x7a
 80020a6:	f7ff fc65 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80020aa:	20cb      	movs	r0, #203	; 0xcb
 80020ac:	f7ff fc52 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80020b0:	2039      	movs	r0, #57	; 0x39
 80020b2:	f7ff fc5f 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80020b6:	202c      	movs	r0, #44	; 0x2c
 80020b8:	f7ff fc5c 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff fc59 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80020c2:	2034      	movs	r0, #52	; 0x34
 80020c4:	f7ff fc56 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff fc53 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80020ce:	20f7      	movs	r0, #247	; 0xf7
 80020d0:	f7ff fc40 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80020d4:	2020      	movs	r0, #32
 80020d6:	f7ff fc4d 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80020da:	20ea      	movs	r0, #234	; 0xea
 80020dc:	f7ff fc3a 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fc47 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff fc44 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80020ec:	20c0      	movs	r0, #192	; 0xc0
 80020ee:	f7ff fc31 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80020f2:	201b      	movs	r0, #27
 80020f4:	f7ff fc3e 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80020f8:	20c1      	movs	r0, #193	; 0xc1
 80020fa:	f7ff fc2b 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff fc38 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002104:	20c5      	movs	r0, #197	; 0xc5
 8002106:	f7ff fc25 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800210a:	2030      	movs	r0, #48	; 0x30
 800210c:	f7ff fc32 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002110:	2030      	movs	r0, #48	; 0x30
 8002112:	f7ff fc2f 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002116:	20c7      	movs	r0, #199	; 0xc7
 8002118:	f7ff fc1c 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800211c:	20b7      	movs	r0, #183	; 0xb7
 800211e:	f7ff fc29 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f7ff fc16 	bl	8001954 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002128:	2008      	movs	r0, #8
 800212a:	f7ff fc23 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800212e:	203a      	movs	r0, #58	; 0x3a
 8002130:	f7ff fc10 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002134:	2055      	movs	r0, #85	; 0x55
 8002136:	f7ff fc1d 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800213a:	20b1      	movs	r0, #177	; 0xb1
 800213c:	f7ff fc0a 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff fc17 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002146:	201a      	movs	r0, #26
 8002148:	f7ff fc14 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800214c:	20b6      	movs	r0, #182	; 0xb6
 800214e:	f7ff fc01 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002152:	200a      	movs	r0, #10
 8002154:	f7ff fc0e 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002158:	20a2      	movs	r0, #162	; 0xa2
 800215a:	f7ff fc0b 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800215e:	20f2      	movs	r0, #242	; 0xf2
 8002160:	f7ff fbf8 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff fc05 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800216a:	2026      	movs	r0, #38	; 0x26
 800216c:	f7ff fbf2 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fbff 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002176:	20e0      	movs	r0, #224	; 0xe0
 8002178:	f7ff fbec 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800217c:	200f      	movs	r0, #15
 800217e:	f7ff fbf9 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002182:	202a      	movs	r0, #42	; 0x2a
 8002184:	f7ff fbf6 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002188:	2028      	movs	r0, #40	; 0x28
 800218a:	f7ff fbf3 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800218e:	2008      	movs	r0, #8
 8002190:	f7ff fbf0 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002194:	200e      	movs	r0, #14
 8002196:	f7ff fbed 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800219a:	2008      	movs	r0, #8
 800219c:	f7ff fbea 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80021a0:	2054      	movs	r0, #84	; 0x54
 80021a2:	f7ff fbe7 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80021a6:	20a9      	movs	r0, #169	; 0xa9
 80021a8:	f7ff fbe4 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80021ac:	2043      	movs	r0, #67	; 0x43
 80021ae:	f7ff fbe1 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f7ff fbde 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80021b8:	200f      	movs	r0, #15
 80021ba:	f7ff fbdb 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7ff fbd8 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fbd5 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff fbd2 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7ff fbcf 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80021d6:	20e1      	movs	r0, #225	; 0xe1
 80021d8:	f7ff fbbc 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fbc9 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80021e2:	2015      	movs	r0, #21
 80021e4:	f7ff fbc6 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80021e8:	2017      	movs	r0, #23
 80021ea:	f7ff fbc3 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80021ee:	2007      	movs	r0, #7
 80021f0:	f7ff fbc0 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80021f4:	2011      	movs	r0, #17
 80021f6:	f7ff fbbd 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80021fa:	2006      	movs	r0, #6
 80021fc:	f7ff fbba 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002200:	202b      	movs	r0, #43	; 0x2b
 8002202:	f7ff fbb7 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002206:	2056      	movs	r0, #86	; 0x56
 8002208:	f7ff fbb4 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800220c:	203c      	movs	r0, #60	; 0x3c
 800220e:	f7ff fbb1 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002212:	2005      	movs	r0, #5
 8002214:	f7ff fbae 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002218:	2010      	movs	r0, #16
 800221a:	f7ff fbab 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800221e:	200f      	movs	r0, #15
 8002220:	f7ff fba8 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002224:	203f      	movs	r0, #63	; 0x3f
 8002226:	f7ff fba5 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800222a:	203f      	movs	r0, #63	; 0x3f
 800222c:	f7ff fba2 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002230:	200f      	movs	r0, #15
 8002232:	f7ff fb9f 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002236:	202b      	movs	r0, #43	; 0x2b
 8002238:	f7ff fb8c 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800223c:	2000      	movs	r0, #0
 800223e:	f7ff fb99 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff fb96 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fb93 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800224e:	203f      	movs	r0, #63	; 0x3f
 8002250:	f7ff fb90 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002254:	202a      	movs	r0, #42	; 0x2a
 8002256:	f7ff fb7d 	bl	8001954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fb8a 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fb87 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7ff fb84 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800226c:	20ef      	movs	r0, #239	; 0xef
 800226e:	f7ff fb81 	bl	8001974 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002272:	2011      	movs	r0, #17
 8002274:	f7ff fb6e 	bl	8001954 <LCD_WR_REG>
	HAL_Delay(120);
 8002278:	2078      	movs	r0, #120	; 0x78
 800227a:	f001 f87b 	bl	8003374 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800227e:	2029      	movs	r0, #41	; 0x29
 8002280:	f7ff fb68 	bl	8001954 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	4804      	ldr	r0, [pc, #16]	; (800229c <lcd_init+0x2bc>)
 800228c:	f001 fb44 	bl	8003918 <HAL_GPIO_WritePin>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020800 	.word	0x40020800
 8002298:	200000cc 	.word	0x200000cc
 800229c:	40020000 	.word	0x40020000

080022a0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b298      	uxth	r0, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	8b3a      	ldrh	r2, [r7, #24]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff fc29 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b298      	uxth	r0, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	8b3a      	ldrh	r2, [r7, #24]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f7ff fc19 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	b298      	uxth	r0, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	b29b      	uxth	r3, r3
 8002306:	8b3a      	ldrh	r2, [r7, #24]
 8002308:	4619      	mov	r1, r3
 800230a:	f7ff fc09 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	b29b      	uxth	r3, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b298      	uxth	r0, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	b29a      	uxth	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b29b      	uxth	r3, r3
 8002326:	8b3a      	ldrh	r2, [r7, #24]
 8002328:	4619      	mov	r1, r3
 800232a:	f7ff fbf9 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	b29a      	uxth	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b298      	uxth	r0, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	b29a      	uxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	b29b      	uxth	r3, r3
 8002342:	4413      	add	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	8b3a      	ldrh	r2, [r7, #24]
 8002348:	4619      	mov	r1, r3
 800234a:	f7ff fbe9 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	b29a      	uxth	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	b298      	uxth	r0, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4413      	add	r3, r2
 8002364:	b29b      	uxth	r3, r3
 8002366:	8b3a      	ldrh	r2, [r7, #24]
 8002368:	4619      	mov	r1, r3
 800236a:	f7ff fbd9 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	b29a      	uxth	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	4413      	add	r3, r2
 8002378:	b298      	uxth	r0, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	b29a      	uxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	b29b      	uxth	r3, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	8b3a      	ldrh	r2, [r7, #24]
 8002388:	4619      	mov	r1, r3
 800238a:	f7ff fbc9 	bl	8001b20 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	b29a      	uxth	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b298      	uxth	r0, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	8b3a      	ldrh	r2, [r7, #24]
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7ff fbb9 	bl	8001b20 <lcd_DrawPoint>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b08a      	sub	sp, #40	; 0x28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	f1c3 0303 	rsb	r3, r3, #3
 80023d6:	613b      	str	r3, [r7, #16]


	if (fill)
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d04f      	beq.n	800247e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80023de:	e029      	b.n	8002434 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7ff ff55 	bl	80022a0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	429a      	cmp	r2, r3
 8002402:	ddf0      	ble.n	80023e6 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	da06      	bge.n	8002418 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	009a      	lsls	r2, r3, #2
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	3306      	adds	r3, #6
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e00a      	b.n	800242e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	009a      	lsls	r2, r3, #2
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4413      	add	r3, r2
 8002424:	330a      	adds	r3, #10
 8002426:	613b      	str	r3, [r7, #16]
				y--;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	3b01      	subs	r3, #1
 800242c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	429a      	cmp	r2, r3
 800243a:	ddd1      	ble.n	80023e0 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800243c:	e023      	b.n	8002486 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff ff29 	bl	80022a0 <_draw_circle_8>
			if (d < 0) {
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	da06      	bge.n	8002462 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	009a      	lsls	r2, r3, #2
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	3306      	adds	r3, #6
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e00a      	b.n	8002478 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4413      	add	r3, r2
 800246e:	330a      	adds	r3, #10
 8002470:	613b      	str	r3, [r7, #16]
				y--;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3b01      	subs	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
			x++;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3301      	adds	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	429a      	cmp	r2, r3
 8002484:	dddb      	ble.n	800243e <lcd_DrawCircle+0x88>
}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af04      	add	r7, sp, #16
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	81fb      	strh	r3, [r7, #14]
 800249e:	460b      	mov	r3, r1
 80024a0:	81bb      	strh	r3, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80024a6:	89fb      	ldrh	r3, [r7, #14]
 80024a8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80024ae:	e048      	b.n	8002542 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d145      	bne.n	8002542 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80024b6:	89fa      	ldrh	r2, [r7, #14]
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <lcd_ShowStr+0xc4>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	1acb      	subs	r3, r1, r3
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dc3f      	bgt.n	800254c <lcd_ShowStr+0xbc>
 80024cc:	89ba      	ldrh	r2, [r7, #12]
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <lcd_ShowStr+0xc4>)
 80024d0:	885b      	ldrh	r3, [r3, #2]
 80024d2:	4619      	mov	r1, r3
 80024d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024d8:	1acb      	subs	r3, r1, r3
 80024da:	429a      	cmp	r2, r3
 80024dc:	dc36      	bgt.n	800254c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d902      	bls.n	80024ec <lcd_ShowStr+0x5c>
 80024e6:	2301      	movs	r3, #1
 80024e8:	75fb      	strb	r3, [r7, #23]
 80024ea:	e02a      	b.n	8002542 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b0d      	cmp	r3, #13
 80024f2:	d10b      	bne.n	800250c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80024f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	89bb      	ldrh	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002500:	8abb      	ldrh	r3, [r7, #20]
 8002502:	81fb      	strh	r3, [r7, #14]
					str++;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	e017      	b.n	800253c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	88fc      	ldrh	r4, [r7, #6]
 8002512:	89b9      	ldrh	r1, [r7, #12]
 8002514:	89f8      	ldrh	r0, [r7, #14]
 8002516:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4623      	mov	r3, r4
 8002528:	f7ff fbcc 	bl	8001cc4 <lcd_ShowChar>
					x+=sizey/2;
 800252c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	b29a      	uxth	r2, r3
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	4413      	add	r3, r2
 800253a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3301      	adds	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1b2      	bne.n	80024b0 <lcd_ShowStr+0x20>
 800254a:	e000      	b.n	800254e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800254c:	bf00      	nop
			}
		}
	}
}
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}
 8002554:	200000cc 	.word	0x200000cc

08002558 <led7_init>:
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
 800255c:	2201      	movs	r2, #1
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <led7_init+0x14>)
 8002562:	f001 f9d9 	bl	8003918 <HAL_GPIO_WritePin>
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021800 	.word	0x40021800

08002570 <init_traffic_light>:
} traffic_NS;

/*@brief:	function to init traffic light
 * @para:	none
 * @retval:	none*/
void init_traffic_light(void) {
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b085      	sub	sp, #20
 8002574:	af04      	add	r7, sp, #16
	traffic_WE.x = 50;
 8002576:	4b60      	ldr	r3, [pc, #384]	; (80026f8 <init_traffic_light+0x188>)
 8002578:	2232      	movs	r2, #50	; 0x32
 800257a:	801a      	strh	r2, [r3, #0]
	traffic_WE.y = 120;
 800257c:	4b5e      	ldr	r3, [pc, #376]	; (80026f8 <init_traffic_light+0x188>)
 800257e:	2278      	movs	r2, #120	; 0x78
 8002580:	805a      	strh	r2, [r3, #2]
	traffic_WE.width = 40;
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <init_traffic_light+0x188>)
 8002584:	2228      	movs	r2, #40	; 0x28
 8002586:	80da      	strh	r2, [r3, #6]
	traffic_WE.height = 120;
 8002588:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <init_traffic_light+0x188>)
 800258a:	2278      	movs	r2, #120	; 0x78
 800258c:	809a      	strh	r2, [r3, #4]
	traffic_WE.COLOR_FILL = WHITE;
 800258e:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <init_traffic_light+0x188>)
 8002590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002594:	811a      	strh	r2, [r3, #8]
	//draw a black box
	lcd_DrawRectangle(traffic_WE.x, traffic_WE.y,
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <init_traffic_light+0x188>)
 8002598:	8818      	ldrh	r0, [r3, #0]
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <init_traffic_light+0x188>)
 800259c:	8859      	ldrh	r1, [r3, #2]
			traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height,
 800259e:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <init_traffic_light+0x188>)
 80025a0:	881a      	ldrh	r2, [r3, #0]
 80025a2:	4b55      	ldr	r3, [pc, #340]	; (80026f8 <init_traffic_light+0x188>)
 80025a4:	88db      	ldrh	r3, [r3, #6]
	lcd_DrawRectangle(traffic_WE.x, traffic_WE.y,
 80025a6:	4413      	add	r3, r2
 80025a8:	b29c      	uxth	r4, r3
			traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height,
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <init_traffic_light+0x188>)
 80025ac:	885a      	ldrh	r2, [r3, #2]
 80025ae:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <init_traffic_light+0x188>)
 80025b0:	889b      	ldrh	r3, [r3, #4]
	lcd_DrawRectangle(traffic_WE.x, traffic_WE.y,
 80025b2:	4413      	add	r3, r2
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <init_traffic_light+0x188>)
 80025b8:	891b      	ldrh	r3, [r3, #8]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	4622      	mov	r2, r4
 80025c0:	f7ff fb49 	bl	8001c56 <lcd_DrawRectangle>
			traffic_WE.COLOR_FILL);
	lcd_Fill(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width,
 80025c4:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <init_traffic_light+0x188>)
 80025c6:	8818      	ldrh	r0, [r3, #0]
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <init_traffic_light+0x188>)
 80025ca:	8859      	ldrh	r1, [r3, #2]
 80025cc:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <init_traffic_light+0x188>)
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <init_traffic_light+0x188>)
 80025d2:	88db      	ldrh	r3, [r3, #6]
 80025d4:	4413      	add	r3, r2
 80025d6:	b29c      	uxth	r4, r3
			traffic_WE.y + traffic_WE.height, traffic_WE.COLOR_FILL);
 80025d8:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <init_traffic_light+0x188>)
 80025da:	885a      	ldrh	r2, [r3, #2]
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <init_traffic_light+0x188>)
 80025de:	889b      	ldrh	r3, [r3, #4]
	lcd_Fill(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width,
 80025e0:	4413      	add	r3, r2
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <init_traffic_light+0x188>)
 80025e6:	891b      	ldrh	r3, [r3, #8]
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4613      	mov	r3, r2
 80025ec:	4622      	mov	r2, r4
 80025ee:	f7ff fa61 	bl	8001ab4 <lcd_Fill>

	//calculate center and radius of each light inside above black box
	traffic_WE.red.center_y = traffic_WE.y + traffic_WE.height / 6;
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <init_traffic_light+0x188>)
 80025f4:	885a      	ldrh	r2, [r3, #2]
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <init_traffic_light+0x188>)
 80025f8:	889b      	ldrh	r3, [r3, #4]
 80025fa:	4940      	ldr	r1, [pc, #256]	; (80026fc <init_traffic_light+0x18c>)
 80025fc:	fba1 1303 	umull	r1, r3, r1, r3
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	b29b      	uxth	r3, r3
 8002604:	4413      	add	r3, r2
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <init_traffic_light+0x188>)
 800260a:	819a      	strh	r2, [r3, #12]
	traffic_WE.yellow.center_y = traffic_WE.y + 3 * traffic_WE.height / 6;
 800260c:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <init_traffic_light+0x188>)
 800260e:	885a      	ldrh	r2, [r3, #2]
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <init_traffic_light+0x188>)
 8002612:	889b      	ldrh	r3, [r3, #4]
 8002614:	0fd9      	lsrs	r1, r3, #31
 8002616:	440b      	add	r3, r1
 8002618:	105b      	asrs	r3, r3, #1
 800261a:	b29b      	uxth	r3, r3
 800261c:	4413      	add	r3, r2
 800261e:	b29a      	uxth	r2, r3
 8002620:	4b35      	ldr	r3, [pc, #212]	; (80026f8 <init_traffic_light+0x188>)
 8002622:	82da      	strh	r2, [r3, #22]
	traffic_WE.green.center_y = traffic_WE.y + 5 * traffic_WE.height / 6;
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <init_traffic_light+0x188>)
 8002626:	885a      	ldrh	r2, [r3, #2]
 8002628:	4b33      	ldr	r3, [pc, #204]	; (80026f8 <init_traffic_light+0x188>)
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	4619      	mov	r1, r3
 800262e:	460b      	mov	r3, r1
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	4932      	ldr	r1, [pc, #200]	; (8002700 <init_traffic_light+0x190>)
 8002636:	fb81 0103 	smull	r0, r1, r1, r3
 800263a:	17db      	asrs	r3, r3, #31
 800263c:	1acb      	subs	r3, r1, r3
 800263e:	b29b      	uxth	r3, r3
 8002640:	4413      	add	r3, r2
 8002642:	b29a      	uxth	r2, r3
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <init_traffic_light+0x188>)
 8002646:	841a      	strh	r2, [r3, #32]

	traffic_WE.red.center_x = traffic_WE.x + traffic_WE.width / 2;
 8002648:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <init_traffic_light+0x188>)
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <init_traffic_light+0x188>)
 800264e:	88db      	ldrh	r3, [r3, #6]
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	4413      	add	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <init_traffic_light+0x188>)
 800265a:	815a      	strh	r2, [r3, #10]
	traffic_WE.yellow.center_x = traffic_WE.red.center_x;
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <init_traffic_light+0x188>)
 800265e:	895a      	ldrh	r2, [r3, #10]
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <init_traffic_light+0x188>)
 8002662:	829a      	strh	r2, [r3, #20]
	traffic_WE.green.center_x = traffic_WE.red.center_x;
 8002664:	4b24      	ldr	r3, [pc, #144]	; (80026f8 <init_traffic_light+0x188>)
 8002666:	895a      	ldrh	r2, [r3, #10]
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <init_traffic_light+0x188>)
 800266a:	83da      	strh	r2, [r3, #30]

	traffic_WE.red.radius = (traffic_WE.width / 2) * 90 / 100;
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <init_traffic_light+0x188>)
 800266e:	88db      	ldrh	r3, [r3, #6]
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	235a      	movs	r3, #90	; 0x5a
 8002678:	fb03 f302 	mul.w	r3, r3, r2
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <init_traffic_light+0x194>)
 800267e:	fb82 1203 	smull	r1, r2, r2, r3
 8002682:	1152      	asrs	r2, r2, #5
 8002684:	17db      	asrs	r3, r3, #31
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <init_traffic_light+0x188>)
 800268c:	821a      	strh	r2, [r3, #16]
	traffic_WE.yellow.radius = traffic_WE.red.radius;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <init_traffic_light+0x188>)
 8002690:	8a1a      	ldrh	r2, [r3, #16]
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <init_traffic_light+0x188>)
 8002694:	835a      	strh	r2, [r3, #26]
	traffic_WE.green.radius = traffic_WE.red.radius;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <init_traffic_light+0x188>)
 8002698:	8a1a      	ldrh	r2, [r3, #16]
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <init_traffic_light+0x188>)
 800269c:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_WE.red.is_fill = 1;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <init_traffic_light+0x188>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	749a      	strb	r2, [r3, #18]
	if (traffic_WE.red.is_fill == 1) {
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <init_traffic_light+0x188>)
 80026a6:	7c9b      	ldrb	r3, [r3, #18]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d104      	bne.n	80026b6 <init_traffic_light+0x146>
		traffic_WE.red.COLOR_FILL = RED;
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <init_traffic_light+0x188>)
 80026ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80026b2:	81da      	strh	r2, [r3, #14]
 80026b4:	e002      	b.n	80026bc <init_traffic_light+0x14c>
	} else {
		traffic_WE.red.COLOR_FILL = BLACK;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <init_traffic_light+0x188>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	81da      	strh	r2, [r3, #14]
	}
	traffic_WE.yellow.is_fill = 1;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <init_traffic_light+0x188>)
 80026be:	2201      	movs	r2, #1
 80026c0:	771a      	strb	r2, [r3, #28]
	if (traffic_WE.yellow.is_fill == 1) {
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <init_traffic_light+0x188>)
 80026c4:	7f1b      	ldrb	r3, [r3, #28]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d104      	bne.n	80026d4 <init_traffic_light+0x164>
		traffic_WE.yellow.COLOR_FILL = YELLOW;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <init_traffic_light+0x188>)
 80026cc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80026d0:	831a      	strh	r2, [r3, #24]
 80026d2:	e002      	b.n	80026da <init_traffic_light+0x16a>
	} else {
		traffic_WE.yellow.COLOR_FILL = BLACK;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <init_traffic_light+0x188>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	831a      	strh	r2, [r3, #24]
	}
	traffic_WE.green.is_fill = 1;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <init_traffic_light+0x188>)
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (traffic_WE.green.is_fill == 1) {
 80026e2:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <init_traffic_light+0x188>)
 80026e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10d      	bne.n	8002708 <init_traffic_light+0x198>
		traffic_WE.green.COLOR_FILL = GREEN;
 80026ec:	4b02      	ldr	r3, [pc, #8]	; (80026f8 <init_traffic_light+0x188>)
 80026ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026f2:	845a      	strh	r2, [r3, #34]	; 0x22
 80026f4:	e00b      	b.n	800270e <init_traffic_light+0x19e>
 80026f6:	bf00      	nop
 80026f8:	20000140 	.word	0x20000140
 80026fc:	aaaaaaab 	.word	0xaaaaaaab
 8002700:	2aaaaaab 	.word	0x2aaaaaab
 8002704:	51eb851f 	.word	0x51eb851f
	} else {
		traffic_WE.green.COLOR_FILL = BLACK;
 8002708:	4b97      	ldr	r3, [pc, #604]	; (8002968 <init_traffic_light+0x3f8>)
 800270a:	2200      	movs	r2, #0
 800270c:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	//draw red
	lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y,
 800270e:	4b96      	ldr	r3, [pc, #600]	; (8002968 <init_traffic_light+0x3f8>)
 8002710:	895b      	ldrh	r3, [r3, #10]
 8002712:	4618      	mov	r0, r3
 8002714:	4b94      	ldr	r3, [pc, #592]	; (8002968 <init_traffic_light+0x3f8>)
 8002716:	899b      	ldrh	r3, [r3, #12]
 8002718:	4619      	mov	r1, r3
 800271a:	4b93      	ldr	r3, [pc, #588]	; (8002968 <init_traffic_light+0x3f8>)
 800271c:	89da      	ldrh	r2, [r3, #14]
			traffic_WE.red.COLOR_FILL, traffic_WE.red.radius,
 800271e:	4b92      	ldr	r3, [pc, #584]	; (8002968 <init_traffic_light+0x3f8>)
 8002720:	8a1b      	ldrh	r3, [r3, #16]
	lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y,
 8002722:	461c      	mov	r4, r3
			traffic_WE.red.is_fill);
 8002724:	4b90      	ldr	r3, [pc, #576]	; (8002968 <init_traffic_light+0x3f8>)
 8002726:	7c9b      	ldrb	r3, [r3, #18]
	lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y,
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4623      	mov	r3, r4
 800272c:	f7ff fe43 	bl	80023b6 <lcd_DrawCircle>
	//draw yellow
	lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y,
 8002730:	4b8d      	ldr	r3, [pc, #564]	; (8002968 <init_traffic_light+0x3f8>)
 8002732:	8a9b      	ldrh	r3, [r3, #20]
 8002734:	4618      	mov	r0, r3
 8002736:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <init_traffic_light+0x3f8>)
 8002738:	8adb      	ldrh	r3, [r3, #22]
 800273a:	4619      	mov	r1, r3
 800273c:	4b8a      	ldr	r3, [pc, #552]	; (8002968 <init_traffic_light+0x3f8>)
 800273e:	8b1a      	ldrh	r2, [r3, #24]
			traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius,
 8002740:	4b89      	ldr	r3, [pc, #548]	; (8002968 <init_traffic_light+0x3f8>)
 8002742:	8b5b      	ldrh	r3, [r3, #26]
	lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y,
 8002744:	461c      	mov	r4, r3
			traffic_WE.yellow.is_fill);
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <init_traffic_light+0x3f8>)
 8002748:	7f1b      	ldrb	r3, [r3, #28]
	lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y,
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4623      	mov	r3, r4
 800274e:	f7ff fe32 	bl	80023b6 <lcd_DrawCircle>
	//draw green
	lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y,
 8002752:	4b85      	ldr	r3, [pc, #532]	; (8002968 <init_traffic_light+0x3f8>)
 8002754:	8bdb      	ldrh	r3, [r3, #30]
 8002756:	4618      	mov	r0, r3
 8002758:	4b83      	ldr	r3, [pc, #524]	; (8002968 <init_traffic_light+0x3f8>)
 800275a:	8c1b      	ldrh	r3, [r3, #32]
 800275c:	4619      	mov	r1, r3
 800275e:	4b82      	ldr	r3, [pc, #520]	; (8002968 <init_traffic_light+0x3f8>)
 8002760:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
			traffic_WE.green.COLOR_FILL, traffic_WE.green.radius,
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <init_traffic_light+0x3f8>)
 8002764:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y,
 8002766:	461c      	mov	r4, r3
			traffic_WE.green.is_fill);
 8002768:	4b7f      	ldr	r3, [pc, #508]	; (8002968 <init_traffic_light+0x3f8>)
 800276a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y,
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	4623      	mov	r3, r4
 8002772:	f7ff fe20 	bl	80023b6 <lcd_DrawCircle>

	//init num
	traffic_WE.num.len = 2;
 8002776:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <init_traffic_light+0x3f8>)
 8002778:	2202      	movs	r2, #2
 800277a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_WE.num.fc = BLACK;
 800277e:	4b7a      	ldr	r3, [pc, #488]	; (8002968 <init_traffic_light+0x3f8>)
 8002780:	2200      	movs	r2, #0
 8002782:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_WE.num.bc = WHITE;
 8002784:	4b78      	ldr	r3, [pc, #480]	; (8002968 <init_traffic_light+0x3f8>)
 8002786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278a:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_WE.num.sizey = 32;
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <init_traffic_light+0x3f8>)
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_WE.num.x = traffic_WE.x;
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <init_traffic_light+0x3f8>)
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	4b73      	ldr	r3, [pc, #460]	; (8002968 <init_traffic_light+0x3f8>)
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_WE.num.y = traffic_WE.y - traffic_WE.num.sizey;
 800279c:	4b72      	ldr	r3, [pc, #456]	; (8002968 <init_traffic_light+0x3f8>)
 800279e:	885a      	ldrh	r2, [r3, #2]
 80027a0:	4b71      	ldr	r3, [pc, #452]	; (8002968 <init_traffic_light+0x3f8>)
 80027a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b6e      	ldr	r3, [pc, #440]	; (8002968 <init_traffic_light+0x3f8>)
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_WE.num.num = 99;
 80027b0:	4b6d      	ldr	r3, [pc, #436]	; (8002968 <init_traffic_light+0x3f8>)
 80027b2:	2263      	movs	r2, #99	; 0x63
 80027b4:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num,
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <init_traffic_light+0x3f8>)
 80027b8:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80027ba:	4b6b      	ldr	r3, [pc, #428]	; (8002968 <init_traffic_light+0x3f8>)
 80027bc:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <init_traffic_light+0x3f8>)
 80027c0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <init_traffic_light+0x3f8>)
 80027c4:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <init_traffic_light+0x3f8>)
 80027ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80027cc:	4a66      	ldr	r2, [pc, #408]	; (8002968 <init_traffic_light+0x3f8>)
 80027ce:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80027d0:	4965      	ldr	r1, [pc, #404]	; (8002968 <init_traffic_light+0x3f8>)
 80027d2:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 80027d6:	9102      	str	r1, [sp, #8]
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4633      	mov	r3, r6
 80027de:	462a      	mov	r2, r5
 80027e0:	4621      	mov	r1, r4
 80027e2:	f7ff fb5b 	bl	8001e9c <lcd_ShowIntNum>
			traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc,
			traffic_WE.num.sizey);

	/*init NS    -------------------------------------------------------------*/
	traffic_NS.x = 150;
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <init_traffic_light+0x3fc>)
 80027e8:	2296      	movs	r2, #150	; 0x96
 80027ea:	801a      	strh	r2, [r3, #0]
	traffic_NS.y = 120;
 80027ec:	4b5f      	ldr	r3, [pc, #380]	; (800296c <init_traffic_light+0x3fc>)
 80027ee:	2278      	movs	r2, #120	; 0x78
 80027f0:	805a      	strh	r2, [r3, #2]
	traffic_NS.width = 40;
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <init_traffic_light+0x3fc>)
 80027f4:	2228      	movs	r2, #40	; 0x28
 80027f6:	80da      	strh	r2, [r3, #6]
	traffic_NS.height = 120;
 80027f8:	4b5c      	ldr	r3, [pc, #368]	; (800296c <init_traffic_light+0x3fc>)
 80027fa:	2278      	movs	r2, #120	; 0x78
 80027fc:	809a      	strh	r2, [r3, #4]
	traffic_NS.COLOR_FILL = WHITE;
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <init_traffic_light+0x3fc>)
 8002800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002804:	811a      	strh	r2, [r3, #8]
	//draw a black box
	lcd_DrawRectangle(traffic_NS.x, traffic_NS.y,
 8002806:	4b59      	ldr	r3, [pc, #356]	; (800296c <init_traffic_light+0x3fc>)
 8002808:	8818      	ldrh	r0, [r3, #0]
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <init_traffic_light+0x3fc>)
 800280c:	8859      	ldrh	r1, [r3, #2]
			traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height,
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <init_traffic_light+0x3fc>)
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	4b56      	ldr	r3, [pc, #344]	; (800296c <init_traffic_light+0x3fc>)
 8002814:	88db      	ldrh	r3, [r3, #6]
	lcd_DrawRectangle(traffic_NS.x, traffic_NS.y,
 8002816:	4413      	add	r3, r2
 8002818:	b29c      	uxth	r4, r3
			traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height,
 800281a:	4b54      	ldr	r3, [pc, #336]	; (800296c <init_traffic_light+0x3fc>)
 800281c:	885a      	ldrh	r2, [r3, #2]
 800281e:	4b53      	ldr	r3, [pc, #332]	; (800296c <init_traffic_light+0x3fc>)
 8002820:	889b      	ldrh	r3, [r3, #4]
	lcd_DrawRectangle(traffic_NS.x, traffic_NS.y,
 8002822:	4413      	add	r3, r2
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b51      	ldr	r3, [pc, #324]	; (800296c <init_traffic_light+0x3fc>)
 8002828:	891b      	ldrh	r3, [r3, #8]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	4613      	mov	r3, r2
 800282e:	4622      	mov	r2, r4
 8002830:	f7ff fa11 	bl	8001c56 <lcd_DrawRectangle>
			traffic_NS.COLOR_FILL);
	lcd_Fill(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width,
 8002834:	4b4d      	ldr	r3, [pc, #308]	; (800296c <init_traffic_light+0x3fc>)
 8002836:	8818      	ldrh	r0, [r3, #0]
 8002838:	4b4c      	ldr	r3, [pc, #304]	; (800296c <init_traffic_light+0x3fc>)
 800283a:	8859      	ldrh	r1, [r3, #2]
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <init_traffic_light+0x3fc>)
 800283e:	881a      	ldrh	r2, [r3, #0]
 8002840:	4b4a      	ldr	r3, [pc, #296]	; (800296c <init_traffic_light+0x3fc>)
 8002842:	88db      	ldrh	r3, [r3, #6]
 8002844:	4413      	add	r3, r2
 8002846:	b29c      	uxth	r4, r3
			traffic_NS.y + traffic_NS.height, traffic_NS.COLOR_FILL);
 8002848:	4b48      	ldr	r3, [pc, #288]	; (800296c <init_traffic_light+0x3fc>)
 800284a:	885a      	ldrh	r2, [r3, #2]
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <init_traffic_light+0x3fc>)
 800284e:	889b      	ldrh	r3, [r3, #4]
	lcd_Fill(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width,
 8002850:	4413      	add	r3, r2
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <init_traffic_light+0x3fc>)
 8002856:	891b      	ldrh	r3, [r3, #8]
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	4622      	mov	r2, r4
 800285e:	f7ff f929 	bl	8001ab4 <lcd_Fill>

	//calculate center and radius of each light inside above black box
	traffic_NS.red.center_y = traffic_NS.y + traffic_NS.height / 6;
 8002862:	4b42      	ldr	r3, [pc, #264]	; (800296c <init_traffic_light+0x3fc>)
 8002864:	885a      	ldrh	r2, [r3, #2]
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <init_traffic_light+0x3fc>)
 8002868:	889b      	ldrh	r3, [r3, #4]
 800286a:	4941      	ldr	r1, [pc, #260]	; (8002970 <init_traffic_light+0x400>)
 800286c:	fba1 1303 	umull	r1, r3, r1, r3
 8002870:	089b      	lsrs	r3, r3, #2
 8002872:	b29b      	uxth	r3, r3
 8002874:	4413      	add	r3, r2
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b3c      	ldr	r3, [pc, #240]	; (800296c <init_traffic_light+0x3fc>)
 800287a:	819a      	strh	r2, [r3, #12]
	traffic_NS.yellow.center_y = traffic_NS.y + 3 * traffic_NS.height / 6;
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <init_traffic_light+0x3fc>)
 800287e:	885a      	ldrh	r2, [r3, #2]
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <init_traffic_light+0x3fc>)
 8002882:	889b      	ldrh	r3, [r3, #4]
 8002884:	0fd9      	lsrs	r1, r3, #31
 8002886:	440b      	add	r3, r1
 8002888:	105b      	asrs	r3, r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	4413      	add	r3, r2
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <init_traffic_light+0x3fc>)
 8002892:	82da      	strh	r2, [r3, #22]
	traffic_NS.green.center_y = traffic_NS.y + 5 * traffic_NS.height / 6;
 8002894:	4b35      	ldr	r3, [pc, #212]	; (800296c <init_traffic_light+0x3fc>)
 8002896:	885a      	ldrh	r2, [r3, #2]
 8002898:	4b34      	ldr	r3, [pc, #208]	; (800296c <init_traffic_light+0x3fc>)
 800289a:	889b      	ldrh	r3, [r3, #4]
 800289c:	4619      	mov	r1, r3
 800289e:	460b      	mov	r3, r1
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	4933      	ldr	r1, [pc, #204]	; (8002974 <init_traffic_light+0x404>)
 80028a6:	fb81 0103 	smull	r0, r1, r1, r3
 80028aa:	17db      	asrs	r3, r3, #31
 80028ac:	1acb      	subs	r3, r1, r3
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <init_traffic_light+0x3fc>)
 80028b6:	841a      	strh	r2, [r3, #32]

	traffic_NS.red.center_x = traffic_NS.x + traffic_NS.width / 2;
 80028b8:	4b2c      	ldr	r3, [pc, #176]	; (800296c <init_traffic_light+0x3fc>)
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <init_traffic_light+0x3fc>)
 80028be:	88db      	ldrh	r3, [r3, #6]
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <init_traffic_light+0x3fc>)
 80028ca:	815a      	strh	r2, [r3, #10]
	traffic_NS.yellow.center_x = traffic_NS.red.center_x;
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <init_traffic_light+0x3fc>)
 80028ce:	895a      	ldrh	r2, [r3, #10]
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <init_traffic_light+0x3fc>)
 80028d2:	829a      	strh	r2, [r3, #20]
	traffic_NS.green.center_x = traffic_NS.red.center_x;
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <init_traffic_light+0x3fc>)
 80028d6:	895a      	ldrh	r2, [r3, #10]
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <init_traffic_light+0x3fc>)
 80028da:	83da      	strh	r2, [r3, #30]

	traffic_NS.red.radius = (traffic_NS.width / 2) * 90 / 100;
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <init_traffic_light+0x3fc>)
 80028de:	88db      	ldrh	r3, [r3, #6]
 80028e0:	085b      	lsrs	r3, r3, #1
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	235a      	movs	r3, #90	; 0x5a
 80028e8:	fb03 f302 	mul.w	r3, r3, r2
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <init_traffic_light+0x408>)
 80028ee:	fb82 1203 	smull	r1, r2, r2, r3
 80028f2:	1152      	asrs	r2, r2, #5
 80028f4:	17db      	asrs	r3, r3, #31
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b1c      	ldr	r3, [pc, #112]	; (800296c <init_traffic_light+0x3fc>)
 80028fc:	821a      	strh	r2, [r3, #16]
	traffic_NS.yellow.radius = traffic_NS.red.radius;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <init_traffic_light+0x3fc>)
 8002900:	8a1a      	ldrh	r2, [r3, #16]
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <init_traffic_light+0x3fc>)
 8002904:	835a      	strh	r2, [r3, #26]
	traffic_NS.green.radius = traffic_NS.red.radius;
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <init_traffic_light+0x3fc>)
 8002908:	8a1a      	ldrh	r2, [r3, #16]
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <init_traffic_light+0x3fc>)
 800290c:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_NS.red.is_fill = 1;
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <init_traffic_light+0x3fc>)
 8002910:	2201      	movs	r2, #1
 8002912:	749a      	strb	r2, [r3, #18]
	if (traffic_NS.red.is_fill == 1) {
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <init_traffic_light+0x3fc>)
 8002916:	7c9b      	ldrb	r3, [r3, #18]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d104      	bne.n	8002926 <init_traffic_light+0x3b6>
		traffic_NS.red.COLOR_FILL = RED;
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <init_traffic_light+0x3fc>)
 800291e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002922:	81da      	strh	r2, [r3, #14]
 8002924:	e002      	b.n	800292c <init_traffic_light+0x3bc>
	} else {
		traffic_NS.red.COLOR_FILL = BLACK;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <init_traffic_light+0x3fc>)
 8002928:	2200      	movs	r2, #0
 800292a:	81da      	strh	r2, [r3, #14]
	}
	traffic_NS.yellow.is_fill = 1;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <init_traffic_light+0x3fc>)
 800292e:	2201      	movs	r2, #1
 8002930:	771a      	strb	r2, [r3, #28]
	if (traffic_NS.yellow.is_fill == 1) {
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <init_traffic_light+0x3fc>)
 8002934:	7f1b      	ldrb	r3, [r3, #28]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d104      	bne.n	8002944 <init_traffic_light+0x3d4>
		traffic_NS.yellow.COLOR_FILL = YELLOW;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <init_traffic_light+0x3fc>)
 800293c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002940:	831a      	strh	r2, [r3, #24]
 8002942:	e002      	b.n	800294a <init_traffic_light+0x3da>
	} else {
		traffic_NS.yellow.COLOR_FILL = BLACK;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <init_traffic_light+0x3fc>)
 8002946:	2200      	movs	r2, #0
 8002948:	831a      	strh	r2, [r3, #24]
	}
	traffic_NS.green.is_fill = 1;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <init_traffic_light+0x3fc>)
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (traffic_NS.green.is_fill == 1) {
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <init_traffic_light+0x3fc>)
 8002954:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002958:	2b01      	cmp	r3, #1
 800295a:	d10f      	bne.n	800297c <init_traffic_light+0x40c>
		traffic_NS.green.COLOR_FILL = GREEN;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <init_traffic_light+0x3fc>)
 800295e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002962:	845a      	strh	r2, [r3, #34]	; 0x22
 8002964:	e00d      	b.n	8002982 <init_traffic_light+0x412>
 8002966:	bf00      	nop
 8002968:	20000140 	.word	0x20000140
 800296c:	20000108 	.word	0x20000108
 8002970:	aaaaaaab 	.word	0xaaaaaaab
 8002974:	2aaaaaab 	.word	0x2aaaaaab
 8002978:	51eb851f 	.word	0x51eb851f
	} else {
		traffic_NS.green.COLOR_FILL = BLACK;
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <init_traffic_light+0x4f4>)
 800297e:	2200      	movs	r2, #0
 8002980:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	//draw red
	lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y,
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <init_traffic_light+0x4f4>)
 8002984:	895b      	ldrh	r3, [r3, #10]
 8002986:	4618      	mov	r0, r3
 8002988:	4b36      	ldr	r3, [pc, #216]	; (8002a64 <init_traffic_light+0x4f4>)
 800298a:	899b      	ldrh	r3, [r3, #12]
 800298c:	4619      	mov	r1, r3
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <init_traffic_light+0x4f4>)
 8002990:	89da      	ldrh	r2, [r3, #14]
			traffic_NS.red.COLOR_FILL, traffic_NS.red.radius,
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <init_traffic_light+0x4f4>)
 8002994:	8a1b      	ldrh	r3, [r3, #16]
	lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y,
 8002996:	461c      	mov	r4, r3
			traffic_NS.red.is_fill);
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <init_traffic_light+0x4f4>)
 800299a:	7c9b      	ldrb	r3, [r3, #18]
	lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y,
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4623      	mov	r3, r4
 80029a0:	f7ff fd09 	bl	80023b6 <lcd_DrawCircle>
	//draw yellow
	lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y,
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <init_traffic_light+0x4f4>)
 80029a6:	8a9b      	ldrh	r3, [r3, #20]
 80029a8:	4618      	mov	r0, r3
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <init_traffic_light+0x4f4>)
 80029ac:	8adb      	ldrh	r3, [r3, #22]
 80029ae:	4619      	mov	r1, r3
 80029b0:	4b2c      	ldr	r3, [pc, #176]	; (8002a64 <init_traffic_light+0x4f4>)
 80029b2:	8b1a      	ldrh	r2, [r3, #24]
			traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius,
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <init_traffic_light+0x4f4>)
 80029b6:	8b5b      	ldrh	r3, [r3, #26]
	lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y,
 80029b8:	461c      	mov	r4, r3
			traffic_NS.yellow.is_fill);
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <init_traffic_light+0x4f4>)
 80029bc:	7f1b      	ldrb	r3, [r3, #28]
	lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y,
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4623      	mov	r3, r4
 80029c2:	f7ff fcf8 	bl	80023b6 <lcd_DrawCircle>
	//draw green
	lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <init_traffic_light+0x4f4>)
 80029c8:	8bdb      	ldrh	r3, [r3, #30]
 80029ca:	4618      	mov	r0, r3
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <init_traffic_light+0x4f4>)
 80029ce:	8c1b      	ldrh	r3, [r3, #32]
 80029d0:	4619      	mov	r1, r3
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <init_traffic_light+0x4f4>)
 80029d4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
			traffic_NS.green.COLOR_FILL, traffic_NS.green.radius,
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <init_traffic_light+0x4f4>)
 80029d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
 80029da:	461c      	mov	r4, r3
			traffic_NS.green.is_fill);
 80029dc:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <init_traffic_light+0x4f4>)
 80029de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7ff fce6 	bl	80023b6 <lcd_DrawCircle>

	//init num
	traffic_NS.num.len = 2;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <init_traffic_light+0x4f4>)
 80029ec:	2202      	movs	r2, #2
 80029ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_NS.num.fc = BLACK;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <init_traffic_light+0x4f4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_NS.num.bc = WHITE;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <init_traffic_light+0x4f4>)
 80029fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029fe:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_NS.num.sizey = 32;
 8002a00:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_NS.num.x = traffic_NS.x;
 8002a08:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a0a:	881a      	ldrh	r2, [r3, #0]
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_NS.num.y = traffic_NS.y - traffic_NS.num.sizey;
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a12:	885a      	ldrh	r2, [r3, #2]
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_NS.num.num = 99;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a26:	2263      	movs	r2, #99	; 0x63
 8002a28:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num,
 8002a2a:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a2c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a30:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a34:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a38:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <init_traffic_light+0x4f4>)
 8002a46:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002a4a:	9102      	str	r1, [sp, #8]
 8002a4c:	9201      	str	r2, [sp, #4]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4633      	mov	r3, r6
 8002a52:	462a      	mov	r2, r5
 8002a54:	4621      	mov	r1, r4
 8002a56:	f7ff fa21 	bl	8001e9c <lcd_ShowIntNum>
			traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc,
			traffic_NS.num.sizey);
	/*End init NS-------------------------------------------------------------*/
}
 8002a5a:	bf00      	nop
 8002a5c:	3704      	adds	r7, #4
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000108 	.word	0x20000108

08002a68 <control_traffic_light>:
 * @brief: 	display traffic light function
 * @para:	i - id of traffic light(0: WE, 1: NS)
 * 			red, yellow, green - state of red, yellow and green led (1: on, 0: off)
 * @retval:	none*/
void control_traffic_light(uint8_t i, uint8_t red, uint8_t yellow,
		uint8_t green) {
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	71fb      	strb	r3, [r7, #7]
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	71bb      	strb	r3, [r7, #6]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	717b      	strb	r3, [r7, #5]
 8002a82:	4613      	mov	r3, r2
 8002a84:	713b      	strb	r3, [r7, #4]
	if (i == 0) {
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d151      	bne.n	8002b30 <control_traffic_light+0xc8>
		//draw red
		if (!red) {
 8002a8c:	79bb      	ldrb	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <control_traffic_light+0x32>
			traffic_WE.red.COLOR_FILL = BLACK;
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <control_traffic_light+0x174>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	81da      	strh	r2, [r3, #14]
 8002a98:	e003      	b.n	8002aa2 <control_traffic_light+0x3a>
		} else {
			traffic_WE.red.COLOR_FILL = RED;
 8002a9a:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <control_traffic_light+0x174>)
 8002a9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002aa0:	81da      	strh	r2, [r3, #14]
		}
		if (!yellow) {
 8002aa2:	797b      	ldrb	r3, [r7, #5]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <control_traffic_light+0x48>
			traffic_WE.yellow.COLOR_FILL = BLACK;
 8002aa8:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <control_traffic_light+0x174>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	831a      	strh	r2, [r3, #24]
 8002aae:	e003      	b.n	8002ab8 <control_traffic_light+0x50>
		} else {
			traffic_WE.yellow.COLOR_FILL = YELLOW;
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <control_traffic_light+0x174>)
 8002ab2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002ab6:	831a      	strh	r2, [r3, #24]
		}
		if (!green) {
 8002ab8:	793b      	ldrb	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <control_traffic_light+0x5e>
			traffic_WE.green.COLOR_FILL = BLACK;
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <control_traffic_light+0x174>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	845a      	strh	r2, [r3, #34]	; 0x22
 8002ac4:	e003      	b.n	8002ace <control_traffic_light+0x66>
		} else {
			traffic_WE.green.COLOR_FILL = GREEN;
 8002ac6:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <control_traffic_light+0x174>)
 8002ac8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002acc:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y,
 8002ace:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <control_traffic_light+0x174>)
 8002ad0:	895b      	ldrh	r3, [r3, #10]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <control_traffic_light+0x174>)
 8002ad6:	899b      	ldrh	r3, [r3, #12]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4b40      	ldr	r3, [pc, #256]	; (8002bdc <control_traffic_light+0x174>)
 8002adc:	89da      	ldrh	r2, [r3, #14]
				traffic_WE.red.COLOR_FILL, traffic_WE.red.radius, 1);
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <control_traffic_light+0x174>)
 8002ae0:	8a1b      	ldrh	r3, [r3, #16]
		lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y,
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4623      	mov	r3, r4
 8002aea:	f7ff fc64 	bl	80023b6 <lcd_DrawCircle>
		//draw yellow
		lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y,
 8002aee:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <control_traffic_light+0x174>)
 8002af0:	8a9b      	ldrh	r3, [r3, #20]
 8002af2:	4618      	mov	r0, r3
 8002af4:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <control_traffic_light+0x174>)
 8002af6:	8adb      	ldrh	r3, [r3, #22]
 8002af8:	4619      	mov	r1, r3
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <control_traffic_light+0x174>)
 8002afc:	8b1a      	ldrh	r2, [r3, #24]
				traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius, 1);
 8002afe:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <control_traffic_light+0x174>)
 8002b00:	8b5b      	ldrh	r3, [r3, #26]
		lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y,
 8002b02:	461c      	mov	r4, r3
 8002b04:	2301      	movs	r3, #1
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4623      	mov	r3, r4
 8002b0a:	f7ff fc54 	bl	80023b6 <lcd_DrawCircle>
		//draw green
		lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y,
 8002b0e:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <control_traffic_light+0x174>)
 8002b10:	8bdb      	ldrh	r3, [r3, #30]
 8002b12:	4618      	mov	r0, r3
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <control_traffic_light+0x174>)
 8002b16:	8c1b      	ldrh	r3, [r3, #32]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4b30      	ldr	r3, [pc, #192]	; (8002bdc <control_traffic_light+0x174>)
 8002b1c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
				traffic_WE.green.COLOR_FILL, traffic_WE.green.radius, 1);
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <control_traffic_light+0x174>)
 8002b20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y,
 8002b22:	461c      	mov	r4, r3
 8002b24:	2301      	movs	r3, #1
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4623      	mov	r3, r4
 8002b2a:	f7ff fc44 	bl	80023b6 <lcd_DrawCircle>
				traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
		//draw green
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
				traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
	}
}
 8002b2e:	e050      	b.n	8002bd2 <control_traffic_light+0x16a>
		if (!red) {
 8002b30:	79bb      	ldrb	r3, [r7, #6]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <control_traffic_light+0xd6>
			traffic_NS.red.COLOR_FILL = BLACK;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <control_traffic_light+0x178>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	81da      	strh	r2, [r3, #14]
 8002b3c:	e003      	b.n	8002b46 <control_traffic_light+0xde>
			traffic_NS.red.COLOR_FILL = RED;
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <control_traffic_light+0x178>)
 8002b40:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b44:	81da      	strh	r2, [r3, #14]
		if (!yellow) {
 8002b46:	797b      	ldrb	r3, [r7, #5]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <control_traffic_light+0xec>
			traffic_NS.yellow.COLOR_FILL = BLACK;
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <control_traffic_light+0x178>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	831a      	strh	r2, [r3, #24]
 8002b52:	e003      	b.n	8002b5c <control_traffic_light+0xf4>
			traffic_NS.yellow.COLOR_FILL = YELLOW;
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <control_traffic_light+0x178>)
 8002b56:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b5a:	831a      	strh	r2, [r3, #24]
		if (!green) {
 8002b5c:	793b      	ldrb	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <control_traffic_light+0x102>
			traffic_NS.green.COLOR_FILL = BLACK;
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <control_traffic_light+0x178>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	845a      	strh	r2, [r3, #34]	; 0x22
 8002b68:	e003      	b.n	8002b72 <control_traffic_light+0x10a>
			traffic_NS.green.COLOR_FILL = GREEN;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <control_traffic_light+0x178>)
 8002b6c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b70:	845a      	strh	r2, [r3, #34]	; 0x22
		lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y,
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <control_traffic_light+0x178>)
 8002b74:	895b      	ldrh	r3, [r3, #10]
 8002b76:	4618      	mov	r0, r3
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <control_traffic_light+0x178>)
 8002b7a:	899b      	ldrh	r3, [r3, #12]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <control_traffic_light+0x178>)
 8002b80:	89da      	ldrh	r2, [r3, #14]
				traffic_NS.red.COLOR_FILL, traffic_NS.red.radius, 1);
 8002b82:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <control_traffic_light+0x178>)
 8002b84:	8a1b      	ldrh	r3, [r3, #16]
		lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y,
 8002b86:	461c      	mov	r4, r3
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	f7ff fc12 	bl	80023b6 <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y,
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <control_traffic_light+0x178>)
 8002b94:	8a9b      	ldrh	r3, [r3, #20]
 8002b96:	4618      	mov	r0, r3
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <control_traffic_light+0x178>)
 8002b9a:	8adb      	ldrh	r3, [r3, #22]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <control_traffic_light+0x178>)
 8002ba0:	8b1a      	ldrh	r2, [r3, #24]
				traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <control_traffic_light+0x178>)
 8002ba4:	8b5b      	ldrh	r3, [r3, #26]
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y,
 8002ba6:	461c      	mov	r4, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4623      	mov	r3, r4
 8002bae:	f7ff fc02 	bl	80023b6 <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <control_traffic_light+0x178>)
 8002bb4:	8bdb      	ldrh	r3, [r3, #30]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <control_traffic_light+0x178>)
 8002bba:	8c1b      	ldrh	r3, [r3, #32]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <control_traffic_light+0x178>)
 8002bc0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
				traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <control_traffic_light+0x178>)
 8002bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y,
 8002bc6:	461c      	mov	r4, r3
 8002bc8:	2301      	movs	r3, #1
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4623      	mov	r3, r4
 8002bce:	f7ff fbf2 	bl	80023b6 <lcd_DrawCircle>
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000140 	.word	0x20000140
 8002be0:	20000108 	.word	0x20000108

08002be4 <update_led_buf>:
/*
 * @brief: 	update traffic light time value and show mode function
 * @para:	val1 is value of WE time, val2 is value of NS time
 * 			mode is mode of traffic system described in the request
 * @retval:	none*/
void update_led_buf(unsigned val1, unsigned val2, unsigned mode) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af04      	add	r7, sp, #16
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
	if (mode == 4 || mode == 3 || mode == 2) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d005      	beq.n	8002c02 <update_led_buf+0x1e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d002      	beq.n	8002c02 <update_led_buf+0x1e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d110      	bne.n	8002c24 <update_led_buf+0x40>
		lcd_ShowIntNum(140, 280, mode, 1, RED, GRAY, 32);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	2320      	movs	r3, #32
 8002c08:	9302      	str	r3, [sp, #8]
 8002c0a:	f248 4330 	movw	r3, #33840	; 0x8430
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2301      	movs	r3, #1
 8002c18:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002c1c:	208c      	movs	r0, #140	; 0x8c
 8002c1e:	f7ff f93d 	bl	8001e9c <lcd_ShowIntNum>
 8002c22:	e00f      	b.n	8002c44 <update_led_buf+0x60>
	} else {
		lcd_ShowIntNum(140, 280, mode, 1, RED, GRAY, 32);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	2320      	movs	r3, #32
 8002c2a:	9302      	str	r3, [sp, #8]
 8002c2c:	f248 4330 	movw	r3, #33840	; 0x8430
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002c3e:	208c      	movs	r0, #140	; 0x8c
 8002c40:	f7ff f92c 	bl	8001e9c <lcd_ShowIntNum>
	}
	traffic_WE.num.num = val1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <update_led_buf+0x78>)
 8002c4a:	859a      	strh	r2, [r3, #44]	; 0x2c
	traffic_NS.num.num = val2;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <update_led_buf+0x7c>)
 8002c52:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000140 	.word	0x20000140
 8002c60:	20000108 	.word	0x20000108

08002c64 <LCD_DisplayNum>:

/*
 * @brief: 	display number function
 * @para:	noe
 * @retval:	none*/
void LCD_DisplayNum() {
 8002c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af04      	add	r7, sp, #16
	lcd_ShowStr(60, 280, "MODE:", RED, GRAY, 32, 0);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2320      	movs	r3, #32
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	f248 4330 	movw	r3, #33840	; 0x8430
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <LCD_DisplayNum+0xa8>)
 8002c7e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002c82:	203c      	movs	r0, #60	; 0x3c
 8002c84:	f7ff fc04 	bl	8002490 <lcd_ShowStr>
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num,
 8002c88:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002c8a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002c8e:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002c92:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002c96:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002c9c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002ca0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <LCD_DisplayNum+0xac>)
 8002ca4:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002ca8:	9102      	str	r1, [sp, #8]
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4633      	mov	r3, r6
 8002cb0:	462a      	mov	r2, r5
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	f7ff f8f2 	bl	8001e9c <lcd_ShowIntNum>
			traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc,
			traffic_WE.num.sizey);
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num,
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cba:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002cbc:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cbe:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cc2:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cc6:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002ccc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002cce:	4a11      	ldr	r2, [pc, #68]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cd0:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002cd2:	4910      	ldr	r1, [pc, #64]	; (8002d14 <LCD_DisplayNum+0xb0>)
 8002cd4:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002cd8:	9102      	str	r1, [sp, #8]
 8002cda:	9201      	str	r2, [sp, #4]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4633      	mov	r3, r6
 8002ce0:	462a      	mov	r2, r5
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	f7ff f8da 	bl	8001e9c <lcd_ShowIntNum>
			traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc,
			traffic_NS.num.sizey);

	// other graphic
	lcd_ShowStr(50, 20, "TRAFFIC LIGHT", BLACK, WHITE, 24, 1);
 8002ce8:	2301      	movs	r3, #1
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	2318      	movs	r3, #24
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <LCD_DisplayNum+0xb4>)
 8002cfa:	2114      	movs	r1, #20
 8002cfc:	2032      	movs	r0, #50	; 0x32
 8002cfe:	f7ff fbc7 	bl	8002490 <lcd_ShowStr>
}
 8002d02:	bf00      	nop
 8002d04:	3704      	adds	r7, #4
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08005650 	.word	0x08005650
 8002d10:	20000140 	.word	0x20000140
 8002d14:	20000108 	.word	0x20000108
 8002d18:	08005658 	.word	0x08005658

08002d1c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d20:	f000 fab6 	bl	8003290 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002d24:	f000 f81a 	bl	8002d5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d28:	f7fe fd1c 	bl	8001764 <MX_GPIO_Init>
	MX_TIM2_Init();
 8002d2c:	f000 fa14 	bl	8003158 <MX_TIM2_Init>
	MX_SPI1_Init();
 8002d30:	f000 f926 	bl	8002f80 <MX_SPI1_Init>
	MX_FSMC_Init();
 8002d34:	f7fe fc46 	bl	80015c4 <MX_FSMC_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8002d38:	f000 f87a 	bl	8002e30 <system_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if (!flag_timer(2))
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f000 f909 	bl	8002f54 <flag_timer>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <main+0x38>
		{
			set_timer(2, READ_BUTTON_TIME);
 8002d48:	210a      	movs	r1, #10
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f000 f89a 	bl	8002e84 <set_timer>
			button_Scan();
 8002d50:	f7fd ffb0 	bl	8000cb4 <button_Scan>
		}

		traffic_run();
 8002d54:	f7fe fae6 	bl	8001324 <traffic_run>
		if (!flag_timer(2))
 8002d58:	e7f0      	b.n	8002d3c <main+0x20>
	...

08002d5c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b094      	sub	sp, #80	; 0x50
 8002d60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d62:	f107 0320 	add.w	r3, r7, #32
 8002d66:	2230      	movs	r2, #48	; 0x30
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 fc54 	bl	8005618 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <SystemClock_Config+0xcc>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <SystemClock_Config+0xcc>)
 8002d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <SystemClock_Config+0xcc>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <SystemClock_Config+0xd0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <SystemClock_Config+0xd0>)
 8002da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <SystemClock_Config+0xd0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002db8:	2302      	movs	r3, #2
 8002dba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002dcc:	2308      	movs	r3, #8
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002dd0:	23a8      	movs	r3, #168	; 0xa8
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ddc:	f107 0320 	add.w	r3, r7, #32
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fdb3 	bl	800394c <HAL_RCC_OscConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002dec:	f000 f83b 	bl	8002e66 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002df0:	230f      	movs	r3, #15
 8002df2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002df4:	2302      	movs	r3, #2
 8002df6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e00:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002e02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e06:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	2105      	movs	r1, #5
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f001 f814 	bl	8003e3c <HAL_RCC_ClockConfig>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8002e1a:	f000 f824 	bl	8002e66 <Error_Handler>
	}
}
 8002e1e:	bf00      	nop
 8002e20:	3750      	adds	r7, #80	; 0x50
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40007000 	.word	0x40007000

08002e30 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	timer_init();
 8002e34:	f000 f81c 	bl	8002e70 <timer_init>
	led7_init();
 8002e38:	f7ff fb8e 	bl	8002558 <led7_init>
	button_init();
 8002e3c:	f7fd ff2e 	bl	8000c9c <button_init>
	lcd_init();
 8002e40:	f7ff f8ce 	bl	8001fe0 <lcd_init>

	set_timer(2, READ_BUTTON_TIME);
 8002e44:	210a      	movs	r1, #10
 8002e46:	2002      	movs	r0, #2
 8002e48:	f000 f81c 	bl	8002e84 <set_timer>
	set_timer(1, ONE_SECOND);
 8002e4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e50:	2001      	movs	r0, #1
 8002e52:	f000 f817 	bl	8002e84 <set_timer>
	lcd_Clear(WHITE);
 8002e56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e5a:	f7fe fdf9 	bl	8001a50 <lcd_Clear>

	init_traffic_light();
 8002e5e:	f7ff fb87 	bl	8002570 <init_traffic_light>
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6a:	b672      	cpsid	i
}
 8002e6c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e6e:	e7fe      	b.n	8002e6e <Error_Handler+0x8>

08002e70 <timer_init>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <timer_init+0x10>)
 8002e76:	f001 fea9 	bl	8004bcc <HAL_TIM_Base_Start_IT>
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200001f8 	.word	0x200001f8

08002e84 <set_timer>:
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fad7 	bl	800044c <__aeabi_ui2d>
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <set_timer+0x50>)
 8002ea4:	f7fd fc76 	bl	8000794 <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fd58 	bl	8000964 <__aeabi_d2uiz>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <set_timer+0x54>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <set_timer+0x54>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	408f4000 	.word	0x408f4000
 8002ed8:	20000178 	.word	0x20000178

08002edc <HAL_TIM_PeriodElapsedCallback>:
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	f000 f804 	bl	8002ef0 <run_timer>
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <run_timer>:
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	e01f      	b.n	8002f3c <run_timer+0x4c>
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <run_timer+0x60>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d016      	beq.n	8002f36 <run_timer+0x46>
 8002f08:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <run_timer+0x60>)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <run_timer+0x60>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	4a0c      	ldr	r2, [pc, #48]	; (8002f50 <run_timer+0x60>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <run_timer+0x46>
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <run_timer+0x60>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2100      	movs	r1, #0
 8002f32:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d9dc      	bls.n	8002efc <run_timer+0xc>
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	20000178 	.word	0x20000178

08002f54 <flag_timer>:
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <flag_timer+0x28>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000178 	.word	0x20000178

08002f80 <MX_SPI1_Init>:
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <MX_SPI1_Init+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	615a      	str	r2, [r3, #20]
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb0:	619a      	str	r2, [r3, #24]
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	621a      	str	r2, [r3, #32]
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fcc:	220a      	movs	r2, #10
 8002fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fd0:	4804      	ldr	r0, [pc, #16]	; (8002fe4 <MX_SPI1_Init+0x64>)
 8002fd2:	f001 f8fb 	bl	80041cc <HAL_SPI_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_SPI1_Init+0x60>
 8002fdc:	f7ff ff43 	bl	8002e66 <Error_Handler>
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200001a0 	.word	0x200001a0
 8002fe8:	40013000 	.word	0x40013000

08002fec <HAL_SPI_MspInit>:
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_SPI_MspInit+0x84>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d12b      	bne.n	8003066 <HAL_SPI_MspInit+0x7a>
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_SPI_MspInit+0x88>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <HAL_SPI_MspInit+0x88>)
 8003018:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_SPI_MspInit+0x88>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_SPI_MspInit+0x88>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_SPI_MspInit+0x88>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_SPI_MspInit+0x88>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2338      	movs	r3, #56	; 0x38
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	2302      	movs	r3, #2
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	2303      	movs	r3, #3
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	2305      	movs	r3, #5
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	4805      	ldr	r0, [pc, #20]	; (8003078 <HAL_SPI_MspInit+0x8c>)
 8003062:	f000 fabd 	bl	80035e0 <HAL_GPIO_Init>
 8003066:	bf00      	nop
 8003068:	3728      	adds	r7, #40	; 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40013000 	.word	0x40013000
 8003074:	40023800 	.word	0x40023800
 8003078:	40020400 	.word	0x40020400

0800307c <HAL_MspInit>:
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_MspInit+0x4c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_MspInit+0x4c>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_MspInit+0x4c>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <HAL_MspInit+0x4c>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_MspInit+0x4c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800

080030cc <NMI_Handler>:
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	e7fe      	b.n	80030d0 <NMI_Handler+0x4>

080030d2 <HardFault_Handler>:
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	e7fe      	b.n	80030d6 <HardFault_Handler+0x4>

080030d8 <MemManage_Handler>:
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler+0x4>

080030de <BusFault_Handler>:
 80030de:	b480      	push	{r7}
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	e7fe      	b.n	80030e2 <BusFault_Handler+0x4>

080030e4 <UsageFault_Handler>:
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	e7fe      	b.n	80030e8 <UsageFault_Handler+0x4>

080030ea <SVC_Handler>:
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DebugMon_Handler>:
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <PendSV_Handler>:
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <SysTick_Handler>:
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
 8003118:	f000 f90c 	bl	8003334 <HAL_IncTick>
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}

08003120 <TIM2_IRQHandler>:
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <TIM2_IRQHandler+0x10>)
 8003126:	f001 fdc1 	bl	8004cac <HAL_TIM_IRQHandler>
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200001f8 	.word	0x200001f8

08003134 <SystemInit>:
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <SystemInit+0x20>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <SystemInit+0x20>)
 8003140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <MX_TIM2_Init>:
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	463b      	mov	r3, r7
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <MX_TIM2_Init+0x94>)
 8003176:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <MX_TIM2_Init+0x94>)
 800317e:	f240 3247 	movw	r2, #839	; 0x347
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <MX_TIM2_Init+0x94>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_TIM2_Init+0x94>)
 800318c:	2263      	movs	r2, #99	; 0x63
 800318e:	60da      	str	r2, [r3, #12]
 8003190:	4b16      	ldr	r3, [pc, #88]	; (80031ec <MX_TIM2_Init+0x94>)
 8003192:	2200      	movs	r2, #0
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <MX_TIM2_Init+0x94>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
 800319c:	4813      	ldr	r0, [pc, #76]	; (80031ec <MX_TIM2_Init+0x94>)
 800319e:	f001 fcc5 	bl	8004b2c <HAL_TIM_Base_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM2_Init+0x54>
 80031a8:	f7ff fe5d 	bl	8002e66 <Error_Handler>
 80031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	4619      	mov	r1, r3
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <MX_TIM2_Init+0x94>)
 80031ba:	f001 fe7f 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <MX_TIM2_Init+0x70>
 80031c4:	f7ff fe4f 	bl	8002e66 <Error_Handler>
 80031c8:	2300      	movs	r3, #0
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	463b      	mov	r3, r7
 80031d2:	4619      	mov	r1, r3
 80031d4:	4805      	ldr	r0, [pc, #20]	; (80031ec <MX_TIM2_Init+0x94>)
 80031d6:	f002 f89b 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM2_Init+0x8c>
 80031e0:	f7ff fe41 	bl	8002e66 <Error_Handler>
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	200001f8 	.word	0x200001f8

080031f0 <HAL_TIM_Base_MspInit>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d115      	bne.n	800322e <HAL_TIM_Base_MspInit+0x3e>
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_TIM_Base_MspInit+0x48>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <HAL_TIM_Base_MspInit+0x48>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_TIM_Base_MspInit+0x48>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	2100      	movs	r1, #0
 8003222:	201c      	movs	r0, #28
 8003224:	f000 f9a5 	bl	8003572 <HAL_NVIC_SetPriority>
 8003228:	201c      	movs	r0, #28
 800322a:	f000 f9be 	bl	80035aa <HAL_NVIC_EnableIRQ>
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800

0800323c <Reset_Handler>:
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003274 <LoopFillZerobss+0x12>
 8003240:	480d      	ldr	r0, [pc, #52]	; (8003278 <LoopFillZerobss+0x16>)
 8003242:	490e      	ldr	r1, [pc, #56]	; (800327c <LoopFillZerobss+0x1a>)
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <LoopFillZerobss+0x1e>)
 8003246:	2300      	movs	r3, #0
 8003248:	e002      	b.n	8003250 <LoopCopyDataInit>

0800324a <CopyDataInit>:
 800324a:	58d4      	ldr	r4, [r2, r3]
 800324c:	50c4      	str	r4, [r0, r3]
 800324e:	3304      	adds	r3, #4

08003250 <LoopCopyDataInit>:
 8003250:	18c4      	adds	r4, r0, r3
 8003252:	428c      	cmp	r4, r1
 8003254:	d3f9      	bcc.n	800324a <CopyDataInit>
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <LoopFillZerobss+0x22>)
 8003258:	4c0b      	ldr	r4, [pc, #44]	; (8003288 <LoopFillZerobss+0x26>)
 800325a:	2300      	movs	r3, #0
 800325c:	e001      	b.n	8003262 <LoopFillZerobss>

0800325e <FillZerobss>:
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	3204      	adds	r2, #4

08003262 <LoopFillZerobss>:
 8003262:	42a2      	cmp	r2, r4
 8003264:	d3fb      	bcc.n	800325e <FillZerobss>
 8003266:	f7ff ff65 	bl	8003134 <SystemInit>
 800326a:	f002 f9b1 	bl	80055d0 <__libc_init_array>
 800326e:	f7ff fd55 	bl	8002d1c <main>
 8003272:	4770      	bx	lr
 8003274:	20020000 	.word	0x20020000
 8003278:	20000000 	.word	0x20000000
 800327c:	20000030 	.word	0x20000030
 8003280:	08008608 	.word	0x08008608
 8003284:	20000030 	.word	0x20000030
 8003288:	20000244 	.word	0x20000244

0800328c <ADC_IRQHandler>:
 800328c:	e7fe      	b.n	800328c <ADC_IRQHandler>
	...

08003290 <HAL_Init>:
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_Init+0x40>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_Init+0x40>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <HAL_Init+0x40>)
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_Init+0x40>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	2003      	movs	r0, #3
 80032ba:	f000 f94f 	bl	800355c <HAL_NVIC_SetPriorityGrouping>
 80032be:	200f      	movs	r0, #15
 80032c0:	f000 f808 	bl	80032d4 <HAL_InitTick>
 80032c4:	f7ff feda 	bl	800307c <HAL_MspInit>
 80032c8:	2300      	movs	r3, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00

080032d4 <HAL_InitTick>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_InitTick+0x54>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_InitTick+0x58>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	4619      	mov	r1, r3
 80032e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f967 	bl	80035c6 <HAL_SYSTICK_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_InitTick+0x2e>
 80032fe:	2301      	movs	r3, #1
 8003300:	e00e      	b.n	8003320 <HAL_InitTick+0x4c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d80a      	bhi.n	800331e <HAL_InitTick+0x4a>
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	f000 f92f 	bl	8003572 <HAL_NVIC_SetPriority>
 8003314:	4a06      	ldr	r2, [pc, #24]	; (8003330 <HAL_InitTick+0x5c>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	e000      	b.n	8003320 <HAL_InitTick+0x4c>
 800331e:	2301      	movs	r3, #1
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	20000024 	.word	0x20000024
 800332c:	2000002c 	.word	0x2000002c
 8003330:	20000028 	.word	0x20000028

08003334 <HAL_IncTick>:
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_IncTick+0x20>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x24>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4413      	add	r3, r2
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_IncTick+0x24>)
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	2000002c 	.word	0x2000002c
 8003358:	20000240 	.word	0x20000240

0800335c <HAL_GetTick>:
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_GetTick+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000240 	.word	0x20000240

08003374 <HAL_Delay>:
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	f7ff ffee 	bl	800335c <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	bf00      	nop
 800339c:	f7ff ffde 	bl	800335c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000002c 	.word	0x2000002c

080033bc <__NVIC_SetPriorityGrouping>:
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <__NVIC_EnableIRQ+0x38>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000e100 	.word	0xe000e100

0800345c <__NVIC_SetPriority>:
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	6039      	str	r1, [r7, #0]
 8003466:	71fb      	strb	r3, [r7, #7]
 8003468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	db0a      	blt.n	8003486 <__NVIC_SetPriority+0x2a>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	490c      	ldr	r1, [pc, #48]	; (80034a8 <__NVIC_SetPriority+0x4c>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	440b      	add	r3, r1
 8003480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003484:	e00a      	b.n	800349c <__NVIC_SetPriority+0x40>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <__NVIC_SetPriority+0x50>)
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3b04      	subs	r3, #4
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	440b      	add	r3, r1
 800349a:	761a      	strb	r2, [r3, #24]
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000e100 	.word	0xe000e100
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EncodePriority>:
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f1c3 0307 	rsb	r3, r3, #7
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	bf28      	it	cs
 80034ce:	2304      	movcs	r3, #4
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3304      	adds	r3, #4
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d902      	bls.n	80034e0 <NVIC_EncodePriority+0x30>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3b03      	subs	r3, #3
 80034de:	e000      	b.n	80034e2 <NVIC_EncodePriority+0x32>
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	401a      	ands	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	409a      	lsls	r2, r3
 80034f8:	f04f 31ff 	mov.w	r1, #4294967295
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43d9      	mvns	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	400b      	ands	r3, r1
 8003508:	4313      	orrs	r3, r2
 800350a:	4618      	mov	r0, r3
 800350c:	3724      	adds	r7, #36	; 0x24
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <SysTick_Config>:
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003528:	d301      	bcc.n	800352e <SysTick_Config+0x16>
 800352a:	2301      	movs	r3, #1
 800352c:	e00f      	b.n	800354e <SysTick_Config+0x36>
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <SysTick_Config+0x40>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3b01      	subs	r3, #1
 8003534:	6053      	str	r3, [r2, #4]
 8003536:	210f      	movs	r1, #15
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f7ff ff8e 	bl	800345c <__NVIC_SetPriority>
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SysTick_Config+0x40>)
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <SysTick_Config+0x40>)
 8003548:	2207      	movs	r2, #7
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	2300      	movs	r3, #0
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	e000e010 	.word	0xe000e010

0800355c <HAL_NVIC_SetPriorityGrouping>:
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff29 	bl	80033bc <__NVIC_SetPriorityGrouping>
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_SetPriority>:
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	f7ff ff3e 	bl	8003404 <__NVIC_GetPriorityGrouping>
 8003588:	6178      	str	r0, [r7, #20]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	6978      	ldr	r0, [r7, #20]
 8003590:	f7ff ff8e 	bl	80034b0 <NVIC_EncodePriority>
 8003594:	4602      	mov	r2, r0
 8003596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5d 	bl	800345c <__NVIC_SetPriority>
 80035a2:	bf00      	nop
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_EnableIRQ>:
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff31 	bl	8003420 <__NVIC_EnableIRQ>
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_SYSTICK_Config>:
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff ffa2 	bl	8003518 <SysTick_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_GPIO_Init>:
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	2300      	movs	r3, #0
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e16b      	b.n	80038d4 <HAL_GPIO_Init+0x2f4>
 80035fc:	2201      	movs	r2, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	f040 815a 	bne.w	80038ce <HAL_GPIO_Init+0x2ee>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b01      	cmp	r3, #1
 8003624:	d005      	beq.n	8003632 <HAL_GPIO_Init+0x52>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d130      	bne.n	8003694 <HAL_GPIO_Init+0xb4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	2203      	movs	r2, #3
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 0201 	and.w	r2, r3, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b03      	cmp	r3, #3
 800369e:	d017      	beq.n	80036d0 <HAL_GPIO_Init+0xf0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	2203      	movs	r2, #3
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	60da      	str	r2, [r3, #12]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d123      	bne.n	8003724 <HAL_GPIO_Init+0x144>
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	220f      	movs	r2, #15
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	08da      	lsrs	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3208      	adds	r2, #8
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80b4 	beq.w	80038ce <HAL_GPIO_Init+0x2ee>
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b60      	ldr	r3, [pc, #384]	; (80038ec <HAL_GPIO_Init+0x30c>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a5f      	ldr	r2, [pc, #380]	; (80038ec <HAL_GPIO_Init+0x30c>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <HAL_GPIO_Init+0x30c>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_GPIO_Init+0x310>)
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a52      	ldr	r2, [pc, #328]	; (80038f4 <HAL_GPIO_Init+0x314>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02b      	beq.n	8003806 <HAL_GPIO_Init+0x226>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_GPIO_Init+0x318>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d025      	beq.n	8003802 <HAL_GPIO_Init+0x222>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a50      	ldr	r2, [pc, #320]	; (80038fc <HAL_GPIO_Init+0x31c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01f      	beq.n	80037fe <HAL_GPIO_Init+0x21e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <HAL_GPIO_Init+0x320>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x21a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a4e      	ldr	r2, [pc, #312]	; (8003904 <HAL_GPIO_Init+0x324>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x216>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a4d      	ldr	r2, [pc, #308]	; (8003908 <HAL_GPIO_Init+0x328>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x212>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	; (800390c <HAL_GPIO_Init+0x32c>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x20e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_GPIO_Init+0x330>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x20a>
 80037e6:	2307      	movs	r3, #7
 80037e8:	e00e      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037ea:	2308      	movs	r3, #8
 80037ec:	e00c      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037ee:	2306      	movs	r3, #6
 80037f0:	e00a      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037f2:	2305      	movs	r3, #5
 80037f4:	e008      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037f6:	2304      	movs	r3, #4
 80037f8:	e006      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037fa:	2303      	movs	r3, #3
 80037fc:	e004      	b.n	8003808 <HAL_GPIO_Init+0x228>
 80037fe:	2302      	movs	r3, #2
 8003800:	e002      	b.n	8003808 <HAL_GPIO_Init+0x228>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x228>
 8003806:	2300      	movs	r3, #0
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f002 0203 	and.w	r2, r2, #3
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	4093      	lsls	r3, r2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	4935      	ldr	r1, [pc, #212]	; (80038f0 <HAL_GPIO_Init+0x310>)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3302      	adds	r3, #2
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_GPIO_Init+0x334>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x26a>
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_GPIO_Init+0x334>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b30      	ldr	r3, [pc, #192]	; (8003914 <HAL_GPIO_Init+0x334>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x294>
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_GPIO_Init+0x334>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	6053      	str	r3, [r2, #4]
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_GPIO_Init+0x334>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	43db      	mvns	r3, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4013      	ands	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2be>
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_GPIO_Init+0x334>)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	6093      	str	r3, [r2, #8]
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_GPIO_Init+0x334>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	43db      	mvns	r3, r3
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	4013      	ands	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x2e8>
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	4a12      	ldr	r2, [pc, #72]	; (8003914 <HAL_GPIO_Init+0x334>)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	60d3      	str	r3, [r2, #12]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3301      	adds	r3, #1
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	f67f ae90 	bls.w	80035fc <HAL_GPIO_Init+0x1c>
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40013800 	.word	0x40013800
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020400 	.word	0x40020400
 80038fc:	40020800 	.word	0x40020800
 8003900:	40020c00 	.word	0x40020c00
 8003904:	40021000 	.word	0x40021000
 8003908:	40021400 	.word	0x40021400
 800390c:	40021800 	.word	0x40021800
 8003910:	40021c00 	.word	0x40021c00
 8003914:	40013c00 	.word	0x40013c00

08003918 <HAL_GPIO_WritePin>:
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	619a      	str	r2, [r3, #24]
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_RCC_OscConfig>:
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
 800395a:	2301      	movs	r3, #1
 800395c:	e264      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d075      	beq.n	8003a56 <HAL_RCC_OscConfig+0x10a>
 800396a:	4ba3      	ldr	r3, [pc, #652]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00c      	beq.n	8003990 <HAL_RCC_OscConfig+0x44>
 8003976:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d112      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
 8003982:	4b9d      	ldr	r3, [pc, #628]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398e:	d10b      	bne.n	80039a8 <HAL_RCC_OscConfig+0x5c>
 8003990:	4b99      	ldr	r3, [pc, #612]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d05b      	beq.n	8003a54 <HAL_RCC_OscConfig+0x108>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d157      	bne.n	8003a54 <HAL_RCC_OscConfig+0x108>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e23f      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x74>
 80039b2:	4b91      	ldr	r3, [pc, #580]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a90      	ldr	r2, [pc, #576]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e01d      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCC_OscConfig+0x98>
 80039ca:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a8a      	ldr	r2, [pc, #552]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a87      	ldr	r2, [pc, #540]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	e00b      	b.n	80039fc <HAL_RCC_OscConfig+0xb0>
 80039e4:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a83      	ldr	r2, [pc, #524]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a80      	ldr	r2, [pc, #512]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 80039f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe0>
 8003a04:	f7ff fcaa 	bl	800335c <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0xd2>
 8003a0c:	f7ff fca6 	bl	800335c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b64      	cmp	r3, #100	; 0x64
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0xd2>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e204      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003a1e:	4b76      	ldr	r3, [pc, #472]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0xc0>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
 8003a2c:	f7ff fc96 	bl	800335c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0xfa>
 8003a34:	f7ff fc92 	bl	800335c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0xfa>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e1f0      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003a46:	4b6c      	ldr	r3, [pc, #432]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0xe8>
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x10a>
 8003a54:	bf00      	nop
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d063      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1de>
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_RCC_OscConfig+0x13a>
 8003a6e:	4b62      	ldr	r3, [pc, #392]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d11c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d116      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x168>
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x152>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e1c4      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003a9e:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4952      	ldr	r1, [pc, #328]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
 8003ab2:	e03a      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d020      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b2>
 8003abc:	4b4f      	ldr	r3, [pc, #316]	; (8003bfc <HAL_RCC_OscConfig+0x2b0>)
 8003abe:	2201      	movs	r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f7ff fc4b 	bl	800335c <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x190>
 8003aca:	f7ff fc47 	bl	800335c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x190>
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1a5      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003adc:	4b46      	ldr	r3, [pc, #280]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
 8003ae8:	4b43      	ldr	r3, [pc, #268]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4940      	ldr	r1, [pc, #256]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
 8003afc:	e015      	b.n	8003b2a <HAL_RCC_OscConfig+0x1de>
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCC_OscConfig+0x2b0>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f7ff fc2a 	bl	800335c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
 8003b0c:	f7ff fc26 	bl	800335c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x1d2>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e184      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x1c0>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d030      	beq.n	8003b98 <HAL_RCC_OscConfig+0x24c>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_RCC_OscConfig+0x220>
 8003b3e:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_RCC_OscConfig+0x2b4>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f7ff fc0a 	bl	800335c <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
 8003b4c:	f7ff fc06 	bl	800335c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x212>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e164      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003b5e:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0x200>
 8003b6a:	e015      	b.n	8003b98 <HAL_RCC_OscConfig+0x24c>
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x2b4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f7ff fbf3 	bl	800335c <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x240>
 8003b7a:	f7ff fbef 	bl	800335c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x240>
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e14d      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x22e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a0 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x39a>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	75fb      	strb	r3, [r7, #23]
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10f      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x28a>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	75fb      	strb	r3, [r7, #23]
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d121      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2da>
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <HAL_RCC_OscConfig+0x2b8>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	f7ff fbb5 	bl	800335c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]
 8003bf4:	e011      	b.n	8003c1a <HAL_RCC_OscConfig+0x2ce>
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	42470000 	.word	0x42470000
 8003c00:	42470e80 	.word	0x42470e80
 8003c04:	40007000 	.word	0x40007000
 8003c08:	f7ff fba8 	bl	800335c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x2ce>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e106      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003c1a:	4b85      	ldr	r3, [pc, #532]	; (8003e30 <HAL_RCC_OscConfig+0x4e4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2bc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2f0>
 8003c2e:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a80      	ldr	r2, [pc, #512]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCC_OscConfig+0x32a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x312>
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a7a      	ldr	r2, [pc, #488]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a77      	ldr	r2, [pc, #476]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCC_OscConfig+0x32a>
 8003c5e:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a74      	ldr	r2, [pc, #464]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	4b72      	ldr	r3, [pc, #456]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a71      	ldr	r2, [pc, #452]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCC_OscConfig+0x35e>
 8003c7e:	f7ff fb6d 	bl	800335c <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x350>
 8003c86:	f7ff fb69 	bl	800335c <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x350>
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0c5      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003c9c:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCC_OscConfig+0x33a>
 8003ca8:	e014      	b.n	8003cd4 <HAL_RCC_OscConfig+0x388>
 8003caa:	f7ff fb57 	bl	800335c <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x37c>
 8003cb2:	f7ff fb53 	bl	800335c <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x37c>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0af      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003cc8:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x366>
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x39a>
 8003cda:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	4a55      	ldr	r2, [pc, #340]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 809b 	beq.w	8003e26 <HAL_RCC_OscConfig+0x4da>
 8003cf0:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d05c      	beq.n	8003db6 <HAL_RCC_OscConfig+0x46a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d141      	bne.n	8003d88 <HAL_RCC_OscConfig+0x43c>
 8003d04:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <HAL_RCC_OscConfig+0x4ec>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f7ff fb27 	bl	800335c <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x3d8>
 8003d12:	f7ff fb23 	bl	800335c <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x3d8>
 8003d20:	2303      	movs	r3, #3
 8003d22:	e081      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x3c6>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69da      	ldr	r2, [r3, #28]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	019b      	lsls	r3, r3, #6
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	4937      	ldr	r1, [pc, #220]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
 8003d5a:	4b37      	ldr	r3, [pc, #220]	; (8003e38 <HAL_RCC_OscConfig+0x4ec>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f7ff fafc 	bl	800335c <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x42e>
 8003d68:	f7ff faf8 	bl	800335c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x42e>
 8003d76:	2303      	movs	r3, #3
 8003d78:	e056      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x41c>
 8003d86:	e04e      	b.n	8003e26 <HAL_RCC_OscConfig+0x4da>
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_OscConfig+0x4ec>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	f7ff fae5 	bl	800335c <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x45c>
 8003d96:	f7ff fae1 	bl	800335c <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x45c>
 8003da4:	2303      	movs	r3, #3
 8003da6:	e03f      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003da8:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0x44a>
 8003db4:	e037      	b.n	8003e26 <HAL_RCC_OscConfig+0x4da>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x476>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e032      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_RCC_OscConfig+0x4e8>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d028      	beq.n	8003e22 <HAL_RCC_OscConfig+0x4d6>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4d6>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d11a      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4d6>
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003df8:	0192      	lsls	r2, r2, #6
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4d6>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_OscConfig+0x4d6>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x4da>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_RCC_OscConfig+0x4dc>
 8003e26:	2300      	movs	r3, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40007000 	.word	0x40007000
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470060 	.word	0x42470060

08003e3c <HAL_RCC_ClockConfig>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x14>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0cc      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003e50:	4b68      	ldr	r3, [pc, #416]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d90c      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
 8003e5e:	4b65      	ldr	r3, [pc, #404]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	4b63      	ldr	r3, [pc, #396]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x3c>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b8      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d020      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x8a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x60>
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x78>
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4a52      	ldr	r2, [pc, #328]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eb2:	6093      	str	r3, [r2, #8]
 8003eb4:	4b50      	ldr	r3, [pc, #320]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	494d      	ldr	r1, [pc, #308]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d044      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x120>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xae>
 8003eda:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d119      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e07f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d003      	beq.n	8003efa <HAL_RCC_ClockConfig+0xbe>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xce>
 8003efa:	4b3f      	ldr	r3, [pc, #252]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d109      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e06f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003f0a:	4b3b      	ldr	r3, [pc, #236]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_ClockConfig+0xde>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e067      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f023 0203 	bic.w	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4934      	ldr	r1, [pc, #208]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	608b      	str	r3, [r1, #8]
 8003f2c:	f7ff fa16 	bl	800335c <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
 8003f34:	f7ff fa12 	bl	800335c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x10e>
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04f      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003f4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 020c 	and.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d1eb      	bne.n	8003f34 <HAL_RCC_ClockConfig+0xf8>
 8003f5c:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d20c      	bcs.n	8003f84 <HAL_RCC_ClockConfig+0x148>
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
 8003f72:	4b20      	ldr	r3, [pc, #128]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x148>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e032      	b.n	8003fea <HAL_RCC_ClockConfig+0x1ae>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x166>
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4916      	ldr	r1, [pc, #88]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x186>
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
 8003fc2:	f000 f821 	bl	8004008 <HAL_RCC_GetSysClockFreq>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	490a      	ldr	r1, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	5ccb      	ldrb	r3, [r1, r3]
 8003fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff f976 	bl	80032d4 <HAL_InitTick>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023c00 	.word	0x40023c00
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	080085e8 	.word	0x080085e8
 8004000:	20000024 	.word	0x20000024
 8004004:	20000028 	.word	0x20000028

08004008 <HAL_RCC_GetSysClockFreq>:
 8004008:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	2300      	movs	r3, #0
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	2300      	movs	r3, #0
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	4b67      	ldr	r3, [pc, #412]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b08      	cmp	r3, #8
 800402a:	d00d      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x40>
 800402c:	2b08      	cmp	r3, #8
 800402e:	f200 80bd 	bhi.w	80041ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x34>
 8004036:	2b04      	cmp	r3, #4
 8004038:	d003      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x3a>
 800403a:	e0b7      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x1a4>
 800403c:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	e0b7      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1aa>
 8004042:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	e0b4      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1aa>
 8004048:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004050:	607b      	str	r3, [r7, #4]
 8004052:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04d      	beq.n	80040fa <HAL_RCC_GetSysClockFreq+0xf2>
 800405e:	4b58      	ldr	r3, [pc, #352]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	099b      	lsrs	r3, r3, #6
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	ea02 0800 	and.w	r8, r2, r0
 8004076:	ea03 0901 	and.w	r9, r3, r1
 800407a:	4640      	mov	r0, r8
 800407c:	4649      	mov	r1, r9
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	014b      	lsls	r3, r1, #5
 8004088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800408c:	0142      	lsls	r2, r0, #5
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	ebb0 0008 	subs.w	r0, r0, r8
 8004096:	eb61 0109 	sbc.w	r1, r1, r9
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	018b      	lsls	r3, r1, #6
 80040a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040a8:	0182      	lsls	r2, r0, #6
 80040aa:	1a12      	subs	r2, r2, r0
 80040ac:	eb63 0301 	sbc.w	r3, r3, r1
 80040b0:	f04f 0000 	mov.w	r0, #0
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	00d9      	lsls	r1, r3, #3
 80040ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040be:	00d0      	lsls	r0, r2, #3
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	eb12 0208 	adds.w	r2, r2, r8
 80040c8:	eb43 0309 	adc.w	r3, r3, r9
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	0259      	lsls	r1, r3, #9
 80040d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040da:	0250      	lsls	r0, r2, #9
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	f7fc fc5a 	bl	80009a4 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e04a      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x188>
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	099b      	lsrs	r3, r3, #6
 8004100:	461a      	mov	r2, r3
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	ea02 0400 	and.w	r4, r2, r0
 8004112:	ea03 0501 	and.w	r5, r3, r1
 8004116:	4620      	mov	r0, r4
 8004118:	4629      	mov	r1, r5
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	014b      	lsls	r3, r1, #5
 8004124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004128:	0142      	lsls	r2, r0, #5
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	1b00      	subs	r0, r0, r4
 8004130:	eb61 0105 	sbc.w	r1, r1, r5
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	018b      	lsls	r3, r1, #6
 800413e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004142:	0182      	lsls	r2, r0, #6
 8004144:	1a12      	subs	r2, r2, r0
 8004146:	eb63 0301 	sbc.w	r3, r3, r1
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	00d9      	lsls	r1, r3, #3
 8004154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004158:	00d0      	lsls	r0, r2, #3
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	1912      	adds	r2, r2, r4
 8004160:	eb45 0303 	adc.w	r3, r5, r3
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	0299      	lsls	r1, r3, #10
 800416e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004172:	0290      	lsls	r0, r2, #10
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	461a      	mov	r2, r3
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	f7fc fc0e 	bl	80009a4 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	3301      	adds	r3, #1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	e002      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0x1aa>
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	bf00      	nop
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_SPI_Init>:
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_SPI_Init+0x12>
 80041da:	2301      	movs	r3, #1
 80041dc:	e07b      	b.n	80042d6 <HAL_SPI_Init+0x10a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <HAL_SPI_Init+0x2c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d009      	beq.n	8004204 <HAL_SPI_Init+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	61da      	str	r2, [r3, #28]
 80041f6:	e005      	b.n	8004204 <HAL_SPI_Init+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	615a      	str	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_SPI_Init+0x58>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fe fee4 	bl	8002fec <HAL_SPI_MspInit>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	ea42 0103 	orr.w	r1, r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	f003 0104 	and.w	r1, r3, #4
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	f003 0210 	and.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c4:	61da      	str	r2, [r3, #28]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80042d4:	2300      	movs	r3, #0
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <HAL_SPI_Receive>:
 80042de:	b580      	push	{r7, lr}
 80042e0:	b088      	sub	sp, #32
 80042e2:	af02      	add	r7, sp, #8
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	603b      	str	r3, [r7, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042fa:	d112      	bne.n	8004322 <HAL_SPI_Receive+0x44>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10e      	bne.n	8004322 <HAL_SPI_Receive+0x44>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2204      	movs	r2, #4
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	4613      	mov	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f8f1 	bl	8004500 <HAL_SPI_TransmitReceive>
 800431e:	4603      	mov	r3, r0
 8004320:	e0ea      	b.n	80044f8 <HAL_SPI_Receive+0x21a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_SPI_Receive+0x52>
 800432c:	2302      	movs	r3, #2
 800432e:	e0e3      	b.n	80044f8 <HAL_SPI_Receive+0x21a>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004338:	f7ff f810 	bl	800335c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d002      	beq.n	8004350 <HAL_SPI_Receive+0x72>
 800434a:	2302      	movs	r3, #2
 800434c:	75fb      	strb	r3, [r7, #23]
 800434e:	e0ca      	b.n	80044e6 <HAL_SPI_Receive+0x208>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_SPI_Receive+0x7e>
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Receive+0x84>
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
 8004360:	e0c1      	b.n	80044e6 <HAL_SPI_Receive+0x208>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2204      	movs	r2, #4
 8004366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	869a      	strh	r2, [r3, #52]	; 0x34
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	86da      	strh	r2, [r3, #54]	; 0x36
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a8:	d10f      	bne.n	80043ca <HAL_SPI_Receive+0xec>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d007      	beq.n	80043e8 <HAL_SPI_Receive+0x10a>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d162      	bne.n	80044b6 <HAL_SPI_Receive+0x1d8>
 80043f0:	e02e      	b.n	8004450 <HAL_SPI_Receive+0x172>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d115      	bne.n	800442c <HAL_SPI_Receive+0x14e>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f103 020c 	add.w	r2, r3, #12
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800442a:	e011      	b.n	8004450 <HAL_SPI_Receive+0x172>
 800442c:	f7fe ff96 	bl	800335c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d803      	bhi.n	8004444 <HAL_SPI_Receive+0x166>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d102      	bne.n	800444a <HAL_SPI_Receive+0x16c>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_SPI_Receive+0x172>
 800444a:	2303      	movs	r3, #3
 800444c:	75fb      	strb	r3, [r7, #23]
 800444e:	e04a      	b.n	80044e6 <HAL_SPI_Receive+0x208>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1cb      	bne.n	80043f2 <HAL_SPI_Receive+0x114>
 800445a:	e031      	b.n	80044c0 <HAL_SPI_Receive+0x1e2>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d113      	bne.n	8004492 <HAL_SPI_Receive+0x1b4>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	b292      	uxth	r2, r2
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004490:	e011      	b.n	80044b6 <HAL_SPI_Receive+0x1d8>
 8004492:	f7fe ff63 	bl	800335c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d803      	bhi.n	80044aa <HAL_SPI_Receive+0x1cc>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <HAL_SPI_Receive+0x1d2>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Receive+0x1d8>
 80044b0:	2303      	movs	r3, #3
 80044b2:	75fb      	strb	r3, [r7, #23]
 80044b4:	e017      	b.n	80044e6 <HAL_SPI_Receive+0x208>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1cd      	bne.n	800445c <HAL_SPI_Receive+0x17e>
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fa45 	bl	8004954 <SPI_EndRxTransaction>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_SPI_Receive+0x1f8>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Receive+0x206>
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
 80044e2:	e000      	b.n	80044e6 <HAL_SPI_Receive+0x208>
 80044e4:	bf00      	nop
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	4618      	mov	r0, r3
 80044fa:	3718      	adds	r7, #24
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_SPI_TransmitReceive>:
 8004500:	b580      	push	{r7, lr}
 8004502:	b08c      	sub	sp, #48	; 0x30
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
 800450c:	807b      	strh	r3, [r7, #2]
 800450e:	2301      	movs	r3, #1
 8004510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004512:	2300      	movs	r3, #0
 8004514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x26>
 8004522:	2302      	movs	r3, #2
 8004524:	e18a      	b.n	800483c <HAL_SPI_TransmitReceive+0x33c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800452e:	f7fe ff15 	bl	800335c <HAL_GetTick>
 8004532:	6278      	str	r0, [r7, #36]	; 0x24
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	887b      	ldrh	r3, [r7, #2]
 8004546:	837b      	strh	r3, [r7, #26]
 8004548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800454c:	2b01      	cmp	r3, #1
 800454e:	d00f      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x70>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004556:	d107      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x68>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x68>
 8004560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004564:	2b04      	cmp	r3, #4
 8004566:	d003      	beq.n	8004570 <HAL_SPI_TransmitReceive+0x70>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800456e:	e15b      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_SPI_TransmitReceive+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_SPI_TransmitReceive+0x82>
 800457c:	887b      	ldrh	r3, [r7, #2]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_SPI_TransmitReceive+0x8a>
 8004582:	2301      	movs	r3, #1
 8004584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004588:	e14e      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b04      	cmp	r3, #4
 8004594:	d003      	beq.n	800459e <HAL_SPI_TransmitReceive+0x9e>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2205      	movs	r2, #5
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	887a      	ldrh	r2, [r7, #2]
 80045ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	879a      	strh	r2, [r3, #60]	; 0x3c
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	887a      	ldrh	r2, [r7, #2]
 80045c6:	869a      	strh	r2, [r3, #52]	; 0x34
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	645a      	str	r2, [r3, #68]	; 0x44
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d007      	beq.n	80045f2 <HAL_SPI_TransmitReceive+0xf2>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045fa:	d178      	bne.n	80046ee <HAL_SPI_TransmitReceive+0x1ee>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <HAL_SPI_TransmitReceive+0x10a>
 8004604:	8b7b      	ldrh	r3, [r7, #26]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d166      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x1d8>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	1c9a      	adds	r2, r3, #2
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	86da      	strh	r2, [r3, #54]	; 0x36
 800462e:	e053      	b.n	80046d8 <HAL_SPI_TransmitReceive+0x1d8>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d11b      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x176>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d016      	beq.n	8004676 <HAL_SPI_TransmitReceive+0x176>
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d113      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x176>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	86da      	strh	r2, [r3, #54]	; 0x36
 8004672:	2300      	movs	r3, #0
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b01      	cmp	r3, #1
 8004682:	d119      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x1b8>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d014      	beq.n	80046b8 <HAL_SPI_TransmitReceive+0x1b8>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	b292      	uxth	r2, r2
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046b4:	2301      	movs	r3, #1
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b8:	f7fe fe50 	bl	800335c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d807      	bhi.n	80046d8 <HAL_SPI_TransmitReceive+0x1d8>
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d003      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x1d8>
 80046d0:	2303      	movs	r3, #3
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d6:	e0a7      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1a6      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x130>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1a1      	bne.n	8004630 <HAL_SPI_TransmitReceive+0x130>
 80046ec:	e07c      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x2e8>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_SPI_TransmitReceive+0x1fc>
 80046f6:	8b7b      	ldrh	r3, [r7, #26]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d16b      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x2d4>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	7812      	ldrb	r2, [r2, #0]
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	86da      	strh	r2, [r3, #54]	; 0x36
 8004722:	e057      	b.n	80047d4 <HAL_SPI_TransmitReceive+0x2d4>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b02      	cmp	r3, #2
 8004730:	d11c      	bne.n	800476c <HAL_SPI_TransmitReceive+0x26c>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_SPI_TransmitReceive+0x26c>
 800473c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d114      	bne.n	800476c <HAL_SPI_TransmitReceive+0x26c>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	631a      	str	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	86da      	strh	r2, [r3, #54]	; 0x36
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d119      	bne.n	80047ae <HAL_SPI_TransmitReceive+0x2ae>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d014      	beq.n	80047ae <HAL_SPI_TransmitReceive+0x2ae>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047aa:	2301      	movs	r3, #1
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ae:	f7fe fdd5 	bl	800335c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d803      	bhi.n	80047c6 <HAL_SPI_TransmitReceive+0x2c6>
 80047be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x2cc>
 80047c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <HAL_SPI_TransmitReceive+0x2d4>
 80047cc:	2303      	movs	r3, #3
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d2:	e029      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1a2      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x224>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d19d      	bne.n	8004724 <HAL_SPI_TransmitReceive+0x224>
 80047e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f917 	bl	8004a20 <SPI_EndRxTxTransaction>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x306>
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
 8004804:	e010      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x326>
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	e000      	b.n	8004828 <HAL_SPI_TransmitReceive+0x328>
 8004826:	bf00      	nop
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004838:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	; 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <SPI_WaitFlagStateUntilTimeout>:
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	4613      	mov	r3, r2
 8004852:	71fb      	strb	r3, [r7, #7]
 8004854:	f7fe fd82 	bl	800335c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4413      	add	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	f7fe fd7a 	bl	800335c <HAL_GetTick>
 8004868:	61b8      	str	r0, [r7, #24]
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	015b      	lsls	r3, r3, #5
 8004870:	0d1b      	lsrs	r3, r3, #20
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e054      	b.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d050      	beq.n	8004926 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004884:	f7fe fd6a 	bl	800335c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d902      	bls.n	800489a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d13d      	bne.n	8004916 <SPI_WaitFlagStateUntilTimeout+0xd2>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d111      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d004      	beq.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x84>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c6:	d107      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d10f      	bne.n	8004902 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004912:	2303      	movs	r3, #3
 8004914:	e017      	b.n	8004946 <SPI_WaitFlagStateUntilTimeout+0x102>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <SPI_WaitFlagStateUntilTimeout+0xdc>
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3b01      	subs	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4013      	ands	r3, r2
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	461a      	mov	r2, r3
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	429a      	cmp	r2, r3
 8004942:	d19b      	bne.n	800487c <SPI_WaitFlagStateUntilTimeout+0x38>
 8004944:	2300      	movs	r3, #0
 8004946:	4618      	mov	r0, r3
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000024 	.word	0x20000024

08004954 <SPI_EndRxTransaction>:
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004968:	d111      	bne.n	800498e <SPI_EndRxTransaction+0x3a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004972:	d004      	beq.n	800497e <SPI_EndRxTransaction+0x2a>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d107      	bne.n	800498e <SPI_EndRxTransaction+0x3a>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004996:	d12a      	bne.n	80049ee <SPI_EndRxTransaction+0x9a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a0:	d012      	beq.n	80049c8 <SPI_EndRxTransaction+0x74>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ff49 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02d      	beq.n	8004a14 <SPI_EndRxTransaction+0xc0>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	f043 0220 	orr.w	r2, r3, #32
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	655a      	str	r2, [r3, #84]	; 0x54
 80049c4:	2303      	movs	r3, #3
 80049c6:	e026      	b.n	8004a16 <SPI_EndRxTransaction+0xc2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2101      	movs	r1, #1
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff36 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01a      	beq.n	8004a14 <SPI_EndRxTransaction+0xc0>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
 80049ea:	2303      	movs	r3, #3
 80049ec:	e013      	b.n	8004a16 <SPI_EndRxTransaction+0xc2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2101      	movs	r1, #1
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff23 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <SPI_EndRxTransaction+0xc0>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
 8004a10:	2303      	movs	r3, #3
 8004a12:	e000      	b.n	8004a16 <SPI_EndRxTransaction+0xc2>
 8004a14:	2300      	movs	r3, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
	...

08004a20 <SPI_EndRxTxTransaction>:
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <SPI_EndRxTxTransaction+0x7c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1b      	ldr	r2, [pc, #108]	; (8004aa0 <SPI_EndRxTxTransaction+0x80>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0d5b      	lsrs	r3, r3, #21
 8004a38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4a:	d112      	bne.n	8004a72 <SPI_EndRxTxTransaction+0x52>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff fef4 	bl	8004844 <SPI_WaitFlagStateUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <SPI_EndRxTxTransaction+0x70>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00f      	b.n	8004a92 <SPI_EndRxTxTransaction+0x72>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <SPI_EndRxTxTransaction+0x6e>
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d0f2      	beq.n	8004a72 <SPI_EndRxTxTransaction+0x52>
 8004a8c:	e000      	b.n	8004a90 <SPI_EndRxTxTransaction+0x70>
 8004a8e:	bf00      	nop
 8004a90:	2300      	movs	r3, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000024 	.word	0x20000024
 8004aa0:	165e9f81 	.word	0x165e9f81

08004aa4 <HAL_SRAM_Init>:
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_SRAM_Init+0x16>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e034      	b.n	8004b24 <HAL_SRAM_Init+0x80>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_SRAM_Init+0x30>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7fc fe3e 	bl	8001750 <HAL_SRAM_MspInit>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3308      	adds	r3, #8
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fca6 	bl	8005430 <FSMC_NORSRAM_Init>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	461a      	mov	r2, r3
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	f000 fcf0 	bl	80054d4 <FSMC_NORSRAM_Timing_Init>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6858      	ldr	r0, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	f000 fd25 	bl	8005550 <FSMC_NORSRAM_Extended_Timing_Init>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6892      	ldr	r2, [r2, #8]
 8004b0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	6892      	ldr	r2, [r2, #8]
 8004b1a:	f041 0101 	orr.w	r1, r1, #1
 8004b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b22:	2300      	movs	r3, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_Base_Init>:
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_Base_Init+0x96>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fe fb4c 	bl	80031f0 <HAL_TIM_Base_MspInit>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fa96 	bl	800509c <TIM_Base_SetConfig>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_TIM_Base_Start_IT>:
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04e      	b.n	8004c82 <HAL_TIM_Base_Start_IT+0xb6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d01d      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1f      	ldr	r2, [pc, #124]	; (8004c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a19      	ldr	r2, [pc, #100]	; (8004ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_TIM_Base_Start_IT+0xa4>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d010      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0201 	orr.w	r2, r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e007      	b.n	8004c80 <HAL_TIM_Base_Start_IT+0xb4>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIM_IRQHandler>:
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d122      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x5c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d11b      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x5c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0202 	mvn.w	r2, #2
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	771a      	strb	r2, [r3, #28]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x4a>
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f9b5 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0x56>
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f9a7 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f9b8 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0204 	mvn.w	r2, #4
 8004d2c:	611a      	str	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	771a      	strb	r2, [r3, #28]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x9e>
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f98b 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0xaa>
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f97d 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f98e 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d122      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x104>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d11b      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x104>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0208 	mvn.w	r2, #8
 8004d80:	611a      	str	r2, [r3, #16]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	771a      	strb	r2, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_TIM_IRQHandler+0xf2>
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f961 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004d9c:	e005      	b.n	8004daa <HAL_TIM_IRQHandler+0xfe>
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f953 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f964 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	771a      	strb	r2, [r3, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d122      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x158>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x158>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0210 	mvn.w	r2, #16
 8004dd4:	611a      	str	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	771a      	strb	r2, [r3, #28]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x146>
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f937 	bl	800505e <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x152>
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f929 	bl	800504a <HAL_TIM_OC_DelayElapsedCallback>
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f93a 	bl	8005072 <HAL_TIM_PWM_PulseFinishedCallback>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10e      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x184>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x184>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0201 	mvn.w	r2, #1
 8004e28:	611a      	str	r2, [r3, #16]
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe f856 	bl	8002edc <HAL_TIM_PeriodElapsedCallback>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1b0>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1b0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e54:	611a      	str	r2, [r3, #16]
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fae0 	bl	800541c <HAL_TIMEx_BreakCallback>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1dc>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1dc>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e80:	611a      	str	r2, [r3, #16]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8ff 	bl	8005086 <HAL_TIM_TriggerCallback>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x208>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x208>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0220 	mvn.w	r2, #32
 8004eac:	611a      	str	r2, [r3, #16]
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 faaa 	bl	8005408 <HAL_TIMEx_CommutCallback>
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_ConfigClockSource>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e0b4      	b.n	8005042 <HAL_TIM_ConfigClockSource+0x186>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ef6:	60bb      	str	r3, [r7, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f10:	d03e      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0xd4>
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	f200 8087 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	f000 8086 	beq.w	800502e <HAL_TIM_ConfigClockSource+0x172>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d87f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f28:	2b70      	cmp	r3, #112	; 0x70
 8004f2a:	d01a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xa6>
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d87b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d050      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f34:	2b60      	cmp	r3, #96	; 0x60
 8004f36:	d877      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b50      	cmp	r3, #80	; 0x50
 8004f3a:	d03c      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f3c:	2b50      	cmp	r3, #80	; 0x50
 8004f3e:	d873      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d058      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d86f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b30      	cmp	r3, #48	; 0x30
 8004f4a:	d064      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x15a>
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d86b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d060      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x15a>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d867      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d05a      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	e062      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x16c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f000 f9ad 	bl	80052d0 <TIM_ETR_SetConfig>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	609a      	str	r2, [r3, #8]
 8004f8e:	e04f      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f000 f996 	bl	80052d0 <TIM_ETR_SetConfig>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	e03c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 f90a 	bl	80051dc <TIM_TI1_ConfigInputStage>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2150      	movs	r1, #80	; 0x50
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f963 	bl	800529a <TIM_ITRx_SetConfig>
 8004fd4:	e02c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f000 f929 	bl	800523a <TIM_TI2_ConfigInputStage>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2160      	movs	r1, #96	; 0x60
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f953 	bl	800529a <TIM_ITRx_SetConfig>
 8004ff4:	e01c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	f000 f8ea 	bl	80051dc <TIM_TI1_ConfigInputStage>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f943 	bl	800529a <TIM_ITRx_SetConfig>
 8005014:	e00c      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f000 f93a 	bl	800529a <TIM_ITRx_SetConfig>
 8005026:	e003      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e000      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x174>
 800502e:	bf00      	nop
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_OC_DelayElapsedCallback>:
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <HAL_TIM_IC_CaptureCallback>:
 800505e:	b480      	push	{r7}
 8005060:	b083      	sub	sp, #12
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	bf00      	nop
 8005068:	370c      	adds	r7, #12
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <HAL_TIM_TriggerCallback>:
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
	...

0800509c <TIM_Base_SetConfig>:
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <TIM_Base_SetConfig+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3a      	ldr	r2, [pc, #232]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d027      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d023      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <TIM_Base_SetConfig+0x134>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <TIM_Base_SetConfig+0x138>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <TIM_Base_SetConfig+0x13c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <TIM_Base_SetConfig+0xc4>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	62da      	str	r2, [r3, #44]	; 0x2c
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0x100>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	40001800 	.word	0x40001800
 80051d4:	40001c00 	.word	0x40001c00
 80051d8:	40002000 	.word	0x40002000

080051dc <TIM_TI1_ConfigInputStage>:
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0210 	bic.w	r2, r3, #16
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	619a      	str	r2, [r3, #24]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e05a      	b.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a21      	ldr	r2, [pc, #132]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d01d      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1b      	ldr	r2, [pc, #108]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a18      	ldr	r2, [pc, #96]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a17      	ldr	r2, [pc, #92]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a15      	ldr	r2, [pc, #84]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10c      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	609a      	str	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053dc:	2300      	movs	r3, #0
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40001800 	.word	0x40001800

08005408 <HAL_TIMEx_CommutCallback>:
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_BreakCallback>:
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <FSMC_NORSRAM_Init>:
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <FSMC_NORSRAM_Init+0xa0>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	431a      	orrs	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	431a      	orrs	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	431a      	orrs	r2, r3
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	431a      	orrs	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	431a      	orrs	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	431a      	orrs	r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	431a      	orrs	r2, r3
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	431a      	orrs	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	431a      	orrs	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	431a      	orrs	r2, r3
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	4313      	orrs	r3, r2
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d103      	bne.n	80054b4 <FSMC_NORSRAM_Init+0x84>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80054c0:	2300      	movs	r3, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	fff00080 	.word	0xfff00080

080054d4 <FSMC_NORSRAM_Timing_Init>:
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	431a      	orrs	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	041b      	lsls	r3, r3, #16
 8005512:	431a      	orrs	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	3b01      	subs	r3, #1
 800551a:	051b      	lsls	r3, r3, #20
 800551c:	431a      	orrs	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	3b02      	subs	r3, #2
 8005524:	061b      	lsls	r3, r3, #24
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	4313      	orrs	r3, r2
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6979      	ldr	r1, [r7, #20]
 800553c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005540:	2300      	movs	r3, #0
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <FSMC_NORSRAM_Extended_Timing_Init>:
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005568:	d122      	bne.n	80055b0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4b15      	ldr	r3, [pc, #84]	; (80055cc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005578:	4013      	ands	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	431a      	orrs	r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	431a      	orrs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	431a      	orrs	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055ae:	e005      	b.n	80055bc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80055b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80055bc:	2300      	movs	r3, #0
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	cff00000 	.word	0xcff00000

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	4d0d      	ldr	r5, [pc, #52]	; (8005608 <__libc_init_array+0x38>)
 80055d4:	4c0d      	ldr	r4, [pc, #52]	; (800560c <__libc_init_array+0x3c>)
 80055d6:	1b64      	subs	r4, r4, r5
 80055d8:	10a4      	asrs	r4, r4, #2
 80055da:	2600      	movs	r6, #0
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	4d0b      	ldr	r5, [pc, #44]	; (8005610 <__libc_init_array+0x40>)
 80055e2:	4c0c      	ldr	r4, [pc, #48]	; (8005614 <__libc_init_array+0x44>)
 80055e4:	f000 f820 	bl	8005628 <_init>
 80055e8:	1b64      	subs	r4, r4, r5
 80055ea:	10a4      	asrs	r4, r4, #2
 80055ec:	2600      	movs	r6, #0
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	08008600 	.word	0x08008600
 800560c:	08008600 	.word	0x08008600
 8005610:	08008600 	.word	0x08008600
 8005614:	08008604 	.word	0x08008604

08005618 <memset>:
 8005618:	4402      	add	r2, r0
 800561a:	4603      	mov	r3, r0
 800561c:	4293      	cmp	r3, r2
 800561e:	d100      	bne.n	8005622 <memset+0xa>
 8005620:	4770      	bx	lr
 8005622:	f803 1b01 	strb.w	r1, [r3], #1
 8005626:	e7f9      	b.n	800561c <memset+0x4>

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
