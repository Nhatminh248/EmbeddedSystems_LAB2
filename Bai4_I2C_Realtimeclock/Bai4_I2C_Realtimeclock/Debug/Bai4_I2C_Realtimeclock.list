
Bai4_I2C_Realtimeclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ff8  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d3c  08009d3c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d44  08009d44  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000214  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018633  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d8  00000000  00000000  0003867f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  0003ce10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023652  00000000  00000000  0003df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017e7e  00000000  00000000  000615b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfad4  00000000  00000000  00079430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148f04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004de0  00000000  00000000  00148f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d2c 	.word	0x08006d2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08006d2c 	.word	0x08006d2c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <button_init+0x14>)
 8000ca6:	f003 f8ab 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <button_Scan+0xc8>)
 8000cc0:	f003 f89e 	bl	8003e00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <button_Scan+0xc8>)
 8000cca:	f003 f899 	bl	8003e00 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000cce:	230a      	movs	r3, #10
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	492b      	ldr	r1, [pc, #172]	; (8000d80 <button_Scan+0xcc>)
 8000cd4:	482b      	ldr	r0, [pc, #172]	; (8000d84 <button_Scan+0xd0>)
 8000cd6:	f004 fe84 	bl	80059e2 <HAL_SPI_Receive>
	  int button_index = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e03f      	b.n	8000d6a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db06      	blt.n	8000cfe <button_Scan+0x4a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dc03      	bgt.n	8000cfe <button_Scan+0x4a>
			  button_index = i + 4;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e018      	b.n	8000d30 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd07      	ble.n	8000d14 <button_Scan+0x60>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	dc04      	bgt.n	8000d14 <button_Scan+0x60>
			  button_index = 7 - i;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1c3 0307 	rsb	r3, r3, #7
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00d      	b.n	8000d30 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	dd06      	ble.n	8000d28 <button_Scan+0x74>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0b      	cmp	r3, #11
 8000d1e:	dc03      	bgt.n	8000d28 <button_Scan+0x74>
			  button_index = i + 4;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3304      	adds	r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e003      	b.n	8000d30 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1c3 0317 	rsb	r3, r3, #23
 8000d2e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <button_Scan+0xcc>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	4013      	ands	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <button_Scan+0x96>
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <button_Scan+0xd4>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2100      	movs	r1, #0
 8000d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d48:	e009      	b.n	8000d5e <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <button_Scan+0xd4>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <button_Scan+0xd4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000d5e:	897b      	ldrh	r3, [r7, #10]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	ddbc      	ble.n	8000cea <button_Scan+0x36>
	  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	20000038 	.word	0x20000038
 8000d84:	2000018c 	.word	0x2000018c
 8000d88:	20000044 	.word	0x20000044

08000d8c <is_button_pressed>:

bool is_button_pressed(uint8_t id){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	if(id > 16) return 0;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d901      	bls.n	8000da0 <is_button_pressed+0x14>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e008      	b.n	8000db2 <is_button_pressed+0x26>
	return button_count[id] == 1;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <is_button_pressed+0x34>)
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000044 	.word	0x20000044

08000dc4 <is_button_long_pressed>:

bool is_button_long_pressed(uint8_t id){
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if(id > 16) return 0;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d901      	bls.n	8000dd8 <is_button_long_pressed+0x14>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e00a      	b.n	8000dee <is_button_long_pressed+0x2a>
	if(button_count[id] < time_value){
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <is_button_long_pressed+0x38>)
 8000ddc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <is_button_long_pressed+0x3c>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d201      	bcs.n	8000dec <is_button_long_pressed+0x28>
		return 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <is_button_long_pressed+0x2a>
	}
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000044 	.word	0x20000044
 8000e00:	20000000 	.word	0x20000000

08000e04 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000e08:	201e      	movs	r0, #30
 8000e0a:	f002 fc67 	bl	80036dc <DEC2BCD>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <ds3231_init+0x80>)
 8000e14:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000e16:	2016      	movs	r0, #22
 8000e18:	f002 fc60 	bl	80036dc <DEC2BCD>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <ds3231_init+0x80>)
 8000e22:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000e24:	2015      	movs	r0, #21
 8000e26:	f002 fc59 	bl	80036dc <DEC2BCD>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <ds3231_init+0x80>)
 8000e30:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000e32:	2006      	movs	r0, #6
 8000e34:	f002 fc52 	bl	80036dc <DEC2BCD>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <ds3231_init+0x80>)
 8000e3e:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000e40:	200f      	movs	r0, #15
 8000e42:	f002 fc4b 	bl	80036dc <DEC2BCD>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <ds3231_init+0x80>)
 8000e4c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000e4e:	2009      	movs	r0, #9
 8000e50:	f002 fc44 	bl	80036dc <DEC2BCD>
 8000e54:	4603      	mov	r3, r0
 8000e56:	461a      	mov	r2, r3
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <ds3231_init+0x80>)
 8000e5a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000e5c:	2017      	movs	r0, #23
 8000e5e:	f002 fc3d 	bl	80036dc <DEC2BCD>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <ds3231_init+0x80>)
 8000e68:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000e6a:	2332      	movs	r3, #50	; 0x32
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	21d0      	movs	r1, #208	; 0xd0
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ds3231_init+0x84>)
 8000e72:	f003 fc43 	bl	80046fc <HAL_I2C_IsDeviceReady>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d000      	beq.n	8000e7e <ds3231_init+0x7a>
		while(1);
 8000e7c:	e7fe      	b.n	8000e7c <ds3231_init+0x78>
	};
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000006c 	.word	0x2000006c
 8000e88:	200000c4 	.word	0x200000c4

08000e8c <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	4603      	mov	r3, r0
 8000e94:	460a      	mov	r2, r1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 fc1c 	bl	80036dc <DEC2BCD>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	230a      	movs	r3, #10
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	f107 030f 	add.w	r3, r7, #15
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	21d0      	movs	r1, #208	; 0xd0
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <ds3231_Write+0x40>)
 8000ec0:	f003 f8fc 	bl	80040bc <HAL_I2C_Mem_Write>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000c4 	.word	0x200000c4

08000ed0 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000ed6:	230a      	movs	r3, #10
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2307      	movs	r3, #7
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	21d0      	movs	r1, #208	; 0xd0
 8000ee8:	4823      	ldr	r0, [pc, #140]	; (8000f78 <ds3231_ReadTime+0xa8>)
 8000eea:	f003 f9e1 	bl	80042b0 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fbd8 	bl	80036a8 <BCD2DEC>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <ds3231_ReadTime+0xac>)
 8000efe:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f02:	785b      	ldrb	r3, [r3, #1]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fbcf 	bl	80036a8 <BCD2DEC>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <ds3231_ReadTime+0xb0>)
 8000f10:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 fbc6 	bl	80036a8 <BCD2DEC>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <ds3231_ReadTime+0xb4>)
 8000f22:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f26:	78db      	ldrb	r3, [r3, #3]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fbbd 	bl	80036a8 <BCD2DEC>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <ds3231_ReadTime+0xb8>)
 8000f34:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f002 fbb4 	bl	80036a8 <BCD2DEC>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <ds3231_ReadTime+0xbc>)
 8000f46:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f4a:	795b      	ldrb	r3, [r3, #5]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 fbab 	bl	80036a8 <BCD2DEC>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <ds3231_ReadTime+0xc0>)
 8000f58:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <ds3231_ReadTime+0xa4>)
 8000f5c:	799b      	ldrb	r3, [r3, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fba2 	bl	80036a8 <BCD2DEC>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <ds3231_ReadTime+0xc4>)
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000006c 	.word	0x2000006c
 8000f78:	200000c4 	.word	0x200000c4
 8000f7c:	20000064 	.word	0x20000064
 8000f80:	20000066 	.word	0x20000066
 8000f84:	20000069 	.word	0x20000069
 8000f88:	20000068 	.word	0x20000068
 8000f8c:	20000067 	.word	0x20000067
 8000f90:	2000006a 	.word	0x2000006a
 8000f94:	20000065 	.word	0x20000065

08000f98 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08e      	sub	sp, #56	; 0x38
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fc4:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fc6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fca:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fce:	4a2e      	ldr	r2, [pc, #184]	; (8001088 <MX_FSMC_Init+0xf0>)
 8000fd0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <MX_FSMC_Init+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <MX_FSMC_Init+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_FSMC_Init+0xec>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_FSMC_Init+0xec>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001002:	4b20      	ldr	r3, [pc, #128]	; (8001084 <MX_FSMC_Init+0xec>)
 8001004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_FSMC_Init+0xec>)
 800100c:	2200      	movs	r2, #0
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_FSMC_Init+0xec>)
 8001012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_FSMC_Init+0xec>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_FSMC_Init+0xec>)
 8001020:	2200      	movs	r2, #0
 8001022:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_FSMC_Init+0xec>)
 8001026:	2200      	movs	r2, #0
 8001028:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800102a:	230f      	movs	r3, #15
 800102c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800102e:	230f      	movs	r3, #15
 8001030:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001032:	233c      	movs	r3, #60	; 0x3c
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800103a:	2310      	movs	r3, #16
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800103e:	2311      	movs	r3, #17
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001046:	2308      	movs	r3, #8
 8001048:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800104a:	230f      	movs	r3, #15
 800104c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800104e:	2309      	movs	r3, #9
 8001050:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001056:	2310      	movs	r3, #16
 8001058:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800105a:	2311      	movs	r3, #17
 800105c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001062:	463a      	mov	r2, r7
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <MX_FSMC_Init+0xec>)
 800106c:	f005 f89c 	bl	80061a8 <HAL_SRAM_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001076:	f000 fe9b 	bl	8001db0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800107a:	bf00      	nop
 800107c:	3738      	adds	r7, #56	; 0x38
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000074 	.word	0x20000074
 8001088:	a0000104 	.word	0xa0000104

0800108c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_FSMC_MspInit+0x88>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d131      	bne.n	800110c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_FSMC_MspInit+0x88>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_FSMC_MspInit+0x8c>)
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_FSMC_MspInit+0x8c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_FSMC_MspInit+0x8c>)
 80010c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80010ca:	f64f 7388 	movw	r3, #65416	; 0xff88
 80010ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010dc:	230c      	movs	r3, #12
 80010de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4619      	mov	r1, r3
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <HAL_FSMC_MspInit+0x90>)
 80010e6:	f002 fcef 	bl	8003ac8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80010ea:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80010ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80010fc:	230c      	movs	r3, #12
 80010fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <HAL_FSMC_MspInit+0x94>)
 8001106:	f002 fcdf 	bl	8003ac8 <HAL_GPIO_Init>
 800110a:	e000      	b.n	800110e <HAL_FSMC_MspInit+0x82>
    return;
 800110c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	2000003c 	.word	0x2000003c
 8001118:	40023800 	.word	0x40023800
 800111c:	40021000 	.word	0x40021000
 8001120:	40020c00 	.word	0x40020c00

08001124 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800112c:	f7ff ffae 	bl	800108c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b6f      	ldr	r3, [pc, #444]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a6e      	ldr	r2, [pc, #440]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b6c      	ldr	r3, [pc, #432]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b68      	ldr	r3, [pc, #416]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a67      	ldr	r2, [pc, #412]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <MX_GPIO_Init+0x1d8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b61      	ldr	r3, [pc, #388]	; (8001310 <MX_GPIO_Init+0x1d8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a60      	ldr	r2, [pc, #384]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b5e      	ldr	r3, [pc, #376]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a59      	ldr	r2, [pc, #356]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b57      	ldr	r3, [pc, #348]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b53      	ldr	r3, [pc, #332]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a52      	ldr	r2, [pc, #328]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b50      	ldr	r3, [pc, #320]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b4c      	ldr	r3, [pc, #304]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b49      	ldr	r3, [pc, #292]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b45      	ldr	r3, [pc, #276]	; (8001310 <MX_GPIO_Init+0x1d8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a44      	ldr	r2, [pc, #272]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b42      	ldr	r3, [pc, #264]	; (8001310 <MX_GPIO_Init+0x1d8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2170      	movs	r1, #112	; 0x70
 8001216:	483f      	ldr	r0, [pc, #252]	; (8001314 <MX_GPIO_Init+0x1dc>)
 8001218:	f002 fdf2 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001222:	483d      	ldr	r0, [pc, #244]	; (8001318 <MX_GPIO_Init+0x1e0>)
 8001224:	f002 fdec 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	483b      	ldr	r0, [pc, #236]	; (800131c <MX_GPIO_Init+0x1e4>)
 800122e:	f002 fde7 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001238:	4839      	ldr	r0, [pc, #228]	; (8001320 <MX_GPIO_Init+0x1e8>)
 800123a:	f002 fde1 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2108      	movs	r1, #8
 8001242:	4838      	ldr	r0, [pc, #224]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001244:	f002 fddc 	bl	8003e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001248:	2370      	movs	r3, #112	; 0x70
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	482d      	ldr	r0, [pc, #180]	; (8001314 <MX_GPIO_Init+0x1dc>)
 8001260:	f002 fc32 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <MX_GPIO_Init+0x1e0>)
 800127e:	f002 fc23 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4822      	ldr	r0, [pc, #136]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001296:	f002 fc17 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800129a:	2330      	movs	r3, #48	; 0x30
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	481a      	ldr	r0, [pc, #104]	; (8001318 <MX_GPIO_Init+0x1e0>)
 80012ae:	f002 fc0b 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <MX_GPIO_Init+0x1e4>)
 80012ca:	f002 fbfd 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80012ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80012e8:	f002 fbee 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80012ec:	2308      	movs	r3, #8
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001304:	f002 fbe0 	bl	8003ac8 <HAL_GPIO_Init>

}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	; 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40021000 	.word	0x40021000
 8001318:	40020800 	.word	0x40020800
 800131c:	40021800 	.word	0x40021800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020c00 	.word	0x40020c00

08001328 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x50>)
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_I2C1_Init+0x54>)
 8001330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C1_Init+0x50>)
 8001334:	4a12      	ldr	r2, [pc, #72]	; (8001380 <MX_I2C1_Init+0x58>)
 8001336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_I2C1_Init+0x50>)
 8001346:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_I2C1_Init+0x50>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_I2C1_Init+0x50>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_I2C1_Init+0x50>)
 8001366:	f002 fd65 	bl	8003e34 <HAL_I2C_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001370:	f000 fd1e 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200000c4 	.word	0x200000c4
 800137c:	40005400 	.word	0x40005400
 8001380:	000186a0 	.word	0x000186a0

08001384 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_I2C_MspInit+0x84>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c2:	23c0      	movs	r3, #192	; 0xc0
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c6:	2312      	movs	r3, #18
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d2:	2304      	movs	r3, #4
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	; (8001410 <HAL_I2C_MspInit+0x8c>)
 80013de:	f002 fb73 	bl	8003ac8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_I2C_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40005400 	.word	0x40005400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020400 	.word	0x40020400

08001414 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <LCD_WR_REG+0x1c>)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	8013      	strh	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	600ffffe 	.word	0x600ffffe

08001434 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <LCD_WR_DATA+0x1c>)
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	8053      	strh	r3, [r2, #2]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	600ffffe 	.word	0x600ffffe

08001454 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <LCD_RD_DATA+0x20>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	b29b      	uxth	r3, r3
 8001460:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	b29b      	uxth	r3, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	600ffffe 	.word	0x600ffffe

08001478 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4604      	mov	r4, r0
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4623      	mov	r3, r4
 8001488:	80fb      	strh	r3, [r7, #6]
 800148a:	4603      	mov	r3, r0
 800148c:	80bb      	strh	r3, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	807b      	strh	r3, [r7, #2]
 8001492:	4613      	mov	r3, r2
 8001494:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001496:	202a      	movs	r0, #42	; 0x2a
 8001498:	f7ff ffbc 	bl	8001414 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ffc6 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffc0 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffba 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ffb4 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80014cc:	202b      	movs	r0, #43	; 0x2b
 80014ce:	f7ff ffa1 	bl	8001414 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffab 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffa5 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff9f 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff99 	bl	8001434 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001502:	202c      	movs	r0, #44	; 0x2c
 8001504:	f7ff ff86 	bl	8001414 <LCD_WR_REG>
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}

08001510 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <lcd_Clear+0x70>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <lcd_Clear+0x70>)
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	3b01      	subs	r3, #1
 8001538:	b29b      	uxth	r3, r3
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff ff9b 	bl	8001478 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001542:	2300      	movs	r3, #0
 8001544:	81fb      	strh	r3, [r7, #14]
 8001546:	e011      	b.n	800156c <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001548:	2300      	movs	r3, #0
 800154a:	81bb      	strh	r3, [r7, #12]
 800154c:	e006      	b.n	800155c <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff6f 	bl	8001434 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001556:	89bb      	ldrh	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	81bb      	strh	r3, [r7, #12]
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <lcd_Clear+0x70>)
 800155e:	885b      	ldrh	r3, [r3, #2]
 8001560:	89ba      	ldrh	r2, [r7, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	d3f3      	bcc.n	800154e <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	3301      	adds	r3, #1
 800156a:	81fb      	strh	r3, [r7, #14]
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <lcd_Clear+0x70>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	89fa      	ldrh	r2, [r7, #14]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3e8      	bcc.n	8001548 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000118 	.word	0x20000118

08001584 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	460b      	mov	r3, r1
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	88fa      	ldrh	r2, [r7, #6]
 800159a:	88b9      	ldrh	r1, [r7, #4]
 800159c:	88f8      	ldrh	r0, [r7, #6]
 800159e:	f7ff ff6b 	bl	8001478 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80015a2:	887b      	ldrh	r3, [r7, #2]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff45 	bl	8001434 <LCD_WR_DATA>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	4613      	mov	r3, r2
 80015d0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80015da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	bf14      	ite	ne
 80015f6:	2301      	movne	r3, #1
 80015f8:	2300      	moveq	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001604:	b29b      	uxth	r3, r3
 8001606:	fb12 f303 	smulbb	r3, r2, r3
 800160a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	3b20      	subs	r3, #32
 8001610:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	b29a      	uxth	r2, r3
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29c      	uxth	r4, r3
 8001620:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001624:	b29a      	uxth	r2, r3
 8001626:	88bb      	ldrh	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b29b      	uxth	r3, r3
 800162c:	3b01      	subs	r3, #1
 800162e:	b29b      	uxth	r3, r3
 8001630:	88b9      	ldrh	r1, [r7, #4]
 8001632:	88f8      	ldrh	r0, [r7, #6]
 8001634:	4622      	mov	r2, r4
 8001636:	f7ff ff1f 	bl	8001478 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800163a:	2300      	movs	r3, #0
 800163c:	827b      	strh	r3, [r7, #18]
 800163e:	e07a      	b.n	8001736 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001640:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d028      	beq.n	800169a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001648:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800164c:	2b10      	cmp	r3, #16
 800164e:	d108      	bne.n	8001662 <lcd_ShowChar+0xae>
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	8a7b      	ldrh	r3, [r7, #18]
 8001654:	493c      	ldr	r1, [pc, #240]	; (8001748 <lcd_ShowChar+0x194>)
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	440a      	add	r2, r1
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	75fb      	strb	r3, [r7, #23]
 8001660:	e01b      	b.n	800169a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001666:	2b18      	cmp	r3, #24
 8001668:	d10b      	bne.n	8001682 <lcd_ShowChar+0xce>
 800166a:	78fa      	ldrb	r2, [r7, #3]
 800166c:	8a79      	ldrh	r1, [r7, #18]
 800166e:	4837      	ldr	r0, [pc, #220]	; (800174c <lcd_ShowChar+0x198>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	4403      	add	r3, r0
 800167a:	440b      	add	r3, r1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	75fb      	strb	r3, [r7, #23]
 8001680:	e00b      	b.n	800169a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001682:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001686:	2b20      	cmp	r3, #32
 8001688:	d15a      	bne.n	8001740 <lcd_ShowChar+0x18c>
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	8a7b      	ldrh	r3, [r7, #18]
 800168e:	4930      	ldr	r1, [pc, #192]	; (8001750 <lcd_ShowChar+0x19c>)
 8001690:	0192      	lsls	r2, r2, #6
 8001692:	440a      	add	r2, r1
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800169a:	2300      	movs	r3, #0
 800169c:	75bb      	strb	r3, [r7, #22]
 800169e:	e044      	b.n	800172a <lcd_ShowChar+0x176>
		{
			if(!mode)
 80016a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d120      	bne.n	80016ea <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80016a8:	7dfa      	ldrb	r2, [r7, #23]
 80016aa:	7dbb      	ldrb	r3, [r7, #22]
 80016ac:	fa42 f303 	asr.w	r3, r2, r3
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <lcd_ShowChar+0x10e>
 80016b8:	883b      	ldrh	r3, [r7, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff feba 	bl	8001434 <LCD_WR_DATA>
 80016c0:	e003      	b.n	80016ca <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80016c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff feb5 	bl	8001434 <LCD_WR_DATA>
				m++;
 80016ca:	7d7b      	ldrb	r3, [r7, #21]
 80016cc:	3301      	adds	r3, #1
 80016ce:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80016d0:	7d7b      	ldrb	r3, [r7, #21]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80016d8:	fb02 f201 	mul.w	r2, r2, r1
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11f      	bne.n	8001724 <lcd_ShowChar+0x170>
				{
					m=0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	757b      	strb	r3, [r7, #21]
					break;
 80016e8:	e022      	b.n	8001730 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80016ea:	7dfa      	ldrb	r2, [r7, #23]
 80016ec:	7dbb      	ldrb	r3, [r7, #22]
 80016ee:	fa42 f303 	asr.w	r3, r2, r3
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d005      	beq.n	8001706 <lcd_ShowChar+0x152>
 80016fa:	883a      	ldrh	r2, [r7, #0]
 80016fc:	88b9      	ldrh	r1, [r7, #4]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff3f 	bl	8001584 <lcd_DrawPoint>
				x++;
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3301      	adds	r3, #1
 800170a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	8a3b      	ldrh	r3, [r7, #16]
 8001710:	1ad2      	subs	r2, r2, r3
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	429a      	cmp	r2, r3
 8001716:	d105      	bne.n	8001724 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001718:	8a3b      	ldrh	r3, [r7, #16]
 800171a:	80fb      	strh	r3, [r7, #6]
					y++;
 800171c:	88bb      	ldrh	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	80bb      	strh	r3, [r7, #4]
					break;
 8001722:	e005      	b.n	8001730 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001724:	7dbb      	ldrb	r3, [r7, #22]
 8001726:	3301      	adds	r3, #1
 8001728:	75bb      	strb	r3, [r7, #22]
 800172a:	7dbb      	ldrb	r3, [r7, #22]
 800172c:	2b07      	cmp	r3, #7
 800172e:	d9b7      	bls.n	80016a0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	3301      	adds	r3, #1
 8001734:	827b      	strh	r3, [r7, #18]
 8001736:	8a7a      	ldrh	r2, [r7, #18]
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	429a      	cmp	r2, r3
 800173c:	d380      	bcc.n	8001640 <lcd_ShowChar+0x8c>
 800173e:	e000      	b.n	8001742 <lcd_ShowChar+0x18e>
		else return;
 8001740:	bf00      	nop
				}
			}
		}
	}
}
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	08006da4 	.word	0x08006da4
 800174c:	08007394 	.word	0x08007394
 8001750:	08008564 	.word	0x08008564

08001754 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	71fb      	strb	r3, [r7, #7]
 8001760:	4613      	mov	r3, r2
 8001762:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001764:	2301      	movs	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001768:	e004      	b.n	8001774 <mypow+0x20>
 800176a:	79fa      	ldrb	r2, [r7, #7]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	71ba      	strb	r2, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f5      	bne.n	800176a <mypow+0x16>
	return result;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af04      	add	r7, sp, #16
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	80fb      	strh	r3, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80017ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e059      	b.n	8001870 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80017bc:	887c      	ldrh	r4, [r7, #2]
 80017be:	787a      	ldrb	r2, [r7, #1]
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	200a      	movs	r0, #10
 80017ce:	f7ff ffc1 	bl	8001754 <mypow>
 80017d2:	4603      	mov	r3, r0
 80017d4:	fbb4 f1f3 	udiv	r1, r4, r3
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <lcd_ShowIntNum+0xf8>)
 80017da:	fba3 2301 	umull	r2, r3, r3, r1
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	1aca      	subs	r2, r1, r3
 80017ea:	4613      	mov	r3, r2
 80017ec:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d121      	bne.n	8001838 <lcd_ShowIntNum+0xac>
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	787b      	ldrb	r3, [r7, #1]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	429a      	cmp	r2, r3
 80017fc:	da1c      	bge.n	8001838 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80017fe:	7b3b      	ldrb	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d117      	bne.n	8001834 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	b29a      	uxth	r2, r3
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b29b      	uxth	r3, r3
 800180c:	fb12 f303 	smulbb	r3, r2, r3
 8001810:	b29a      	uxth	r2, r3
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4413      	add	r3, r2
 8001816:	b298      	uxth	r0, r3
 8001818:	8c3a      	ldrh	r2, [r7, #32]
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	2300      	movs	r3, #0
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	2220      	movs	r2, #32
 800182e:	f7ff fec1 	bl	80015b4 <lcd_ShowChar>
				continue;
 8001832:	e01a      	b.n	800186a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001834:	2301      	movs	r3, #1
 8001836:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	b29a      	uxth	r2, r3
 800183c:	7b7b      	ldrb	r3, [r7, #13]
 800183e:	b29b      	uxth	r3, r3
 8001840:	fb12 f303 	smulbb	r3, r2, r3
 8001844:	b29a      	uxth	r2, r3
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4413      	add	r3, r2
 800184a:	b298      	uxth	r0, r3
 800184c:	7b3b      	ldrb	r3, [r7, #12]
 800184e:	3330      	adds	r3, #48	; 0x30
 8001850:	b2da      	uxtb	r2, r3
 8001852:	8c3c      	ldrh	r4, [r7, #32]
 8001854:	88b9      	ldrh	r1, [r7, #4]
 8001856:	2300      	movs	r3, #0
 8001858:	9302      	str	r3, [sp, #8]
 800185a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4623      	mov	r3, r4
 8001866:	f7ff fea5 	bl	80015b4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	3301      	adds	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	787b      	ldrb	r3, [r7, #1]
 8001874:	429a      	cmp	r2, r3
 8001876:	d3a1      	bcc.n	80017bc <lcd_ShowIntNum+0x30>
	}
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}
 8001882:	bf00      	nop
 8001884:	cccccccd 	.word	0xcccccccd

08001888 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <lcd_SetDir+0x44>)
 80018a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018a8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <lcd_SetDir+0x44>)
 80018ac:	22f0      	movs	r2, #240	; 0xf0
 80018ae:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80018b0:	e006      	b.n	80018c0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <lcd_SetDir+0x44>)
 80018b4:	22f0      	movs	r2, #240	; 0xf0
 80018b6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <lcd_SetDir+0x44>)
 80018ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018be:	805a      	strh	r2, [r3, #2]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000118 	.word	0x20000118

080018d0 <lcd_init>:


void lcd_init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	48aa      	ldr	r0, [pc, #680]	; (8001b84 <lcd_init+0x2b4>)
 80018dc:	f002 fa90 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018e4:	f001 ffba 	bl	800385c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ee:	48a5      	ldr	r0, [pc, #660]	; (8001b84 <lcd_init+0x2b4>)
 80018f0:	f002 fa86 	bl	8003e00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f001 ffb0 	bl	800385c <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff ffc3 	bl	8001888 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001902:	20d3      	movs	r0, #211	; 0xd3
 8001904:	f7ff fd86 	bl	8001414 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001908:	f7ff fda4 	bl	8001454 <LCD_RD_DATA>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <lcd_init+0x2b8>)
 8001912:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001914:	f7ff fd9e 	bl	8001454 <LCD_RD_DATA>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b9a      	ldr	r3, [pc, #616]	; (8001b88 <lcd_init+0x2b8>)
 800191e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001920:	f7ff fd98 	bl	8001454 <LCD_RD_DATA>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <lcd_init+0x2b8>)
 800192a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800192c:	4b96      	ldr	r3, [pc, #600]	; (8001b88 <lcd_init+0x2b8>)
 800192e:	889b      	ldrh	r3, [r3, #4]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b94      	ldr	r3, [pc, #592]	; (8001b88 <lcd_init+0x2b8>)
 8001936:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001938:	f7ff fd8c 	bl	8001454 <LCD_RD_DATA>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b91      	ldr	r3, [pc, #580]	; (8001b88 <lcd_init+0x2b8>)
 8001942:	889b      	ldrh	r3, [r3, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <lcd_init+0x2b8>)
 800194a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800194c:	20cf      	movs	r0, #207	; 0xcf
 800194e:	f7ff fd61 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fd6e 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001958:	20c1      	movs	r0, #193	; 0xc1
 800195a:	f7ff fd6b 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800195e:	2030      	movs	r0, #48	; 0x30
 8001960:	f7ff fd68 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001964:	20ed      	movs	r0, #237	; 0xed
 8001966:	f7ff fd55 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800196a:	2064      	movs	r0, #100	; 0x64
 800196c:	f7ff fd62 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001970:	2003      	movs	r0, #3
 8001972:	f7ff fd5f 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001976:	2012      	movs	r0, #18
 8001978:	f7ff fd5c 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800197c:	2081      	movs	r0, #129	; 0x81
 800197e:	f7ff fd59 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001982:	20e8      	movs	r0, #232	; 0xe8
 8001984:	f7ff fd46 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001988:	2085      	movs	r0, #133	; 0x85
 800198a:	f7ff fd53 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800198e:	2010      	movs	r0, #16
 8001990:	f7ff fd50 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001994:	207a      	movs	r0, #122	; 0x7a
 8001996:	f7ff fd4d 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800199a:	20cb      	movs	r0, #203	; 0xcb
 800199c:	f7ff fd3a 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80019a0:	2039      	movs	r0, #57	; 0x39
 80019a2:	f7ff fd47 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80019a6:	202c      	movs	r0, #44	; 0x2c
 80019a8:	f7ff fd44 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fd41 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80019b2:	2034      	movs	r0, #52	; 0x34
 80019b4:	f7ff fd3e 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80019b8:	2002      	movs	r0, #2
 80019ba:	f7ff fd3b 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80019be:	20f7      	movs	r0, #247	; 0xf7
 80019c0:	f7ff fd28 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80019c4:	2020      	movs	r0, #32
 80019c6:	f7ff fd35 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80019ca:	20ea      	movs	r0, #234	; 0xea
 80019cc:	f7ff fd22 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff fd2f 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f7ff fd2c 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80019dc:	20c0      	movs	r0, #192	; 0xc0
 80019de:	f7ff fd19 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80019e2:	201b      	movs	r0, #27
 80019e4:	f7ff fd26 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80019e8:	20c1      	movs	r0, #193	; 0xc1
 80019ea:	f7ff fd13 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff fd20 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80019f4:	20c5      	movs	r0, #197	; 0xc5
 80019f6:	f7ff fd0d 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80019fa:	2030      	movs	r0, #48	; 0x30
 80019fc:	f7ff fd1a 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001a00:	2030      	movs	r0, #48	; 0x30
 8001a02:	f7ff fd17 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001a06:	20c7      	movs	r0, #199	; 0xc7
 8001a08:	f7ff fd04 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001a0c:	20b7      	movs	r0, #183	; 0xb7
 8001a0e:	f7ff fd11 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001a12:	2036      	movs	r0, #54	; 0x36
 8001a14:	f7ff fcfe 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001a18:	2008      	movs	r0, #8
 8001a1a:	f7ff fd0b 	bl	8001434 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001a1e:	203a      	movs	r0, #58	; 0x3a
 8001a20:	f7ff fcf8 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001a24:	2055      	movs	r0, #85	; 0x55
 8001a26:	f7ff fd05 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001a2a:	20b1      	movs	r0, #177	; 0xb1
 8001a2c:	f7ff fcf2 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fcff 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001a36:	201a      	movs	r0, #26
 8001a38:	f7ff fcfc 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001a3c:	20b6      	movs	r0, #182	; 0xb6
 8001a3e:	f7ff fce9 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f7ff fcf6 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001a48:	20a2      	movs	r0, #162	; 0xa2
 8001a4a:	f7ff fcf3 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001a4e:	20f2      	movs	r0, #242	; 0xf2
 8001a50:	f7ff fce0 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fced 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a5a:	2026      	movs	r0, #38	; 0x26
 8001a5c:	f7ff fcda 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fce7 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001a66:	20e0      	movs	r0, #224	; 0xe0
 8001a68:	f7ff fcd4 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a6c:	200f      	movs	r0, #15
 8001a6e:	f7ff fce1 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001a72:	202a      	movs	r0, #42	; 0x2a
 8001a74:	f7ff fcde 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001a78:	2028      	movs	r0, #40	; 0x28
 8001a7a:	f7ff fcdb 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a7e:	2008      	movs	r0, #8
 8001a80:	f7ff fcd8 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001a84:	200e      	movs	r0, #14
 8001a86:	f7ff fcd5 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a8a:	2008      	movs	r0, #8
 8001a8c:	f7ff fcd2 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a90:	2054      	movs	r0, #84	; 0x54
 8001a92:	f7ff fccf 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a96:	20a9      	movs	r0, #169	; 0xa9
 8001a98:	f7ff fccc 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a9c:	2043      	movs	r0, #67	; 0x43
 8001a9e:	f7ff fcc9 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f7ff fcc6 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	f7ff fcc3 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fcc0 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fcbd 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fcba 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff fcb7 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001ac6:	20e1      	movs	r0, #225	; 0xe1
 8001ac8:	f7ff fca4 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fcb1 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001ad2:	2015      	movs	r0, #21
 8001ad4:	f7ff fcae 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001ad8:	2017      	movs	r0, #23
 8001ada:	f7ff fcab 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001ade:	2007      	movs	r0, #7
 8001ae0:	f7ff fca8 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001ae4:	2011      	movs	r0, #17
 8001ae6:	f7ff fca5 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001aea:	2006      	movs	r0, #6
 8001aec:	f7ff fca2 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001af0:	202b      	movs	r0, #43	; 0x2b
 8001af2:	f7ff fc9f 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001af6:	2056      	movs	r0, #86	; 0x56
 8001af8:	f7ff fc9c 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001afc:	203c      	movs	r0, #60	; 0x3c
 8001afe:	f7ff fc99 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001b02:	2005      	movs	r0, #5
 8001b04:	f7ff fc96 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001b08:	2010      	movs	r0, #16
 8001b0a:	f7ff fc93 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b0e:	200f      	movs	r0, #15
 8001b10:	f7ff fc90 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b14:	203f      	movs	r0, #63	; 0x3f
 8001b16:	f7ff fc8d 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001b1a:	203f      	movs	r0, #63	; 0x3f
 8001b1c:	f7ff fc8a 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001b20:	200f      	movs	r0, #15
 8001b22:	f7ff fc87 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001b26:	202b      	movs	r0, #43	; 0x2b
 8001b28:	f7ff fc74 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc81 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fc7e 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f7ff fc7b 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001b3e:	203f      	movs	r0, #63	; 0x3f
 8001b40:	f7ff fc78 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001b44:	202a      	movs	r0, #42	; 0x2a
 8001b46:	f7ff fc65 	bl	8001414 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fc72 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fc6f 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f7ff fc6c 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001b5c:	20ef      	movs	r0, #239	; 0xef
 8001b5e:	f7ff fc69 	bl	8001434 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001b62:	2011      	movs	r0, #17
 8001b64:	f7ff fc56 	bl	8001414 <LCD_WR_REG>
	HAL_Delay(120);
 8001b68:	2078      	movs	r0, #120	; 0x78
 8001b6a:	f001 fe77 	bl	800385c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b6e:	2029      	movs	r0, #41	; 0x29
 8001b70:	f7ff fc50 	bl	8001414 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7a:	4804      	ldr	r0, [pc, #16]	; (8001b8c <lcd_init+0x2bc>)
 8001b7c:	f002 f940 	bl	8003e00 <HAL_GPIO_WritePin>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40020800 	.word	0x40020800
 8001b88:	20000118 	.word	0x20000118
 8001b8c:	40020000 	.word	0x40020000

08001b90 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	81fb      	strh	r3, [r7, #14]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	81bb      	strh	r3, [r7, #12]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001bae:	e048      	b.n	8001c42 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d145      	bne.n	8001c42 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001bb6:	89fa      	ldrh	r2, [r7, #14]
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <lcd_ShowStr+0xc4>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	1acb      	subs	r3, r1, r3
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dc3f      	bgt.n	8001c4c <lcd_ShowStr+0xbc>
 8001bcc:	89ba      	ldrh	r2, [r7, #12]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <lcd_ShowStr+0xc4>)
 8001bd0:	885b      	ldrh	r3, [r3, #2]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bd8:	1acb      	subs	r3, r1, r3
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dc36      	bgt.n	8001c4c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d902      	bls.n	8001bec <lcd_ShowStr+0x5c>
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
 8001bea:	e02a      	b.n	8001c42 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b0d      	cmp	r3, #13
 8001bf2:	d10b      	bne.n	8001c0c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001bf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	89bb      	ldrh	r3, [r7, #12]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001c00:	8abb      	ldrh	r3, [r7, #20]
 8001c02:	81fb      	strh	r3, [r7, #14]
					str++;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	e017      	b.n	8001c3c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	88fc      	ldrh	r4, [r7, #6]
 8001c12:	89b9      	ldrh	r1, [r7, #12]
 8001c14:	89f8      	ldrh	r0, [r7, #14]
 8001c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4623      	mov	r3, r4
 8001c28:	f7ff fcc4 	bl	80015b4 <lcd_ShowChar>
					x+=sizey/2;
 8001c2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	89fb      	ldrh	r3, [r7, #14]
 8001c38:	4413      	add	r3, r2
 8001c3a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1b2      	bne.n	8001bb0 <lcd_ShowStr+0x20>
 8001c4a:	e000      	b.n	8001c4e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001c4c:	bf00      	nop
			}
		}
	}
}
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	20000118 	.word	0x20000118

08001c58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5c:	f001 fd8c 	bl	8003778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c60:	f000 f81e 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c64:	f7ff fa68 	bl	8001138 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c68:	f001 fcac 	bl	80035c4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001c6c:	f001 fbbe 	bl	80033ec <MX_SPI1_Init>
  MX_FSMC_Init();
 8001c70:	f7ff f992 	bl	8000f98 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001c74:	f7ff fb58 	bl	8001328 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001c78:	f000 f87c 	bl	8001d74 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!flag_timer(0))
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f001 fb9f 	bl	80033c0 <flag_timer>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <main+0x40>
	   {
	     ds3231_ReadTime();
 8001c88:	f7ff f922 	bl	8000ed0 <ds3231_ReadTime>
	     button_Scan();
 8001c8c:	f7ff f812 	bl	8000cb4 <button_Scan>
	     set_timer(0, READ_BUTTON_TIME);
 8001c90:	210a      	movs	r1, #10
 8001c92:	2000      	movs	r0, #0
 8001c94:	f001 fb2c 	bl	80032f0 <set_timer>
	   }
	   fsm_clock();    /* USER CODE END WHILE */
 8001c98:	f000 f932 	bl	8001f00 <fsm_clock>
  {
 8001c9c:	e7ee      	b.n	8001c7c <main+0x24>
	...

08001ca0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	2230      	movs	r2, #48	; 0x30
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 f834 	bl	8006d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d04:	2310      	movs	r3, #16
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d10:	2308      	movs	r3, #8
 8001d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d14:	23a8      	movs	r3, #168	; 0xa8
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 f973 	bl	8005010 <HAL_RCC_OscConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d30:	f000 f83e 	bl	8001db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d34:	230f      	movs	r3, #15
 8001d36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2105      	movs	r1, #5
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fbd4 	bl	8005500 <HAL_RCC_ClockConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d5e:	f000 f827 	bl	8001db0 <Error_Handler>
  }
}
 8001d62:	bf00      	nop
 8001d64:	3750      	adds	r7, #80	; 0x50
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <system_init>:

/* USER CODE BEGIN 4 */
void system_init()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  timer_init();
 8001d78:	f001 fab0 	bl	80032dc <timer_init>
  set_timer(0, READ_BUTTON_TIME);
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f001 fab6 	bl	80032f0 <set_timer>
  set_timer(1, BLINKING_TIME);
 8001d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f001 fab1 	bl	80032f0 <set_timer>
  button_init();
 8001d8e:	f7fe ff85 	bl	8000c9c <button_init>
  lcd_init();
 8001d92:	f7ff fd9d 	bl	80018d0 <lcd_init>
  lcd_Clear(BLACK);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff fbba 	bl	8001510 <lcd_Clear>
  ds3231_init();
 8001d9c:	f7ff f832 	bl	8000e04 <ds3231_init>
  init_box();
 8001da0:	f000 ffd6 	bl	8002d50 <init_box>
  update_ds3231_register();
 8001da4:	f000 fea2 	bl	8002aec <update_ds3231_register>
  display_text();
 8001da8:	f001 f9da 	bl	8003160 <display_text>
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <alarm>:
 * */
uint8_t should_stop_alarm = 0;
uint8_t running_idx = 0;
uint8_t max_running_idx = 180;
void alarm(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af04      	add	r7, sp, #16
	if (ala_year == buf_year &&
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <alarm+0x104>)
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <alarm+0x108>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d15d      	bne.n	8001e8a <alarm+0xce>
		ala_mon == buf_mon &&
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <alarm+0x10c>)
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <alarm+0x110>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
	if (ala_year == buf_year &&
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d157      	bne.n	8001e8a <alarm+0xce>
		ala_date == buf_date &&
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <alarm+0x114>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <alarm+0x118>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
		ala_mon == buf_mon &&
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d151      	bne.n	8001e8a <alarm+0xce>
		ala_day == buf_day &&
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <alarm+0x11c>)
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <alarm+0x120>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
		ala_date == buf_date &&
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d14b      	bne.n	8001e8a <alarm+0xce>
		ala_hour == buf_hour &&
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <alarm+0x124>)
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <alarm+0x128>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
		ala_day == buf_day &&
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d145      	bne.n	8001e8a <alarm+0xce>
		ala_min == buf_min && should_stop_alarm == 0)
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <alarm+0x12c>)
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <alarm+0x130>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
		ala_hour == buf_hour &&
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d13f      	bne.n	8001e8a <alarm+0xce>
		ala_min == buf_min && should_stop_alarm == 0)
 8001e0a:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <alarm+0x134>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d13b      	bne.n	8001e8a <alarm+0xce>
	{
		lcd_ShowStr(running_idx % max_running_idx, 200, "WAKE UP", BLACK, BLACK, 24, 0);
 8001e12:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <alarm+0x138>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <alarm+0x13c>)
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e1e:	fb02 f201 	mul.w	r2, r2, r1
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	b298      	uxth	r0, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9302      	str	r3, [sp, #8]
 8001e2c:	2318      	movs	r3, #24
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2300      	movs	r3, #0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2300      	movs	r3, #0
 8001e36:	4a31      	ldr	r2, [pc, #196]	; (8001efc <alarm+0x140>)
 8001e38:	21c8      	movs	r1, #200	; 0xc8
 8001e3a:	f7ff fea9 	bl	8001b90 <lcd_ShowStr>
		running_idx = (running_idx + 1) % max_running_idx;
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <alarm+0x138>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a2c      	ldr	r2, [pc, #176]	; (8001ef8 <alarm+0x13c>)
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e4c:	fb02 f201 	mul.w	r2, r2, r1
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <alarm+0x138>)
 8001e56:	701a      	strb	r2, [r3, #0]
		lcd_ShowStr(running_idx % max_running_idx, 200, "WAKE UP", WHITE, RED, 24, 0);
 8001e58:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <alarm+0x138>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <alarm+0x13c>)
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e64:	fb02 f201 	mul.w	r2, r2, r1
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	b298      	uxth	r0, r3
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	2318      	movs	r3, #24
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <alarm+0x140>)
 8001e82:	21c8      	movs	r1, #200	; 0xc8
 8001e84:	f7ff fe84 	bl	8001b90 <lcd_ShowStr>
 8001e88:	e016      	b.n	8001eb8 <alarm+0xfc>
	}
	else
	{
		lcd_ShowStr(running_idx % max_running_idx, 200, "WAKE UP", BLACK, BLACK, 24, 0);
 8001e8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <alarm+0x138>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <alarm+0x13c>)
 8001e90:	7812      	ldrb	r2, [r2, #0]
 8001e92:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e96:	fb02 f201 	mul.w	r2, r2, r1
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	b298      	uxth	r0, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	2318      	movs	r3, #24
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2300      	movs	r3, #0
 8001eae:	4a13      	ldr	r2, [pc, #76]	; (8001efc <alarm+0x140>)
 8001eb0:	21c8      	movs	r1, #200	; 0xc8
 8001eb2:	f7ff fe6d 	bl	8001b90 <lcd_ShowStr>
	}
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000000e 	.word	0x2000000e
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	2000000d 	.word	0x2000000d
 8001ecc:	20000007 	.word	0x20000007
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	20000006 	.word	0x20000006
 8001ed8:	2000000b 	.word	0x2000000b
 8001edc:	20000005 	.word	0x20000005
 8001ee0:	2000000a 	.word	0x2000000a
 8001ee4:	20000004 	.word	0x20000004
 8001ee8:	20000009 	.word	0x20000009
 8001eec:	20000003 	.word	0x20000003
 8001ef0:	20000042 	.word	0x20000042
 8001ef4:	20000043 	.word	0x20000043
 8001ef8:	2000000f 	.word	0x2000000f
 8001efc:	08006d44 	.word	0x08006d44

08001f00 <fsm_clock>:
 * @brief:	top-layer state machine of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_clock(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	switch (st_clock)
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <fsm_clock+0x4c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d016      	beq.n	8001f3a <fsm_clock+0x3a>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	dc18      	bgt.n	8001f42 <fsm_clock+0x42>
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <fsm_clock+0x1a>
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d00b      	beq.n	8001f30 <fsm_clock+0x30>
 8001f18:	e013      	b.n	8001f42 <fsm_clock+0x42>
	{
	case DISPLAY:
		update_clock();
 8001f1a:	f000 fe23 	bl	8002b64 <update_clock>
		display_all_clock();
 8001f1e:	f000 fe61 	bl	8002be4 <display_all_clock>

		alarm();
 8001f22:	f7ff ff4b 	bl	8001dbc <alarm>
		button0_fsm();
 8001f26:	f000 fb67 	bl	80025f8 <button0_fsm>
		button3_fsm();
 8001f2a:	f000 fbbb 	bl	80026a4 <button3_fsm>
		break;
 8001f2e:	e008      	b.n	8001f42 <fsm_clock+0x42>
	case CHANGE_TIME:
		fsm_changing();
 8001f30:	f000 f996 	bl	8002260 <fsm_changing>
		button0_fsm();
 8001f34:	f000 fb60 	bl	80025f8 <button0_fsm>
		break;
 8001f38:	e003      	b.n	8001f42 <fsm_clock+0x42>
	case ALARM:
		fsm_alarm();
 8001f3a:	f000 f809 	bl	8001f50 <fsm_alarm>
		button0_fsm();
 8001f3e:	f000 fb5b 	bl	80025f8 <button0_fsm>
	}
	display_mode();
 8001f42:	f000 fe8b 	bl	8002c5c <display_mode>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000040 	.word	0x20000040

08001f50 <fsm_alarm>:
 * @brief:	blinking number, changing buffer of alarm
 * @para:	none
 * @retval:	none
 * */
void fsm_alarm(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	should_stop_alarm = 0;
 8001f54:	4bb9      	ldr	r3, [pc, #740]	; (800223c <fsm_alarm+0x2ec>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]

	switch (st_changing)
 8001f5a:	4bb9      	ldr	r3, [pc, #740]	; (8002240 <fsm_alarm+0x2f0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	f200 816a 	bhi.w	8002238 <fsm_alarm+0x2e8>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <fsm_alarm+0x1c>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08001f89 	.word	0x08001f89
 8001f70:	08001f99 	.word	0x08001f99
 8001f74:	08002009 	.word	0x08002009
 8001f78:	08002079 	.word	0x08002079
 8001f7c:	080020e9 	.word	0x080020e9
 8001f80:	08002159 	.word	0x08002159
 8001f84:	080021c9 	.word	0x080021c9
	{
	case SECOND:
		// no set alarm on second
		dis_sec(1, 0);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 ff1a 	bl	8002dc4 <dis_sec>
		st_changing = MINUTE;
 8001f90:	4bab      	ldr	r3, [pc, #684]	; (8002240 <fsm_alarm+0x2f0>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
		break;
 8001f96:	e14f      	b.n	8002238 <fsm_alarm+0x2e8>
	case MINUTE:
		// blinking number
		switch (st_blinking)
 8001f98:	4baa      	ldr	r3, [pc, #680]	; (8002244 <fsm_alarm+0x2f4>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <fsm_alarm+0x56>
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d015      	beq.n	8001fd0 <fsm_alarm+0x80>
 8001fa4:	e02a      	b.n	8001ffc <fsm_alarm+0xac>
		{
		case ON:
			dis_min(ala_min, 1);
 8001fa6:	4ba8      	ldr	r3, [pc, #672]	; (8002248 <fsm_alarm+0x2f8>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 ff47 	bl	8002e40 <dis_min>
			if (!flag_timer(1))
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f001 fa04 	bl	80033c0 <flag_timer>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11d      	bne.n	8001ffa <fsm_alarm+0xaa>
			{
				st_blinking = OFF;
 8001fbe:	4ba1      	ldr	r3, [pc, #644]	; (8002244 <fsm_alarm+0x2f4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f001 f991 	bl	80032f0 <set_timer>
			}
			break;
 8001fce:	e014      	b.n	8001ffa <fsm_alarm+0xaa>
		case OFF:
			dis_min(ala_min, 0);
 8001fd0:	4b9d      	ldr	r3, [pc, #628]	; (8002248 <fsm_alarm+0x2f8>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 ff32 	bl	8002e40 <dis_min>
			if (!flag_timer(1))
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f001 f9ef 	bl	80033c0 <flag_timer>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <fsm_alarm+0xac>
			{
				st_blinking = ON;
 8001fe8:	4b96      	ldr	r3, [pc, #600]	; (8002244 <fsm_alarm+0x2f4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8001fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f001 f97c 	bl	80032f0 <set_timer>
 8001ff8:	e000      	b.n	8001ffc <fsm_alarm+0xac>
			break;
 8001ffa:	bf00      	nop
			}
		}
		// set value
		button1_fsm(&ala_min);
 8001ffc:	4892      	ldr	r0, [pc, #584]	; (8002248 <fsm_alarm+0x2f8>)
 8001ffe:	f000 fd13 	bl	8002a28 <button1_fsm>
		button2_fsm();
 8002002:	f000 fb81 	bl	8002708 <button2_fsm>
		break;
 8002006:	e117      	b.n	8002238 <fsm_alarm+0x2e8>
	case HOUR:
		switch (st_blinking)
 8002008:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <fsm_alarm+0x2f4>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <fsm_alarm+0xc6>
 8002010:	2b01      	cmp	r3, #1
 8002012:	d015      	beq.n	8002040 <fsm_alarm+0xf0>
 8002014:	e02a      	b.n	800206c <fsm_alarm+0x11c>
		{
		case ON:
			dis_hour(ala_hour, 1);
 8002016:	4b8d      	ldr	r3, [pc, #564]	; (800224c <fsm_alarm+0x2fc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	4618      	mov	r0, r3
 800201e:	f000 ff4d 	bl	8002ebc <dis_hour>
			if (!flag_timer(1))
 8002022:	2001      	movs	r0, #1
 8002024:	f001 f9cc 	bl	80033c0 <flag_timer>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11d      	bne.n	800206a <fsm_alarm+0x11a>
			{
				st_blinking = OFF;
 800202e:	4b85      	ldr	r3, [pc, #532]	; (8002244 <fsm_alarm+0x2f4>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002034:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002038:	2001      	movs	r0, #1
 800203a:	f001 f959 	bl	80032f0 <set_timer>
			}
			break;
 800203e:	e014      	b.n	800206a <fsm_alarm+0x11a>
		case OFF:
			dis_hour(ala_hour, 0);
 8002040:	4b82      	ldr	r3, [pc, #520]	; (800224c <fsm_alarm+0x2fc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f000 ff38 	bl	8002ebc <dis_hour>
			if (!flag_timer(1))
 800204c:	2001      	movs	r0, #1
 800204e:	f001 f9b7 	bl	80033c0 <flag_timer>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <fsm_alarm+0x11c>
			{
				st_blinking = ON;
 8002058:	4b7a      	ldr	r3, [pc, #488]	; (8002244 <fsm_alarm+0x2f4>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800205e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002062:	2001      	movs	r0, #1
 8002064:	f001 f944 	bl	80032f0 <set_timer>
 8002068:	e000      	b.n	800206c <fsm_alarm+0x11c>
			break;
 800206a:	bf00      	nop
			}
		}
		button1_fsm(&ala_hour);
 800206c:	4877      	ldr	r0, [pc, #476]	; (800224c <fsm_alarm+0x2fc>)
 800206e:	f000 fcdb 	bl	8002a28 <button1_fsm>
		button2_fsm();
 8002072:	f000 fb49 	bl	8002708 <button2_fsm>
		break;
 8002076:	e0df      	b.n	8002238 <fsm_alarm+0x2e8>
	case DAY:
		switch (st_blinking)
 8002078:	4b72      	ldr	r3, [pc, #456]	; (8002244 <fsm_alarm+0x2f4>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d002      	beq.n	8002086 <fsm_alarm+0x136>
 8002080:	2b01      	cmp	r3, #1
 8002082:	d015      	beq.n	80020b0 <fsm_alarm+0x160>
 8002084:	e02a      	b.n	80020dc <fsm_alarm+0x18c>
		{
		case ON:
			dis_day(ala_day, 1);
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <fsm_alarm+0x300>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f000 ff53 	bl	8002f38 <dis_day>
			if (!flag_timer(1))
 8002092:	2001      	movs	r0, #1
 8002094:	f001 f994 	bl	80033c0 <flag_timer>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11d      	bne.n	80020da <fsm_alarm+0x18a>
			{
				st_blinking = OFF;
 800209e:	4b69      	ldr	r3, [pc, #420]	; (8002244 <fsm_alarm+0x2f4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80020a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020a8:	2001      	movs	r0, #1
 80020aa:	f001 f921 	bl	80032f0 <set_timer>
			}
			break;
 80020ae:	e014      	b.n	80020da <fsm_alarm+0x18a>
		case OFF:
			dis_day(ala_day, 0);
 80020b0:	4b67      	ldr	r3, [pc, #412]	; (8002250 <fsm_alarm+0x300>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 ff3e 	bl	8002f38 <dis_day>
			if (!flag_timer(1))
 80020bc:	2001      	movs	r0, #1
 80020be:	f001 f97f 	bl	80033c0 <flag_timer>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <fsm_alarm+0x18c>
			{
				st_blinking = ON;
 80020c8:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <fsm_alarm+0x2f4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80020ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d2:	2001      	movs	r0, #1
 80020d4:	f001 f90c 	bl	80032f0 <set_timer>
 80020d8:	e000      	b.n	80020dc <fsm_alarm+0x18c>
			break;
 80020da:	bf00      	nop
			}
		}
		button1_fsm(&ala_day);
 80020dc:	485c      	ldr	r0, [pc, #368]	; (8002250 <fsm_alarm+0x300>)
 80020de:	f000 fca3 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80020e2:	f000 fb11 	bl	8002708 <button2_fsm>
		break;
 80020e6:	e0a7      	b.n	8002238 <fsm_alarm+0x2e8>
	case DATE:
		switch (st_blinking)
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <fsm_alarm+0x2f4>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <fsm_alarm+0x1a6>
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d015      	beq.n	8002120 <fsm_alarm+0x1d0>
 80020f4:	e02a      	b.n	800214c <fsm_alarm+0x1fc>
		{
		case ON:
			dis_date(ala_date, 1);
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <fsm_alarm+0x304>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 ff75 	bl	8002fec <dis_date>
			if (!flag_timer(1))
 8002102:	2001      	movs	r0, #1
 8002104:	f001 f95c 	bl	80033c0 <flag_timer>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11d      	bne.n	800214a <fsm_alarm+0x1fa>
			{
				st_blinking = OFF;
 800210e:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <fsm_alarm+0x2f4>)
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002114:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002118:	2001      	movs	r0, #1
 800211a:	f001 f8e9 	bl	80032f0 <set_timer>
			}
			break;
 800211e:	e014      	b.n	800214a <fsm_alarm+0x1fa>
		case OFF:
			dis_date(ala_date, 0);
 8002120:	4b4c      	ldr	r3, [pc, #304]	; (8002254 <fsm_alarm+0x304>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f000 ff60 	bl	8002fec <dis_date>
			if (!flag_timer(1))
 800212c:	2001      	movs	r0, #1
 800212e:	f001 f947 	bl	80033c0 <flag_timer>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <fsm_alarm+0x1fc>
			{
				st_blinking = ON;
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <fsm_alarm+0x2f4>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800213e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002142:	2001      	movs	r0, #1
 8002144:	f001 f8d4 	bl	80032f0 <set_timer>
 8002148:	e000      	b.n	800214c <fsm_alarm+0x1fc>
			break;
 800214a:	bf00      	nop
			}
		}
		button1_fsm(&ala_date);
 800214c:	4841      	ldr	r0, [pc, #260]	; (8002254 <fsm_alarm+0x304>)
 800214e:	f000 fc6b 	bl	8002a28 <button1_fsm>
		button2_fsm();
 8002152:	f000 fad9 	bl	8002708 <button2_fsm>
		break;
 8002156:	e06f      	b.n	8002238 <fsm_alarm+0x2e8>
	case MONTH:
		switch (st_blinking)
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <fsm_alarm+0x2f4>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <fsm_alarm+0x216>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d015      	beq.n	8002190 <fsm_alarm+0x240>
 8002164:	e02a      	b.n	80021bc <fsm_alarm+0x26c>
		{
		case ON:
			dis_month(ala_mon, 1);
 8002166:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <fsm_alarm+0x308>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	4618      	mov	r0, r3
 800216e:	f000 ff7b 	bl	8003068 <dis_month>
			if (!flag_timer(1))
 8002172:	2001      	movs	r0, #1
 8002174:	f001 f924 	bl	80033c0 <flag_timer>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11d      	bne.n	80021ba <fsm_alarm+0x26a>
			{
				st_blinking = OFF;
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <fsm_alarm+0x2f4>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002188:	2001      	movs	r0, #1
 800218a:	f001 f8b1 	bl	80032f0 <set_timer>
			}
			break;
 800218e:	e014      	b.n	80021ba <fsm_alarm+0x26a>
		case OFF:
			dis_month(ala_mon, 0);
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <fsm_alarm+0x308>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ff66 	bl	8003068 <dis_month>
			if (!flag_timer(1))
 800219c:	2001      	movs	r0, #1
 800219e:	f001 f90f 	bl	80033c0 <flag_timer>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d109      	bne.n	80021bc <fsm_alarm+0x26c>
			{
				st_blinking = ON;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <fsm_alarm+0x2f4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80021ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021b2:	2001      	movs	r0, #1
 80021b4:	f001 f89c 	bl	80032f0 <set_timer>
 80021b8:	e000      	b.n	80021bc <fsm_alarm+0x26c>
			break;
 80021ba:	bf00      	nop
			}
		}
		button1_fsm(&ala_mon);
 80021bc:	4826      	ldr	r0, [pc, #152]	; (8002258 <fsm_alarm+0x308>)
 80021be:	f000 fc33 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80021c2:	f000 faa1 	bl	8002708 <button2_fsm>
		break;
 80021c6:	e037      	b.n	8002238 <fsm_alarm+0x2e8>
	case YEAR:
		switch (st_blinking)
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <fsm_alarm+0x2f4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <fsm_alarm+0x286>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d015      	beq.n	8002200 <fsm_alarm+0x2b0>
 80021d4:	e02a      	b.n	800222c <fsm_alarm+0x2dc>
		{
		case ON:
			dis_year(ala_year, 1);
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <fsm_alarm+0x30c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2101      	movs	r1, #1
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 ff81 	bl	80030e4 <dis_year>
			if (!flag_timer(1))
 80021e2:	2001      	movs	r0, #1
 80021e4:	f001 f8ec 	bl	80033c0 <flag_timer>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d11d      	bne.n	800222a <fsm_alarm+0x2da>
			{
				st_blinking = OFF;
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <fsm_alarm+0x2f4>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80021f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021f8:	2001      	movs	r0, #1
 80021fa:	f001 f879 	bl	80032f0 <set_timer>
			}
			break;
 80021fe:	e014      	b.n	800222a <fsm_alarm+0x2da>
		case OFF:
			dis_year(ala_year, 0);
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <fsm_alarm+0x30c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f000 ff6c 	bl	80030e4 <dis_year>
			if (!flag_timer(1))
 800220c:	2001      	movs	r0, #1
 800220e:	f001 f8d7 	bl	80033c0 <flag_timer>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <fsm_alarm+0x2dc>
			{
				st_blinking = ON;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <fsm_alarm+0x2f4>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800221e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002222:	2001      	movs	r0, #1
 8002224:	f001 f864 	bl	80032f0 <set_timer>
 8002228:	e000      	b.n	800222c <fsm_alarm+0x2dc>
			break;
 800222a:	bf00      	nop
			}
		}
		button1_fsm(&ala_year);
 800222c:	480b      	ldr	r0, [pc, #44]	; (800225c <fsm_alarm+0x30c>)
 800222e:	f000 fbfb 	bl	8002a28 <button1_fsm>
		button2_fsm();
 8002232:	f000 fa69 	bl	8002708 <button2_fsm>
	}
}
 8002236:	e7ff      	b.n	8002238 <fsm_alarm+0x2e8>
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000042 	.word	0x20000042
 8002240:	20000041 	.word	0x20000041
 8002244:	20000158 	.word	0x20000158
 8002248:	20000009 	.word	0x20000009
 800224c:	2000000a 	.word	0x2000000a
 8002250:	2000000b 	.word	0x2000000b
 8002254:	2000000c 	.word	0x2000000c
 8002258:	2000000d 	.word	0x2000000d
 800225c:	2000000e 	.word	0x2000000e

08002260 <fsm_changing>:
 * @brief:	blinking number, changing buffer of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_changing(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	switch (st_changing)
 8002264:	4bc0      	ldr	r3, [pc, #768]	; (8002568 <fsm_changing+0x308>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b06      	cmp	r3, #6
 800226a:	f200 81ab 	bhi.w	80025c4 <fsm_changing+0x364>
 800226e:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <fsm_changing+0x14>)
 8002270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002274:	08002291 	.word	0x08002291
 8002278:	08002301 	.word	0x08002301
 800227c:	08002371 	.word	0x08002371
 8002280:	080023e1 	.word	0x080023e1
 8002284:	08002451 	.word	0x08002451
 8002288:	080024c1 	.word	0x080024c1
 800228c:	08002531 	.word	0x08002531
	{
	case SECOND:
		// blinking number
		switch (st_blinking)
 8002290:	4bb6      	ldr	r3, [pc, #728]	; (800256c <fsm_changing+0x30c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <fsm_changing+0x3e>
 8002298:	2b01      	cmp	r3, #1
 800229a:	d015      	beq.n	80022c8 <fsm_changing+0x68>
 800229c:	e02a      	b.n	80022f4 <fsm_changing+0x94>
		{
		case ON:
			dis_sec(buf_sec, 1);
 800229e:	4bb4      	ldr	r3, [pc, #720]	; (8002570 <fsm_changing+0x310>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fd8d 	bl	8002dc4 <dis_sec>
			if (!flag_timer(1))
 80022aa:	2001      	movs	r0, #1
 80022ac:	f001 f888 	bl	80033c0 <flag_timer>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11d      	bne.n	80022f2 <fsm_changing+0x92>
			{
				st_blinking = OFF;
 80022b6:	4bad      	ldr	r3, [pc, #692]	; (800256c <fsm_changing+0x30c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80022bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c0:	2001      	movs	r0, #1
 80022c2:	f001 f815 	bl	80032f0 <set_timer>
			}
			break;
 80022c6:	e014      	b.n	80022f2 <fsm_changing+0x92>
		case OFF:
			dis_sec(buf_sec, 0);
 80022c8:	4ba9      	ldr	r3, [pc, #676]	; (8002570 <fsm_changing+0x310>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fd78 	bl	8002dc4 <dis_sec>
			if (!flag_timer(1))
 80022d4:	2001      	movs	r0, #1
 80022d6:	f001 f873 	bl	80033c0 <flag_timer>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <fsm_changing+0x94>
			{
				st_blinking = ON;
 80022e0:	4ba2      	ldr	r3, [pc, #648]	; (800256c <fsm_changing+0x30c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80022e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022ea:	2001      	movs	r0, #1
 80022ec:	f001 f800 	bl	80032f0 <set_timer>
 80022f0:	e000      	b.n	80022f4 <fsm_changing+0x94>
			break;
 80022f2:	bf00      	nop
			}
		}
		button1_fsm(&buf_sec);
 80022f4:	489e      	ldr	r0, [pc, #632]	; (8002570 <fsm_changing+0x310>)
 80022f6:	f000 fb97 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80022fa:	f000 fa05 	bl	8002708 <button2_fsm>
		break;
 80022fe:	e161      	b.n	80025c4 <fsm_changing+0x364>
	case MINUTE:
		switch (st_blinking)
 8002300:	4b9a      	ldr	r3, [pc, #616]	; (800256c <fsm_changing+0x30c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <fsm_changing+0xae>
 8002308:	2b01      	cmp	r3, #1
 800230a:	d015      	beq.n	8002338 <fsm_changing+0xd8>
 800230c:	e02a      	b.n	8002364 <fsm_changing+0x104>
		{
		case ON:
			dis_min(buf_min, 1);
 800230e:	4b99      	ldr	r3, [pc, #612]	; (8002574 <fsm_changing+0x314>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fd93 	bl	8002e40 <dis_min>
			if (!flag_timer(1))
 800231a:	2001      	movs	r0, #1
 800231c:	f001 f850 	bl	80033c0 <flag_timer>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d11d      	bne.n	8002362 <fsm_changing+0x102>
			{
				st_blinking = OFF;
 8002326:	4b91      	ldr	r3, [pc, #580]	; (800256c <fsm_changing+0x30c>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800232c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002330:	2001      	movs	r0, #1
 8002332:	f000 ffdd 	bl	80032f0 <set_timer>
			}
			break;
 8002336:	e014      	b.n	8002362 <fsm_changing+0x102>
		case OFF:
			dis_min(buf_min, 0);
 8002338:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <fsm_changing+0x314>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fd7e 	bl	8002e40 <dis_min>
			if (!flag_timer(1))
 8002344:	2001      	movs	r0, #1
 8002346:	f001 f83b 	bl	80033c0 <flag_timer>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <fsm_changing+0x104>
			{
				st_blinking = ON;
 8002350:	4b86      	ldr	r3, [pc, #536]	; (800256c <fsm_changing+0x30c>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002356:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800235a:	2001      	movs	r0, #1
 800235c:	f000 ffc8 	bl	80032f0 <set_timer>
 8002360:	e000      	b.n	8002364 <fsm_changing+0x104>
			break;
 8002362:	bf00      	nop
			}
		}
		button1_fsm(&buf_min);
 8002364:	4883      	ldr	r0, [pc, #524]	; (8002574 <fsm_changing+0x314>)
 8002366:	f000 fb5f 	bl	8002a28 <button1_fsm>
		button2_fsm();
 800236a:	f000 f9cd 	bl	8002708 <button2_fsm>
		break;
 800236e:	e129      	b.n	80025c4 <fsm_changing+0x364>
	case HOUR:
		switch (st_blinking)
 8002370:	4b7e      	ldr	r3, [pc, #504]	; (800256c <fsm_changing+0x30c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <fsm_changing+0x11e>
 8002378:	2b01      	cmp	r3, #1
 800237a:	d015      	beq.n	80023a8 <fsm_changing+0x148>
 800237c:	e02a      	b.n	80023d4 <fsm_changing+0x174>
		{
		case ON:
			dis_hour(buf_hour, 1);
 800237e:	4b7e      	ldr	r3, [pc, #504]	; (8002578 <fsm_changing+0x318>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2101      	movs	r1, #1
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fd99 	bl	8002ebc <dis_hour>
			if (!flag_timer(1))
 800238a:	2001      	movs	r0, #1
 800238c:	f001 f818 	bl	80033c0 <flag_timer>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11d      	bne.n	80023d2 <fsm_changing+0x172>
			{
				st_blinking = OFF;
 8002396:	4b75      	ldr	r3, [pc, #468]	; (800256c <fsm_changing+0x30c>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800239c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023a0:	2001      	movs	r0, #1
 80023a2:	f000 ffa5 	bl	80032f0 <set_timer>
			}
			break;
 80023a6:	e014      	b.n	80023d2 <fsm_changing+0x172>
		case OFF:
			dis_hour(buf_hour, 0);
 80023a8:	4b73      	ldr	r3, [pc, #460]	; (8002578 <fsm_changing+0x318>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fd84 	bl	8002ebc <dis_hour>
			if (!flag_timer(1))
 80023b4:	2001      	movs	r0, #1
 80023b6:	f001 f803 	bl	80033c0 <flag_timer>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <fsm_changing+0x174>
			{
				st_blinking = ON;
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <fsm_changing+0x30c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80023c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 ff90 	bl	80032f0 <set_timer>
 80023d0:	e000      	b.n	80023d4 <fsm_changing+0x174>
			break;
 80023d2:	bf00      	nop
			}
		}
		button1_fsm(&buf_hour);
 80023d4:	4868      	ldr	r0, [pc, #416]	; (8002578 <fsm_changing+0x318>)
 80023d6:	f000 fb27 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80023da:	f000 f995 	bl	8002708 <button2_fsm>
		break;
 80023de:	e0f1      	b.n	80025c4 <fsm_changing+0x364>
	case DAY:
		switch (st_blinking)
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <fsm_changing+0x30c>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <fsm_changing+0x18e>
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d015      	beq.n	8002418 <fsm_changing+0x1b8>
 80023ec:	e02a      	b.n	8002444 <fsm_changing+0x1e4>
		{
		case ON:
			dis_day(buf_day, 1);
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <fsm_changing+0x31c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fd9f 	bl	8002f38 <dis_day>
			if (!flag_timer(1))
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 ffe0 	bl	80033c0 <flag_timer>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11d      	bne.n	8002442 <fsm_changing+0x1e2>
			{
				st_blinking = OFF;
 8002406:	4b59      	ldr	r3, [pc, #356]	; (800256c <fsm_changing+0x30c>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800240c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002410:	2001      	movs	r0, #1
 8002412:	f000 ff6d 	bl	80032f0 <set_timer>
			}
			break;
 8002416:	e014      	b.n	8002442 <fsm_changing+0x1e2>
		case OFF:
			dis_day(buf_day, 0);
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <fsm_changing+0x31c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fd8a 	bl	8002f38 <dis_day>
			if (!flag_timer(1))
 8002424:	2001      	movs	r0, #1
 8002426:	f000 ffcb 	bl	80033c0 <flag_timer>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <fsm_changing+0x1e4>
			{
				st_blinking = ON;
 8002430:	4b4e      	ldr	r3, [pc, #312]	; (800256c <fsm_changing+0x30c>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002436:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800243a:	2001      	movs	r0, #1
 800243c:	f000 ff58 	bl	80032f0 <set_timer>
 8002440:	e000      	b.n	8002444 <fsm_changing+0x1e4>
			break;
 8002442:	bf00      	nop
			}
		}
		button1_fsm(&buf_day);
 8002444:	484d      	ldr	r0, [pc, #308]	; (800257c <fsm_changing+0x31c>)
 8002446:	f000 faef 	bl	8002a28 <button1_fsm>
		button2_fsm();
 800244a:	f000 f95d 	bl	8002708 <button2_fsm>
		break;
 800244e:	e0b9      	b.n	80025c4 <fsm_changing+0x364>
	case DATE:
		switch (st_blinking)
 8002450:	4b46      	ldr	r3, [pc, #280]	; (800256c <fsm_changing+0x30c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <fsm_changing+0x1fe>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d015      	beq.n	8002488 <fsm_changing+0x228>
 800245c:	e02a      	b.n	80024b4 <fsm_changing+0x254>
		{
		case ON:
			dis_date(buf_date, 1);
 800245e:	4b48      	ldr	r3, [pc, #288]	; (8002580 <fsm_changing+0x320>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fdc1 	bl	8002fec <dis_date>
			if (!flag_timer(1))
 800246a:	2001      	movs	r0, #1
 800246c:	f000 ffa8 	bl	80033c0 <flag_timer>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11d      	bne.n	80024b2 <fsm_changing+0x252>
			{
				st_blinking = OFF;
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <fsm_changing+0x30c>)
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800247c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002480:	2001      	movs	r0, #1
 8002482:	f000 ff35 	bl	80032f0 <set_timer>
			}
			break;
 8002486:	e014      	b.n	80024b2 <fsm_changing+0x252>
		case OFF:
			dis_date(buf_date, 0);
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <fsm_changing+0x320>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2100      	movs	r1, #0
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fdac 	bl	8002fec <dis_date>
			if (!flag_timer(1))
 8002494:	2001      	movs	r0, #1
 8002496:	f000 ff93 	bl	80033c0 <flag_timer>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <fsm_changing+0x254>
			{
				st_blinking = ON;
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <fsm_changing+0x30c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80024a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024aa:	2001      	movs	r0, #1
 80024ac:	f000 ff20 	bl	80032f0 <set_timer>
 80024b0:	e000      	b.n	80024b4 <fsm_changing+0x254>
			break;
 80024b2:	bf00      	nop
			}
		}
		button1_fsm(&buf_date);
 80024b4:	4832      	ldr	r0, [pc, #200]	; (8002580 <fsm_changing+0x320>)
 80024b6:	f000 fab7 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80024ba:	f000 f925 	bl	8002708 <button2_fsm>
		break;
 80024be:	e081      	b.n	80025c4 <fsm_changing+0x364>
	case MONTH:
		switch (st_blinking)
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <fsm_changing+0x30c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <fsm_changing+0x26e>
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d015      	beq.n	80024f8 <fsm_changing+0x298>
 80024cc:	e02a      	b.n	8002524 <fsm_changing+0x2c4>
		{
		case ON:
			dis_month(buf_mon, 1);
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <fsm_changing+0x324>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2101      	movs	r1, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fdc7 	bl	8003068 <dis_month>
			if (!flag_timer(1))
 80024da:	2001      	movs	r0, #1
 80024dc:	f000 ff70 	bl	80033c0 <flag_timer>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d11d      	bne.n	8002522 <fsm_changing+0x2c2>
			{
				st_blinking = OFF;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <fsm_changing+0x30c>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80024ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024f0:	2001      	movs	r0, #1
 80024f2:	f000 fefd 	bl	80032f0 <set_timer>
			}
			break;
 80024f6:	e014      	b.n	8002522 <fsm_changing+0x2c2>
		case OFF:
			dis_month(buf_mon, 0);
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <fsm_changing+0x324>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fdb2 	bl	8003068 <dis_month>
			if (!flag_timer(1))
 8002504:	2001      	movs	r0, #1
 8002506:	f000 ff5b 	bl	80033c0 <flag_timer>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <fsm_changing+0x2c4>
			{
				st_blinking = ON;
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <fsm_changing+0x30c>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fee8 	bl	80032f0 <set_timer>
 8002520:	e000      	b.n	8002524 <fsm_changing+0x2c4>
			break;
 8002522:	bf00      	nop
			}
		}
		button1_fsm(&buf_mon);
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <fsm_changing+0x324>)
 8002526:	f000 fa7f 	bl	8002a28 <button1_fsm>
		button2_fsm();
 800252a:	f000 f8ed 	bl	8002708 <button2_fsm>
		break;
 800252e:	e049      	b.n	80025c4 <fsm_changing+0x364>
	case YEAR:
		switch (st_blinking)
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <fsm_changing+0x30c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <fsm_changing+0x2de>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d027      	beq.n	800258c <fsm_changing+0x32c>
 800253c:	e03c      	b.n	80025b8 <fsm_changing+0x358>
		{
		case ON:
			dis_year(buf_year, 1);
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <fsm_changing+0x328>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fdcd 	bl	80030e4 <dis_year>
			if (!flag_timer(1))
 800254a:	2001      	movs	r0, #1
 800254c:	f000 ff38 	bl	80033c0 <flag_timer>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d12f      	bne.n	80025b6 <fsm_changing+0x356>
			{
				st_blinking = OFF;
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <fsm_changing+0x30c>)
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800255c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002560:	2001      	movs	r0, #1
 8002562:	f000 fec5 	bl	80032f0 <set_timer>
			}
			break;
 8002566:	e026      	b.n	80025b6 <fsm_changing+0x356>
 8002568:	20000041 	.word	0x20000041
 800256c:	20000158 	.word	0x20000158
 8002570:	20000002 	.word	0x20000002
 8002574:	20000003 	.word	0x20000003
 8002578:	20000004 	.word	0x20000004
 800257c:	20000005 	.word	0x20000005
 8002580:	20000006 	.word	0x20000006
 8002584:	20000007 	.word	0x20000007
 8002588:	20000008 	.word	0x20000008
		case OFF:
			dis_year(buf_year, 0);
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <fsm_changing+0x368>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2100      	movs	r1, #0
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fda6 	bl	80030e4 <dis_year>
			if (!flag_timer(1))
 8002598:	2001      	movs	r0, #1
 800259a:	f000 ff11 	bl	80033c0 <flag_timer>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <fsm_changing+0x358>
			{
				st_blinking = ON;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <fsm_changing+0x36c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80025aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025ae:	2001      	movs	r0, #1
 80025b0:	f000 fe9e 	bl	80032f0 <set_timer>
 80025b4:	e000      	b.n	80025b8 <fsm_changing+0x358>
			break;
 80025b6:	bf00      	nop
			}
		}
		button1_fsm(&buf_year);
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <fsm_changing+0x368>)
 80025ba:	f000 fa35 	bl	8002a28 <button1_fsm>
		button2_fsm();
 80025be:	f000 f8a3 	bl	8002708 <button2_fsm>
	}
}
 80025c2:	e7ff      	b.n	80025c4 <fsm_changing+0x364>
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000158 	.word	0x20000158

080025d0 <reset_str>:
 * @brief:	reset the string when transitioning mode
 * @para:	none
 * @retval:	none
 * */
void reset_str(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 30, "MODE: CHANGE TIME", BLACK, BLACK, 24, 0);
 80025d6:	2300      	movs	r3, #0
 80025d8:	9302      	str	r3, [sp, #8]
 80025da:	2318      	movs	r3, #24
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2300      	movs	r3, #0
 80025e4:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <reset_str+0x24>)
 80025e6:	211e      	movs	r1, #30
 80025e8:	2014      	movs	r0, #20
 80025ea:	f7ff fad1 	bl	8001b90 <lcd_ShowStr>
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	08006d4c 	.word	0x08006d4c

080025f8 <button0_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	switch (button_st[0])
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <button0_fsm+0xa0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <button0_fsm+0x12>
 8002604:	2b01      	cmp	r3, #1
 8002606:	d034      	beq.n	8002672 <button0_fsm+0x7a>
 8002608:	e03f      	b.n	800268a <button0_fsm+0x92>
	{
	case release:
		if (is_button_pressed(0) == 1)
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe fbbe 	bl	8000d8c <is_button_pressed>
 8002610:	4603      	mov	r3, r0
 8002612:	2b01      	cmp	r3, #1
 8002614:	d125      	bne.n	8002662 <button0_fsm+0x6a>
		{
			// to do
			switch (st_clock)
 8002616:	4b21      	ldr	r3, [pc, #132]	; (800269c <button0_fsm+0xa4>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d018      	beq.n	8002650 <button0_fsm+0x58>
 800261e:	2b02      	cmp	r3, #2
 8002620:	dc19      	bgt.n	8002656 <button0_fsm+0x5e>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <button0_fsm+0x34>
 8002626:	2b01      	cmp	r3, #1
 8002628:	d009      	beq.n	800263e <button0_fsm+0x46>
 800262a:	e014      	b.n	8002656 <button0_fsm+0x5e>
			{
			case DISPLAY:
				display_all_clock();
 800262c:	f000 fada 	bl	8002be4 <display_all_clock>
				st_clock = CHANGE_TIME;
 8002630:	4b1a      	ldr	r3, [pc, #104]	; (800269c <button0_fsm+0xa4>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
				st_changing = SECOND;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <button0_fsm+0xa8>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
				break;
 800263c:	e00b      	b.n	8002656 <button0_fsm+0x5e>
			case CHANGE_TIME:
				display_all_alarm();
 800263e:	f000 fb53 	bl	8002ce8 <display_all_alarm>
				st_changing = SECOND;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <button0_fsm+0xa8>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
				st_clock = ALARM;
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <button0_fsm+0xa4>)
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
				break;
 800264e:	e002      	b.n	8002656 <button0_fsm+0x5e>
			case ALARM:
				st_clock = DISPLAY;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <button0_fsm+0xa4>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			}
			reset_str();
 8002656:	f7ff ffbb 	bl	80025d0 <reset_str>
			button_st[0] = pressed;
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <button0_fsm+0xa0>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
		}
		else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8002660:	e015      	b.n	800268e <button0_fsm+0x96>
		else if (is_button_pressed(0) == ERROR)
 8002662:	2000      	movs	r0, #0
 8002664:	f7fe fb92 	bl	8000d8c <is_button_pressed>
 8002668:	4603      	mov	r3, r0
 800266a:	2bff      	cmp	r3, #255	; 0xff
 800266c:	d10f      	bne.n	800268e <button0_fsm+0x96>
			return 0;
 800266e:	2300      	movs	r3, #0
 8002670:	e00f      	b.n	8002692 <button0_fsm+0x9a>
	case pressed:
		if (!is_button_pressed(0))
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fb8a 	bl	8000d8c <is_button_pressed>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <button0_fsm+0x8e>
			button_st[0] = release;
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <button0_fsm+0xa0>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
		else
			return 0;
		break;
 8002684:	e004      	b.n	8002690 <button0_fsm+0x98>
			return 0;
 8002686:	2300      	movs	r3, #0
 8002688:	e003      	b.n	8002692 <button0_fsm+0x9a>
	default:
		return 0;
 800268a:	2300      	movs	r3, #0
 800268c:	e001      	b.n	8002692 <button0_fsm+0x9a>
		break;
 800268e:	bf00      	nop
	}
	return 1;
 8002690:	2301      	movs	r3, #1
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000154 	.word	0x20000154
 800269c:	20000040 	.word	0x20000040
 80026a0:	20000041 	.word	0x20000041

080026a4 <button3_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button3_fsm(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	switch (button_st[3])
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <button3_fsm+0x5c>)
 80026aa:	78db      	ldrb	r3, [r3, #3]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <button3_fsm+0x12>
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d012      	beq.n	80026da <button3_fsm+0x36>
 80026b4:	e01d      	b.n	80026f2 <button3_fsm+0x4e>
	{
	case release:
		if (is_button_pressed(1) == 1)
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe fb68 	bl	8000d8c <is_button_pressed>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d103      	bne.n	80026ca <button3_fsm+0x26>
		{
			should_stop_alarm = 1;
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <button3_fsm+0x60>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
		}
		else if (is_button_pressed(1) == ERROR)
			return 0;
		break;
 80026c8:	e015      	b.n	80026f6 <button3_fsm+0x52>
		else if (is_button_pressed(1) == ERROR)
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7fe fb5e 	bl	8000d8c <is_button_pressed>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d10f      	bne.n	80026f6 <button3_fsm+0x52>
			return 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e00f      	b.n	80026fa <button3_fsm+0x56>
	case pressed:
		if (!is_button_pressed(1))
 80026da:	2001      	movs	r0, #1
 80026dc:	f7fe fb56 	bl	8000d8c <is_button_pressed>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <button3_fsm+0x4a>
			button_st[3] = release;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <button3_fsm+0x5c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	70da      	strb	r2, [r3, #3]
		else
			return 0;
		break;
 80026ec:	e004      	b.n	80026f8 <button3_fsm+0x54>
			return 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e003      	b.n	80026fa <button3_fsm+0x56>
	default:
		return 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e001      	b.n	80026fa <button3_fsm+0x56>
		break;
 80026f6:	bf00      	nop
	}
	return 1;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000154 	.word	0x20000154
 8002704:	20000042 	.word	0x20000042

08002708 <button2_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	switch (button_st[2])
 800270c:	4b60      	ldr	r3, [pc, #384]	; (8002890 <button2_fsm+0x188>)
 800270e:	789b      	ldrb	r3, [r3, #2]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <button2_fsm+0x14>
 8002714:	2b01      	cmp	r3, #1
 8002716:	f000 80a9 	beq.w	800286c <button2_fsm+0x164>
 800271a:	e0b3      	b.n	8002884 <button2_fsm+0x17c>
	{
	case release:
		if (is_button_pressed(12) == 1)
 800271c:	200c      	movs	r0, #12
 800271e:	f7fe fb35 	bl	8000d8c <is_button_pressed>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 8099 	bne.w	800285c <button2_fsm+0x154>
		{
			// to do
			if (st_clock == CHANGE_TIME)
 800272a:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <button2_fsm+0x18c>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d15d      	bne.n	80027ee <button2_fsm+0xe6>
			{
				switch (st_changing)
 8002732:	4b59      	ldr	r3, [pc, #356]	; (8002898 <button2_fsm+0x190>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b06      	cmp	r3, #6
 8002738:	d856      	bhi.n	80027e8 <button2_fsm+0xe0>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <button2_fsm+0x38>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	0800275d 	.word	0x0800275d
 8002744:	08002771 	.word	0x08002771
 8002748:	08002785 	.word	0x08002785
 800274c:	08002799 	.word	0x08002799
 8002750:	080027d5 	.word	0x080027d5
 8002754:	080027c1 	.word	0x080027c1
 8002758:	080027ad 	.word	0x080027ad
				{
				case SECOND:

					ds3231_Write(ADDRESS_SEC, buf_sec);
 800275c:	4b4f      	ldr	r3, [pc, #316]	; (800289c <button2_fsm+0x194>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fb92 	bl	8000e8c <ds3231_Write>
					st_changing = MINUTE;
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <button2_fsm+0x190>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
					break;
 800276e:	e03b      	b.n	80027e8 <button2_fsm+0xe0>
				case MINUTE:
					ds3231_Write(ADDRESS_MIN, buf_min);
 8002770:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <button2_fsm+0x198>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	2001      	movs	r0, #1
 8002778:	f7fe fb88 	bl	8000e8c <ds3231_Write>
					st_changing = HOUR;
 800277c:	4b46      	ldr	r3, [pc, #280]	; (8002898 <button2_fsm+0x190>)
 800277e:	2202      	movs	r2, #2
 8002780:	701a      	strb	r2, [r3, #0]
					break;
 8002782:	e031      	b.n	80027e8 <button2_fsm+0xe0>
				case HOUR:
					ds3231_Write(ADDRESS_HOUR, buf_hour);
 8002784:	4b47      	ldr	r3, [pc, #284]	; (80028a4 <button2_fsm+0x19c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	2002      	movs	r0, #2
 800278c:	f7fe fb7e 	bl	8000e8c <ds3231_Write>
					st_changing = DAY;
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <button2_fsm+0x190>)
 8002792:	2203      	movs	r2, #3
 8002794:	701a      	strb	r2, [r3, #0]
					break;
 8002796:	e027      	b.n	80027e8 <button2_fsm+0xe0>
				case DAY:
					ds3231_Write(ADDRESS_DAY, buf_day);
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <button2_fsm+0x1a0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	2003      	movs	r0, #3
 80027a0:	f7fe fb74 	bl	8000e8c <ds3231_Write>
					st_changing = YEAR;
 80027a4:	4b3c      	ldr	r3, [pc, #240]	; (8002898 <button2_fsm+0x190>)
 80027a6:	2206      	movs	r2, #6
 80027a8:	701a      	strb	r2, [r3, #0]
					break;
 80027aa:	e01d      	b.n	80027e8 <button2_fsm+0xe0>
				case YEAR:
					ds3231_Write(ADDRESS_YEAR, buf_year);
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <button2_fsm+0x1a4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	2006      	movs	r0, #6
 80027b4:	f7fe fb6a 	bl	8000e8c <ds3231_Write>
					st_changing = MONTH;
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <button2_fsm+0x190>)
 80027ba:	2205      	movs	r2, #5
 80027bc:	701a      	strb	r2, [r3, #0]
					break;
 80027be:	e013      	b.n	80027e8 <button2_fsm+0xe0>
				case MONTH:
					ds3231_Write(ADDRESS_MONTH, buf_mon);
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <button2_fsm+0x1a8>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	2005      	movs	r0, #5
 80027c8:	f7fe fb60 	bl	8000e8c <ds3231_Write>
					st_changing = DATE;
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <button2_fsm+0x190>)
 80027ce:	2204      	movs	r2, #4
 80027d0:	701a      	strb	r2, [r3, #0]
					break;
 80027d2:	e009      	b.n	80027e8 <button2_fsm+0xe0>
				case DATE:
					ds3231_Write(ADDRESS_DATE, buf_date);
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <button2_fsm+0x1ac>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	2004      	movs	r0, #4
 80027dc:	f7fe fb56 	bl	8000e8c <ds3231_Write>
					st_changing = SECOND;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <button2_fsm+0x190>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
					break;
 80027e6:	bf00      	nop
				}
				display_all_clock();
 80027e8:	f000 f9fc 	bl	8002be4 <display_all_clock>
 80027ec:	e032      	b.n	8002854 <button2_fsm+0x14c>
			}
			else
			{
				switch (st_changing)
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <button2_fsm+0x190>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d82c      	bhi.n	8002850 <button2_fsm+0x148>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <button2_fsm+0xf4>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002819 	.word	0x08002819
 8002800:	08002821 	.word	0x08002821
 8002804:	08002829 	.word	0x08002829
 8002808:	08002831 	.word	0x08002831
 800280c:	08002849 	.word	0x08002849
 8002810:	08002841 	.word	0x08002841
 8002814:	08002839 	.word	0x08002839
				{
				case SECOND:
					st_changing = MINUTE;
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <button2_fsm+0x190>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
					break;
 800281e:	e017      	b.n	8002850 <button2_fsm+0x148>
				case MINUTE:
					st_changing = HOUR;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <button2_fsm+0x190>)
 8002822:	2202      	movs	r2, #2
 8002824:	701a      	strb	r2, [r3, #0]
					break;
 8002826:	e013      	b.n	8002850 <button2_fsm+0x148>
				case HOUR:
					st_changing = DAY;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <button2_fsm+0x190>)
 800282a:	2203      	movs	r2, #3
 800282c:	701a      	strb	r2, [r3, #0]
					break;
 800282e:	e00f      	b.n	8002850 <button2_fsm+0x148>
				case DAY:
					st_changing = YEAR;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <button2_fsm+0x190>)
 8002832:	2206      	movs	r2, #6
 8002834:	701a      	strb	r2, [r3, #0]
					break;
 8002836:	e00b      	b.n	8002850 <button2_fsm+0x148>
				case YEAR:
					st_changing = MONTH;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <button2_fsm+0x190>)
 800283a:	2205      	movs	r2, #5
 800283c:	701a      	strb	r2, [r3, #0]
					break;
 800283e:	e007      	b.n	8002850 <button2_fsm+0x148>
				case MONTH:
					st_changing = DATE;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <button2_fsm+0x190>)
 8002842:	2204      	movs	r2, #4
 8002844:	701a      	strb	r2, [r3, #0]
					break;
 8002846:	e003      	b.n	8002850 <button2_fsm+0x148>
				case DATE:
					st_changing = SECOND;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <button2_fsm+0x190>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
					break;
 800284e:	bf00      	nop
				}
				display_all_alarm();
 8002850:	f000 fa4a 	bl	8002ce8 <display_all_alarm>
			}
			button_st[2] = pressed;
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <button2_fsm+0x188>)
 8002856:	2201      	movs	r2, #1
 8002858:	709a      	strb	r2, [r3, #2]
		}
		else if (is_button_pressed(12) == ERROR)
			return 0;
		break;
 800285a:	e015      	b.n	8002888 <button2_fsm+0x180>
		else if (is_button_pressed(12) == ERROR)
 800285c:	200c      	movs	r0, #12
 800285e:	f7fe fa95 	bl	8000d8c <is_button_pressed>
 8002862:	4603      	mov	r3, r0
 8002864:	2bff      	cmp	r3, #255	; 0xff
 8002866:	d10f      	bne.n	8002888 <button2_fsm+0x180>
			return 0;
 8002868:	2300      	movs	r3, #0
 800286a:	e00f      	b.n	800288c <button2_fsm+0x184>
	case pressed:
		if (!is_button_pressed(12))
 800286c:	200c      	movs	r0, #12
 800286e:	f7fe fa8d 	bl	8000d8c <is_button_pressed>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <button2_fsm+0x178>
		{
			button_st[2] = release;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <button2_fsm+0x188>)
 800287a:	2200      	movs	r2, #0
 800287c:	709a      	strb	r2, [r3, #2]
		}
		else
		{
			return 0;
		}
		break;
 800287e:	e004      	b.n	800288a <button2_fsm+0x182>
			return 0;
 8002880:	2300      	movs	r3, #0
 8002882:	e003      	b.n	800288c <button2_fsm+0x184>
	default:
		return 0;
 8002884:	2300      	movs	r3, #0
 8002886:	e001      	b.n	800288c <button2_fsm+0x184>
		break;
 8002888:	bf00      	nop
	}
	return 1;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000154 	.word	0x20000154
 8002894:	20000040 	.word	0x20000040
 8002898:	20000041 	.word	0x20000041
 800289c:	20000002 	.word	0x20000002
 80028a0:	20000003 	.word	0x20000003
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000005 	.word	0x20000005
 80028ac:	20000008 	.word	0x20000008
 80028b0:	20000007 	.word	0x20000007
 80028b4:	20000006 	.word	0x20000006

080028b8 <increase_value>:
 * @brief:	increase the value of number based on conditions
 * @para:	number - the value need to be risen
 * @retval:	none
 * */
void increase_value(uint8_t *number)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	switch (st_changing)
 80028c0:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <increase_value+0x164>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	f200 80a2 	bhi.w	8002a0e <increase_value+0x156>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <increase_value+0x18>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	080028ed 	.word	0x080028ed
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	08002909 	.word	0x08002909
 80028dc:	08002925 	.word	0x08002925
 80028e0:	08002979 	.word	0x08002979
 80028e4:	0800295d 	.word	0x0800295d
 80028e8:	08002941 	.word	0x08002941
	{
	case SECOND:
	case MINUTE:
		(*number)++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	701a      	strb	r2, [r3, #0]
		if (*number > 59)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b3b      	cmp	r3, #59	; 0x3b
 80028fe:	d97d      	bls.n	80029fc <increase_value+0x144>
			*number = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
		break;
 8002906:	e079      	b.n	80029fc <increase_value+0x144>
	case HOUR:
		(*number)++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	b2da      	uxtb	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	701a      	strb	r2, [r3, #0]
		if (*number > 23)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b17      	cmp	r3, #23
 800291a:	d971      	bls.n	8002a00 <increase_value+0x148>
			*number = 0;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
		break;
 8002922:	e06d      	b.n	8002a00 <increase_value+0x148>
	case DAY:
		(*number)++;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	701a      	strb	r2, [r3, #0]
		if (*number > 7)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b07      	cmp	r3, #7
 8002936:	d965      	bls.n	8002a04 <increase_value+0x14c>
			*number = 1;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
		break;
 800293e:	e061      	b.n	8002a04 <increase_value+0x14c>
	case YEAR:
		(*number)++;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b2da      	uxtb	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	701a      	strb	r2, [r3, #0]
		if (*number > 99)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b63      	cmp	r3, #99	; 0x63
 8002952:	d959      	bls.n	8002a08 <increase_value+0x150>
			*number = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
		break;
 800295a:	e055      	b.n	8002a08 <increase_value+0x150>
	case MONTH:
		(*number)++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	3301      	adds	r3, #1
 8002962:	b2da      	uxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	701a      	strb	r2, [r3, #0]
		if (*number > 12)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b0c      	cmp	r3, #12
 800296e:	d94d      	bls.n	8002a0c <increase_value+0x154>
			*number = 1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
		break;
 8002976:	e049      	b.n	8002a0c <increase_value+0x154>
	case DATE:
		(*number)++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	701a      	strb	r2, [r3, #0]
		uint8_t max_date = 30;
 8002984:	231e      	movs	r3, #30
 8002986:	73fb      	strb	r3, [r7, #15]
		switch (buf_mon)
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <increase_value+0x168>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	2b0b      	cmp	r3, #11
 8002990:	d82a      	bhi.n	80029e8 <increase_value+0x130>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <increase_value+0xe0>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029c9 	.word	0x080029c9
 800299c:	080029cf 	.word	0x080029cf
 80029a0:	080029c9 	.word	0x080029c9
 80029a4:	080029e9 	.word	0x080029e9
 80029a8:	080029c9 	.word	0x080029c9
 80029ac:	080029e9 	.word	0x080029e9
 80029b0:	080029c9 	.word	0x080029c9
 80029b4:	080029c9 	.word	0x080029c9
 80029b8:	080029e9 	.word	0x080029e9
 80029bc:	080029c9 	.word	0x080029c9
 80029c0:	080029e9 	.word	0x080029e9
 80029c4:	080029c9 	.word	0x080029c9
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			max_date = 31;
 80029c8:	231f      	movs	r3, #31
 80029ca:	73fb      	strb	r3, [r7, #15]
			break;
 80029cc:	e00d      	b.n	80029ea <increase_value+0x132>
		case 2:
			if (buf_year % 4)
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <increase_value+0x16c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <increase_value+0x12a>
				max_date = 28;
 80029dc:	231c      	movs	r3, #28
 80029de:	73fb      	strb	r3, [r7, #15]
			else
				max_date = 29;
			break;
 80029e0:	e003      	b.n	80029ea <increase_value+0x132>
				max_date = 29;
 80029e2:	231d      	movs	r3, #29
 80029e4:	73fb      	strb	r3, [r7, #15]
			break;
 80029e6:	e000      	b.n	80029ea <increase_value+0x132>
		default:
			break;
 80029e8:	bf00      	nop
		}
		if (*number > max_date)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d20c      	bcs.n	8002a0e <increase_value+0x156>
			*number = 1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
	}
}
 80029fa:	e008      	b.n	8002a0e <increase_value+0x156>
		break;
 80029fc:	bf00      	nop
 80029fe:	e006      	b.n	8002a0e <increase_value+0x156>
		break;
 8002a00:	bf00      	nop
 8002a02:	e004      	b.n	8002a0e <increase_value+0x156>
		break;
 8002a04:	bf00      	nop
 8002a06:	e002      	b.n	8002a0e <increase_value+0x156>
		break;
 8002a08:	bf00      	nop
 8002a0a:	e000      	b.n	8002a0e <increase_value+0x156>
		break;
 8002a0c:	bf00      	nop
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000041 	.word	0x20000041
 8002a20:	20000007 	.word	0x20000007
 8002a24:	20000008 	.word	0x20000008

08002a28 <button1_fsm>:
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(uint8_t *number)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	switch (button_st[1])
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <button1_fsm+0xbc>)
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d031      	beq.n	8002a9c <button1_fsm+0x74>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	dc49      	bgt.n	8002ad0 <button1_fsm+0xa8>
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <button1_fsm+0x1e>
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d015      	beq.n	8002a70 <button1_fsm+0x48>
 8002a44:	e044      	b.n	8002ad0 <button1_fsm+0xa8>
	{
	case release:
		if (is_button_pressed(3) == 1)
 8002a46:	2003      	movs	r0, #3
 8002a48:	f7fe f9a0 	bl	8000d8c <is_button_pressed>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d106      	bne.n	8002a60 <button1_fsm+0x38>
		{
			// to do
			increase_value(number);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff30 	bl	80028b8 <increase_value>
			button_st[1] = pressed;
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <button1_fsm+0xbc>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	705a      	strb	r2, [r3, #1]
		}
		else if (is_button_pressed(3) == ERROR)
			return 0;
		break;
 8002a5e:	e039      	b.n	8002ad4 <button1_fsm+0xac>
		else if (is_button_pressed(3) == ERROR)
 8002a60:	2003      	movs	r0, #3
 8002a62:	f7fe f993 	bl	8000d8c <is_button_pressed>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2bff      	cmp	r3, #255	; 0xff
 8002a6a:	d133      	bne.n	8002ad4 <button1_fsm+0xac>
			return 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e035      	b.n	8002adc <button1_fsm+0xb4>
	case pressed:
		if (!is_button_pressed(3))
 8002a70:	2003      	movs	r0, #3
 8002a72:	f7fe f98b 	bl	8000d8c <is_button_pressed>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d103      	bne.n	8002a84 <button1_fsm+0x5c>
		{
			button_st[1] = release;
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <button1_fsm+0xbc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	705a      	strb	r2, [r3, #1]
		}
		else
		{
			return 0;
		}
		break;
 8002a82:	e02a      	b.n	8002ada <button1_fsm+0xb2>
		else if (is_button_long_pressed(3) == 1)
 8002a84:	2003      	movs	r0, #3
 8002a86:	f7fe f99d 	bl	8000dc4 <is_button_long_pressed>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d103      	bne.n	8002a98 <button1_fsm+0x70>
			button_st[1] = long_pressed;
 8002a90:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <button1_fsm+0xbc>)
 8002a92:	2202      	movs	r2, #2
 8002a94:	705a      	strb	r2, [r3, #1]
		break;
 8002a96:	e020      	b.n	8002ada <button1_fsm+0xb2>
			return 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e01f      	b.n	8002adc <button1_fsm+0xb4>
	case long_pressed:
		// to do
		st_blinking = ON;
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <button1_fsm+0xc0>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
		if (!flag_timer(2))
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f000 fc8c 	bl	80033c0 <flag_timer>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <button1_fsm+0x94>
		{
			increase_value(number);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ff02 	bl	80028b8 <increase_value>
			set_timer(2, INCREASE_TIME);
 8002ab4:	21c8      	movs	r1, #200	; 0xc8
 8002ab6:	2002      	movs	r0, #2
 8002ab8:	f000 fc1a 	bl	80032f0 <set_timer>
		}
		if (!is_button_pressed(3))
 8002abc:	2003      	movs	r0, #3
 8002abe:	f7fe f965 	bl	8000d8c <is_button_pressed>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <button1_fsm+0xb0>
		{
			button_st[1] = release;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <button1_fsm+0xbc>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	705a      	strb	r2, [r3, #1]
		}
		break;
 8002ace:	e003      	b.n	8002ad8 <button1_fsm+0xb0>
	default:
		return 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e003      	b.n	8002adc <button1_fsm+0xb4>
		break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <button1_fsm+0xb2>
		break;
 8002ad8:	bf00      	nop
		break;
	}
	return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000154 	.word	0x20000154
 8002ae8:	20000158 	.word	0x20000158

08002aec <update_ds3231_register>:
 * @brief:	update the data of ds3231 for initial
 * @para:	none
 * @retval:	none
 * */
void update_ds3231_register(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_SEC, buf_sec);
 8002af0:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <update_ds3231_register+0x5c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4619      	mov	r1, r3
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f9c8 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_YEAR, buf_year);
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <update_ds3231_register+0x60>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	2006      	movs	r0, #6
 8002b04:	f7fe f9c2 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, buf_mon);
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <update_ds3231_register+0x64>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	2005      	movs	r0, #5
 8002b10:	f7fe f9bc 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, buf_date);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <update_ds3231_register+0x68>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2004      	movs	r0, #4
 8002b1c:	f7fe f9b6 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, buf_day);
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <update_ds3231_register+0x6c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2003      	movs	r0, #3
 8002b28:	f7fe f9b0 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, buf_hour);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <update_ds3231_register+0x70>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	2002      	movs	r0, #2
 8002b34:	f7fe f9aa 	bl	8000e8c <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, buf_min);
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <update_ds3231_register+0x74>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7fe f9a4 	bl	8000e8c <ds3231_Write>
}
 8002b44:	bf00      	nop
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000002 	.word	0x20000002
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20000007 	.word	0x20000007
 8002b54:	20000006 	.word	0x20000006
 8002b58:	20000005 	.word	0x20000005
 8002b5c:	20000004 	.word	0x20000004
 8002b60:	20000003 	.word	0x20000003

08002b64 <update_clock>:
 * @brief:	update the data of clock in display mode
 * @para:	none
 * @retval:	none
 * */
void update_clock(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	buf_sec = ds3231_sec;
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <update_clock+0x48>)
 8002b6a:	781a      	ldrb	r2, [r3, #0]
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <update_clock+0x4c>)
 8002b6e:	701a      	strb	r2, [r3, #0]
	buf_min = ds3231_min;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <update_clock+0x50>)
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <update_clock+0x54>)
 8002b76:	701a      	strb	r2, [r3, #0]
	buf_hour = ds3231_hours;
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <update_clock+0x58>)
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <update_clock+0x5c>)
 8002b7e:	701a      	strb	r2, [r3, #0]
	buf_day = ds3231_day;
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <update_clock+0x60>)
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <update_clock+0x64>)
 8002b86:	701a      	strb	r2, [r3, #0]
	buf_date = ds3231_date;
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <update_clock+0x68>)
 8002b8a:	781a      	ldrb	r2, [r3, #0]
 8002b8c:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <update_clock+0x6c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
	buf_mon = ds3231_month;
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <update_clock+0x70>)
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <update_clock+0x74>)
 8002b96:	701a      	strb	r2, [r3, #0]
	buf_year = ds3231_year;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <update_clock+0x78>)
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <update_clock+0x7c>)
 8002b9e:	701a      	strb	r2, [r3, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000064 	.word	0x20000064
 8002bb0:	20000002 	.word	0x20000002
 8002bb4:	20000066 	.word	0x20000066
 8002bb8:	20000003 	.word	0x20000003
 8002bbc:	20000069 	.word	0x20000069
 8002bc0:	20000004 	.word	0x20000004
 8002bc4:	20000068 	.word	0x20000068
 8002bc8:	20000005 	.word	0x20000005
 8002bcc:	20000067 	.word	0x20000067
 8002bd0:	20000006 	.word	0x20000006
 8002bd4:	2000006a 	.word	0x2000006a
 8002bd8:	20000007 	.word	0x20000007
 8002bdc:	20000065 	.word	0x20000065
 8002be0:	20000008 	.word	0x20000008

08002be4 <display_all_clock>:
 * @brief:	display all data of clock
 * @para:	none
 * @retval:	none
 * */
void display_all_clock(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	dis_date(buf_date, 1);
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <display_all_clock+0x5c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f9fc 	bl	8002fec <dis_date>
	dis_day(buf_day, 1);
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <display_all_clock+0x60>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f99c 	bl	8002f38 <dis_day>
	dis_hour(buf_hour, 1);
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <display_all_clock+0x64>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f958 	bl	8002ebc <dis_hour>
	dis_min(buf_min, 1);
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <display_all_clock+0x68>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f914 	bl	8002e40 <dis_min>
	dis_month(buf_mon, 1);
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <display_all_clock+0x6c>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fa22 	bl	8003068 <dis_month>
	dis_year(buf_year, 1);
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <display_all_clock+0x70>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2101      	movs	r1, #1
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 fa5a 	bl	80030e4 <dis_year>
	dis_sec(buf_sec, 1);
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <display_all_clock+0x74>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f8c4 	bl	8002dc4 <dis_sec>
}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000006 	.word	0x20000006
 8002c44:	20000005 	.word	0x20000005
 8002c48:	20000004 	.word	0x20000004
 8002c4c:	20000003 	.word	0x20000003
 8002c50:	20000007 	.word	0x20000007
 8002c54:	20000008 	.word	0x20000008
 8002c58:	20000002 	.word	0x20000002

08002c5c <display_mode>:
 * @brief:	display the current mode
 * @para:	none
 * @retval:	none
 * */
void display_mode(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af04      	add	r7, sp, #16
	switch (st_clock)
 8002c62:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <display_mode+0x7c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d024      	beq.n	8002cb4 <display_mode+0x58>
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	dc31      	bgt.n	8002cd2 <display_mode+0x76>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <display_mode+0x1c>
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d00f      	beq.n	8002c96 <display_mode+0x3a>
		break;
	case ALARM:
		lcd_ShowStr(20, 30, "MODE: SET ALARM", WHITE, RED, 24, 0);
		break;
	}
}
 8002c76:	e02c      	b.n	8002cd2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: DISPLAY", WHITE, RED, 24, 0);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2318      	movs	r3, #24
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c8a:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <display_mode+0x80>)
 8002c8c:	211e      	movs	r1, #30
 8002c8e:	2014      	movs	r0, #20
 8002c90:	f7fe ff7e 	bl	8001b90 <lcd_ShowStr>
		break;
 8002c94:	e01d      	b.n	8002cd2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: CHANGE TIME", WHITE, RED, 24, 0);
 8002c96:	2300      	movs	r3, #0
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2318      	movs	r3, #24
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <display_mode+0x84>)
 8002caa:	211e      	movs	r1, #30
 8002cac:	2014      	movs	r0, #20
 8002cae:	f7fe ff6f 	bl	8001b90 <lcd_ShowStr>
		break;
 8002cb2:	e00e      	b.n	8002cd2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: SET ALARM", WHITE, RED, 24, 0);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9302      	str	r3, [sp, #8]
 8002cb8:	2318      	movs	r3, #24
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <display_mode+0x88>)
 8002cc8:	211e      	movs	r1, #30
 8002cca:	2014      	movs	r0, #20
 8002ccc:	f7fe ff60 	bl	8001b90 <lcd_ShowStr>
		break;
 8002cd0:	bf00      	nop
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000040 	.word	0x20000040
 8002cdc:	08006d60 	.word	0x08006d60
 8002ce0:	08006d4c 	.word	0x08006d4c
 8002ce4:	08006d70 	.word	0x08006d70

08002ce8 <display_all_alarm>:
 * @brief:	display all data of alarm
 * @para:	none
 * @retval:	none
 * */
void display_all_alarm(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
	dis_date(ala_date, 1);
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <display_all_alarm+0x50>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f97a 	bl	8002fec <dis_date>
	dis_day(ala_day, 1);
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <display_all_alarm+0x54>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f91a 	bl	8002f38 <dis_day>
	dis_hour(ala_hour, 1);
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <display_all_alarm+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f8d6 	bl	8002ebc <dis_hour>
	dis_min(ala_min, 1);
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <display_all_alarm+0x5c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f892 	bl	8002e40 <dis_min>
	dis_month(ala_mon, 1);
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <display_all_alarm+0x60>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f9a0 	bl	8003068 <dis_month>
	dis_year(ala_year, 1);
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <display_all_alarm+0x64>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f9d8 	bl	80030e4 <dis_year>
}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	2000000c 	.word	0x2000000c
 8002d3c:	2000000b 	.word	0x2000000b
 8002d40:	2000000a 	.word	0x2000000a
 8002d44:	20000009 	.word	0x20000009
 8002d48:	2000000d 	.word	0x2000000d
 8002d4c:	2000000e 	.word	0x2000000e

08002d50 <init_box>:
	uint8_t x_month;
	uint8_t y_month;
	uint8_t x_year;
	uint8_t y_year;
} box;
void init_box() {
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
	box.text_color = GREEN;
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <init_box+0x70>)
 8002d56:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d5a:	601a      	str	r2, [r3, #0]
	box.background_color = BLACK;
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <init_box+0x70>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
	box.x_second = 150;
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <init_box+0x70>)
 8002d64:	2296      	movs	r2, #150	; 0x96
 8002d66:	721a      	strb	r2, [r3, #8]
	box.y_second = 100;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <init_box+0x70>)
 8002d6a:	2264      	movs	r2, #100	; 0x64
 8002d6c:	725a      	strb	r2, [r3, #9]
	box.x_minute = 110;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <init_box+0x70>)
 8002d70:	226e      	movs	r2, #110	; 0x6e
 8002d72:	729a      	strb	r2, [r3, #10]
	box.y_minute = 100;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <init_box+0x70>)
 8002d76:	2264      	movs	r2, #100	; 0x64
 8002d78:	72da      	strb	r2, [r3, #11]
	box.x_hour = 70;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <init_box+0x70>)
 8002d7c:	2246      	movs	r2, #70	; 0x46
 8002d7e:	731a      	strb	r2, [r3, #12]
	box.y_hour = 100;
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <init_box+0x70>)
 8002d82:	2264      	movs	r2, #100	; 0x64
 8002d84:	735a      	strb	r2, [r3, #13]
	box.x_day = 20;
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <init_box+0x70>)
 8002d88:	2214      	movs	r2, #20
 8002d8a:	739a      	strb	r2, [r3, #14]
	box.y_day = 154;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <init_box+0x70>)
 8002d8e:	229a      	movs	r2, #154	; 0x9a
 8002d90:	73da      	strb	r2, [r3, #15]
	box.x_date = 70;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <init_box+0x70>)
 8002d94:	2246      	movs	r2, #70	; 0x46
 8002d96:	741a      	strb	r2, [r3, #16]
	box.y_date = 154;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <init_box+0x70>)
 8002d9a:	229a      	movs	r2, #154	; 0x9a
 8002d9c:	745a      	strb	r2, [r3, #17]
	box.x_month = 110;
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <init_box+0x70>)
 8002da0:	226e      	movs	r2, #110	; 0x6e
 8002da2:	749a      	strb	r2, [r3, #18]
	box.y_month = 154;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <init_box+0x70>)
 8002da6:	229a      	movs	r2, #154	; 0x9a
 8002da8:	74da      	strb	r2, [r3, #19]
	box.x_year = 150;
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <init_box+0x70>)
 8002dac:	2296      	movs	r2, #150	; 0x96
 8002dae:	751a      	strb	r2, [r3, #20]
	box.y_year = 154;
 8002db0:	4b03      	ldr	r3, [pc, #12]	; (8002dc0 <init_box+0x70>)
 8002db2:	229a      	movs	r2, #154	; 0x9a
 8002db4:	755a      	strb	r2, [r3, #21]
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	2000015c 	.word	0x2000015c

08002dc4 <dis_sec>:
 * @brief  display second in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in seconds area
 * @retval none
 */
void dis_sec(uint8_t number, bool i) {
 8002dc4:	b5b0      	push	{r4, r5, r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460a      	mov	r2, r1
 8002dce:	71fb      	strb	r3, [r7, #7]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002dd4:	79bb      	ldrb	r3, [r7, #6]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <dis_sec+0x44>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <dis_sec+0x78>)
 8002ddc:	7a1b      	ldrb	r3, [r3, #8]
 8002dde:	b298      	uxth	r0, r3
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <dis_sec+0x78>)
 8002de2:	7a5b      	ldrb	r3, [r3, #9]
 8002de4:	b299      	uxth	r1, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	b29c      	uxth	r4, r3
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <dis_sec+0x78>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <dis_sec+0x78>)
 8002df2:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 8002df4:	b292      	uxth	r2, r2
 8002df6:	2518      	movs	r5, #24
 8002df8:	9502      	str	r5, [sp, #8]
 8002dfa:	9201      	str	r2, [sp, #4]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	4622      	mov	r2, r4
 8002e02:	f7fe fcc3 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
				box.background_color, box.background_color, 24);
}
 8002e06:	e015      	b.n	8002e34 <dis_sec+0x70>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <dis_sec+0x78>)
 8002e0a:	7a1b      	ldrb	r3, [r3, #8]
 8002e0c:	b298      	uxth	r0, r3
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <dis_sec+0x78>)
 8002e10:	7a5b      	ldrb	r3, [r3, #9]
 8002e12:	b299      	uxth	r1, r3
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <dis_sec+0x78>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002e1c:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <dis_sec+0x78>)
 8002e20:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8002e22:	b292      	uxth	r2, r2
 8002e24:	2518      	movs	r5, #24
 8002e26:	9502      	str	r5, [sp, #8]
 8002e28:	9201      	str	r2, [sp, #4]
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	4622      	mov	r2, r4
 8002e30:	f7fe fcac 	bl	800178c <lcd_ShowIntNum>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e3c:	2000015c 	.word	0x2000015c

08002e40 <dis_min>:
 * @brief  display minutes in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in minutes area
 * @retval none
 */
void dis_min(uint8_t number, bool i) {
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	4603      	mov	r3, r0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	71fb      	strb	r3, [r7, #7]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002e50:	79bb      	ldrb	r3, [r7, #6]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <dis_min+0x44>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <dis_min+0x78>)
 8002e58:	7a9b      	ldrb	r3, [r3, #10]
 8002e5a:	b298      	uxth	r0, r3
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <dis_min+0x78>)
 8002e5e:	7adb      	ldrb	r3, [r3, #11]
 8002e60:	b299      	uxth	r1, r3
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	b29c      	uxth	r4, r3
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <dis_min+0x78>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <dis_min+0x78>)
 8002e6e:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8002e70:	b292      	uxth	r2, r2
 8002e72:	2518      	movs	r5, #24
 8002e74:	9502      	str	r5, [sp, #8]
 8002e76:	9201      	str	r2, [sp, #4]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	f7fe fc85 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
				box.background_color, box.background_color, 24);

}
 8002e82:	e015      	b.n	8002eb0 <dis_min+0x70>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <dis_min+0x78>)
 8002e86:	7a9b      	ldrb	r3, [r3, #10]
 8002e88:	b298      	uxth	r0, r3
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <dis_min+0x78>)
 8002e8c:	7adb      	ldrb	r3, [r3, #11]
 8002e8e:	b299      	uxth	r1, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <dis_min+0x78>)
 8002e96:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002e98:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <dis_min+0x78>)
 8002e9c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	2518      	movs	r5, #24
 8002ea2:	9502      	str	r5, [sp, #8]
 8002ea4:	9201      	str	r2, [sp, #4]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	4622      	mov	r2, r4
 8002eac:	f7fe fc6e 	bl	800178c <lcd_ShowIntNum>
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb8:	2000015c 	.word	0x2000015c

08002ebc <dis_hour>:
 * @brief  display hours in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in hours area
 * @retval none
 */
void dis_hour(uint8_t number, bool i) {
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af04      	add	r7, sp, #16
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	71fb      	strb	r3, [r7, #7]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	71bb      	strb	r3, [r7, #6]
	if (i)
 8002ecc:	79bb      	ldrb	r3, [r7, #6]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d016      	beq.n	8002f00 <dis_hour+0x44>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 8002ed2:	4b18      	ldr	r3, [pc, #96]	; (8002f34 <dis_hour+0x78>)
 8002ed4:	7b1b      	ldrb	r3, [r3, #12]
 8002ed6:	b298      	uxth	r0, r3
 8002ed8:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <dis_hour+0x78>)
 8002eda:	7b5b      	ldrb	r3, [r3, #13]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	b29c      	uxth	r4, r3
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <dis_hour+0x78>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <dis_hour+0x78>)
 8002eea:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 8002eec:	b292      	uxth	r2, r2
 8002eee:	2518      	movs	r5, #24
 8002ef0:	9502      	str	r5, [sp, #8]
 8002ef2:	9201      	str	r2, [sp, #4]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	4622      	mov	r2, r4
 8002efa:	f7fe fc47 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
				box.background_color, 24);
}
 8002efe:	e015      	b.n	8002f2c <dis_hour+0x70>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <dis_hour+0x78>)
 8002f02:	7b1b      	ldrb	r3, [r3, #12]
 8002f04:	b298      	uxth	r0, r3
 8002f06:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <dis_hour+0x78>)
 8002f08:	7b5b      	ldrb	r3, [r3, #13]
 8002f0a:	b299      	uxth	r1, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	b29c      	uxth	r4, r3
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <dis_hour+0x78>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002f16:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <dis_hour+0x78>)
 8002f18:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	2518      	movs	r5, #24
 8002f1e:	9502      	str	r5, [sp, #8]
 8002f20:	9201      	str	r2, [sp, #4]
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2302      	movs	r3, #2
 8002f26:	4622      	mov	r2, r4
 8002f28:	f7fe fc30 	bl	800178c <lcd_ShowIntNum>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}
 8002f34:	2000015c 	.word	0x2000015c

08002f38 <dis_day>:
 * @brief  display day in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in day area
 * @retval none
 */
void dis_day(uint8_t number, bool i) {
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af04      	add	r7, sp, #16
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460a      	mov	r2, r1
 8002f42:	71fb      	strb	r3, [r7, #7]
 8002f44:	4613      	mov	r3, r2
 8002f46:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_day, box.y_day - 5, ": Day", box.text_color, box.background_color, 24, 0);
	if (i){
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d02f      	beq.n	8002fae <dis_day+0x76>
		if(number != 1)
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d016      	beq.n	8002f82 <dis_day+0x4a>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <dis_day+0xac>)
 8002f56:	7b9b      	ldrb	r3, [r3, #14]
 8002f58:	b298      	uxth	r0, r3
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <dis_day+0xac>)
 8002f5c:	7bdb      	ldrb	r3, [r3, #15]
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	b29c      	uxth	r4, r3
 8002f64:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <dis_day+0xac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
						box.background_color, 24);
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <dis_day+0xac>)
 8002f6c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	2518      	movs	r5, #24
 8002f72:	9502      	str	r5, [sp, #8]
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	f7fe fc06 	bl	800178c <lcd_ShowIntNum>
					box.background_color, 24, 0);
	}
	else
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
				box.background_color, 24);
}
 8002f80:	e02b      	b.n	8002fda <dis_day+0xa2>
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8002f82:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <dis_day+0xac>)
 8002f84:	7b9b      	ldrb	r3, [r3, #14]
 8002f86:	b298      	uxth	r0, r3
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <dis_day+0xac>)
 8002f8a:	7bdb      	ldrb	r3, [r3, #15]
 8002f8c:	b299      	uxth	r1, r3
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <dis_day+0xac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	b29a      	uxth	r2, r3
					box.background_color, 24, 0);
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <dis_day+0xac>)
 8002f96:	685b      	ldr	r3, [r3, #4]
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2400      	movs	r4, #0
 8002f9c:	9402      	str	r4, [sp, #8]
 8002f9e:	2418      	movs	r4, #24
 8002fa0:	9401      	str	r4, [sp, #4]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <dis_day+0xb0>)
 8002fa8:	f7fe fdf2 	bl	8001b90 <lcd_ShowStr>
}
 8002fac:	e015      	b.n	8002fda <dis_day+0xa2>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <dis_day+0xac>)
 8002fb0:	7b9b      	ldrb	r3, [r3, #14]
 8002fb2:	b298      	uxth	r0, r3
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <dis_day+0xac>)
 8002fb6:	7bdb      	ldrb	r3, [r3, #15]
 8002fb8:	b299      	uxth	r1, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	b29c      	uxth	r4, r3
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <dis_day+0xac>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8002fc4:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <dis_day+0xac>)
 8002fc6:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	2518      	movs	r5, #24
 8002fcc:	9502      	str	r5, [sp, #8]
 8002fce:	9201      	str	r2, [sp, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	f7fe fbd9 	bl	800178c <lcd_ShowIntNum>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000015c 	.word	0x2000015c
 8002fe8:	08006d80 	.word	0x08006d80

08002fec <dis_date>:
 * @brief  display dates in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in dates area
 * @retval none
 */
void dis_date(uint8_t number, bool i) {
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	71fb      	strb	r3, [r7, #7]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_date, box.y_date - 5, ": Date", box.text_color, box.background_color, 24, 0);
	if (i)
 8002ffc:	79bb      	ldrb	r3, [r7, #6]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d016      	beq.n	8003030 <dis_date+0x44>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <dis_date+0x78>)
 8003004:	7c1b      	ldrb	r3, [r3, #16]
 8003006:	b298      	uxth	r0, r3
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <dis_date+0x78>)
 800300a:	7c5b      	ldrb	r3, [r3, #17]
 800300c:	b299      	uxth	r1, r3
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	b29c      	uxth	r4, r3
 8003012:	4b14      	ldr	r3, [pc, #80]	; (8003064 <dis_date+0x78>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <dis_date+0x78>)
 800301a:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 800301c:	b292      	uxth	r2, r2
 800301e:	2518      	movs	r5, #24
 8003020:	9502      	str	r5, [sp, #8]
 8003022:	9201      	str	r2, [sp, #4]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2302      	movs	r3, #2
 8003028:	4622      	mov	r2, r4
 800302a:	f7fe fbaf 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
				box.background_color, 24);
}
 800302e:	e015      	b.n	800305c <dis_date+0x70>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <dis_date+0x78>)
 8003032:	7c1b      	ldrb	r3, [r3, #16]
 8003034:	b298      	uxth	r0, r3
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <dis_date+0x78>)
 8003038:	7c5b      	ldrb	r3, [r3, #17]
 800303a:	b299      	uxth	r1, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	b29c      	uxth	r4, r3
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <dis_date+0x78>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003046:	4a07      	ldr	r2, [pc, #28]	; (8003064 <dis_date+0x78>)
 8003048:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 800304a:	b292      	uxth	r2, r2
 800304c:	2518      	movs	r5, #24
 800304e:	9502      	str	r5, [sp, #8]
 8003050:	9201      	str	r2, [sp, #4]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2302      	movs	r3, #2
 8003056:	4622      	mov	r2, r4
 8003058:	f7fe fb98 	bl	800178c <lcd_ShowIntNum>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bdb0      	pop	{r4, r5, r7, pc}
 8003064:	2000015c 	.word	0x2000015c

08003068 <dis_month>:
 * @brief  display months in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in months area
 * @retval none
 */
void dis_month(uint8_t number, bool i) {
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af04      	add	r7, sp, #16
 800306e:	4603      	mov	r3, r0
 8003070:	460a      	mov	r2, r1
 8003072:	71fb      	strb	r3, [r7, #7]
 8003074:	4613      	mov	r3, r2
 8003076:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_month, box.y_month - 5, ": Month", box.text_color, box.background_color, 24, 0);
	if (i)
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <dis_month+0x44>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 800307e:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <dis_month+0x78>)
 8003080:	7c9b      	ldrb	r3, [r3, #18]
 8003082:	b298      	uxth	r0, r3
 8003084:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <dis_month+0x78>)
 8003086:	7cdb      	ldrb	r3, [r3, #19]
 8003088:	b299      	uxth	r1, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	b29c      	uxth	r4, r3
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <dis_month+0x78>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <dis_month+0x78>)
 8003096:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 8003098:	b292      	uxth	r2, r2
 800309a:	2518      	movs	r5, #24
 800309c:	9502      	str	r5, [sp, #8]
 800309e:	9201      	str	r2, [sp, #4]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2302      	movs	r3, #2
 80030a4:	4622      	mov	r2, r4
 80030a6:	f7fe fb71 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
				box.background_color, 24);
}
 80030aa:	e015      	b.n	80030d8 <dis_month+0x70>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <dis_month+0x78>)
 80030ae:	7c9b      	ldrb	r3, [r3, #18]
 80030b0:	b298      	uxth	r0, r3
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <dis_month+0x78>)
 80030b4:	7cdb      	ldrb	r3, [r3, #19]
 80030b6:	b299      	uxth	r1, r3
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	b29c      	uxth	r4, r3
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <dis_month+0x78>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <dis_month+0x78>)
 80030c4:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 80030c6:	b292      	uxth	r2, r2
 80030c8:	2518      	movs	r5, #24
 80030ca:	9502      	str	r5, [sp, #8]
 80030cc:	9201      	str	r2, [sp, #4]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2302      	movs	r3, #2
 80030d2:	4622      	mov	r2, r4
 80030d4:	f7fe fb5a 	bl	800178c <lcd_ShowIntNum>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bdb0      	pop	{r4, r5, r7, pc}
 80030e0:	2000015c 	.word	0x2000015c

080030e4 <dis_year>:
 * @brief  display years in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in years area
 * @retval none
 */
void dis_year(uint8_t number, bool i) {
 80030e4:	b5b0      	push	{r4, r5, r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	4603      	mov	r3, r0
 80030ec:	460a      	mov	r2, r1
 80030ee:	71fb      	strb	r3, [r7, #7]
 80030f0:	4613      	mov	r3, r2
 80030f2:	71bb      	strb	r3, [r7, #6]
	if (i)
 80030f4:	79bb      	ldrb	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <dis_year+0x44>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 80030fa:	4b18      	ldr	r3, [pc, #96]	; (800315c <dis_year+0x78>)
 80030fc:	7d1b      	ldrb	r3, [r3, #20]
 80030fe:	b298      	uxth	r0, r3
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <dis_year+0x78>)
 8003102:	7d5b      	ldrb	r3, [r3, #21]
 8003104:	b299      	uxth	r1, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29c      	uxth	r4, r3
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <dis_year+0x78>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <dis_year+0x78>)
 8003112:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 8003114:	b292      	uxth	r2, r2
 8003116:	2518      	movs	r5, #24
 8003118:	9502      	str	r5, [sp, #8]
 800311a:	9201      	str	r2, [sp, #4]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2302      	movs	r3, #2
 8003120:	4622      	mov	r2, r4
 8003122:	f7fe fb33 	bl	800178c <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
				box.background_color, 24);
}
 8003126:	e015      	b.n	8003154 <dis_year+0x70>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <dis_year+0x78>)
 800312a:	7d1b      	ldrb	r3, [r3, #20]
 800312c:	b298      	uxth	r0, r3
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <dis_year+0x78>)
 8003130:	7d5b      	ldrb	r3, [r3, #21]
 8003132:	b299      	uxth	r1, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	b29c      	uxth	r4, r3
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <dis_year+0x78>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <dis_year+0x78>)
 8003140:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 8003142:	b292      	uxth	r2, r2
 8003144:	2518      	movs	r5, #24
 8003146:	9502      	str	r5, [sp, #8]
 8003148:	9201      	str	r2, [sp, #4]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2302      	movs	r3, #2
 800314e:	4622      	mov	r2, r4
 8003150:	f7fe fb1c 	bl	800178c <lcd_ShowIntNum>
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bdb0      	pop	{r4, r5, r7, pc}
 800315c:	2000015c 	.word	0x2000015c

08003160 <display_text>:

void display_text(void){
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f9d2 	bl	8001510 <lcd_Clear>

	lcd_ShowStr(box.x_day, box.y_day - 24, "Day", box.text_color, box.background_color, 24, 0);
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <display_text+0x15c>)
 800316e:	7b9b      	ldrb	r3, [r3, #14]
 8003170:	b298      	uxth	r0, r3
 8003172:	4b52      	ldr	r3, [pc, #328]	; (80032bc <display_text+0x15c>)
 8003174:	7bdb      	ldrb	r3, [r3, #15]
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b18      	subs	r3, #24
 800317a:	b299      	uxth	r1, r3
 800317c:	4b4f      	ldr	r3, [pc, #316]	; (80032bc <display_text+0x15c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <display_text+0x15c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	b29b      	uxth	r3, r3
 8003188:	2400      	movs	r4, #0
 800318a:	9402      	str	r4, [sp, #8]
 800318c:	2418      	movs	r4, #24
 800318e:	9401      	str	r4, [sp, #4]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	4a4a      	ldr	r2, [pc, #296]	; (80032c0 <display_text+0x160>)
 8003196:	f7fe fcfb 	bl	8001b90 <lcd_ShowStr>
	lcd_ShowStr(box.x_second, box.y_second - 24, "sec", box.text_color, box.background_color, 24, 0);
 800319a:	4b48      	ldr	r3, [pc, #288]	; (80032bc <display_text+0x15c>)
 800319c:	7a1b      	ldrb	r3, [r3, #8]
 800319e:	b298      	uxth	r0, r3
 80031a0:	4b46      	ldr	r3, [pc, #280]	; (80032bc <display_text+0x15c>)
 80031a2:	7a5b      	ldrb	r3, [r3, #9]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b18      	subs	r3, #24
 80031a8:	b299      	uxth	r1, r3
 80031aa:	4b44      	ldr	r3, [pc, #272]	; (80032bc <display_text+0x15c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	4b42      	ldr	r3, [pc, #264]	; (80032bc <display_text+0x15c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2400      	movs	r4, #0
 80031b8:	9402      	str	r4, [sp, #8]
 80031ba:	2418      	movs	r4, #24
 80031bc:	9401      	str	r4, [sp, #4]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <display_text+0x164>)
 80031c4:	f7fe fce4 	bl	8001b90 <lcd_ShowStr>
	lcd_ShowStr(box.x_minute, box.y_minute - 24, "min", box.text_color, box.background_color, 24, 0);
 80031c8:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <display_text+0x15c>)
 80031ca:	7a9b      	ldrb	r3, [r3, #10]
 80031cc:	b298      	uxth	r0, r3
 80031ce:	4b3b      	ldr	r3, [pc, #236]	; (80032bc <display_text+0x15c>)
 80031d0:	7adb      	ldrb	r3, [r3, #11]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b18      	subs	r3, #24
 80031d6:	b299      	uxth	r1, r3
 80031d8:	4b38      	ldr	r3, [pc, #224]	; (80032bc <display_text+0x15c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	4b37      	ldr	r3, [pc, #220]	; (80032bc <display_text+0x15c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2400      	movs	r4, #0
 80031e6:	9402      	str	r4, [sp, #8]
 80031e8:	2418      	movs	r4, #24
 80031ea:	9401      	str	r4, [sp, #4]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4613      	mov	r3, r2
 80031f0:	4a35      	ldr	r2, [pc, #212]	; (80032c8 <display_text+0x168>)
 80031f2:	f7fe fccd 	bl	8001b90 <lcd_ShowStr>
	lcd_ShowStr(box.x_hour - 24, box.y_hour - 24, "hour", box.text_color, box.background_color, 24, 0);
 80031f6:	4b31      	ldr	r3, [pc, #196]	; (80032bc <display_text+0x15c>)
 80031f8:	7b1b      	ldrb	r3, [r3, #12]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b18      	subs	r3, #24
 80031fe:	b298      	uxth	r0, r3
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <display_text+0x15c>)
 8003202:	7b5b      	ldrb	r3, [r3, #13]
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b18      	subs	r3, #24
 8003208:	b299      	uxth	r1, r3
 800320a:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <display_text+0x15c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <display_text+0x15c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	b29b      	uxth	r3, r3
 8003216:	2400      	movs	r4, #0
 8003218:	9402      	str	r4, [sp, #8]
 800321a:	2418      	movs	r4, #24
 800321c:	9401      	str	r4, [sp, #4]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <display_text+0x16c>)
 8003224:	f7fe fcb4 	bl	8001b90 <lcd_ShowStr>

	lcd_ShowStr(box.x_date, box.y_date - 24, "DD", box.text_color, box.background_color, 24, 0);
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <display_text+0x15c>)
 800322a:	7c1b      	ldrb	r3, [r3, #16]
 800322c:	b298      	uxth	r0, r3
 800322e:	4b23      	ldr	r3, [pc, #140]	; (80032bc <display_text+0x15c>)
 8003230:	7c5b      	ldrb	r3, [r3, #17]
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b18      	subs	r3, #24
 8003236:	b299      	uxth	r1, r3
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <display_text+0x15c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b1f      	ldr	r3, [pc, #124]	; (80032bc <display_text+0x15c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	b29b      	uxth	r3, r3
 8003244:	2400      	movs	r4, #0
 8003246:	9402      	str	r4, [sp, #8]
 8003248:	2418      	movs	r4, #24
 800324a:	9401      	str	r4, [sp, #4]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <display_text+0x170>)
 8003252:	f7fe fc9d 	bl	8001b90 <lcd_ShowStr>
	lcd_ShowStr(box.x_month, box.y_month - 24, "MM", box.text_color, box.background_color, 24, 0);
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <display_text+0x15c>)
 8003258:	7c9b      	ldrb	r3, [r3, #18]
 800325a:	b298      	uxth	r0, r3
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <display_text+0x15c>)
 800325e:	7cdb      	ldrb	r3, [r3, #19]
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b18      	subs	r3, #24
 8003264:	b299      	uxth	r1, r3
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <display_text+0x15c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <display_text+0x15c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	b29b      	uxth	r3, r3
 8003272:	2400      	movs	r4, #0
 8003274:	9402      	str	r4, [sp, #8]
 8003276:	2418      	movs	r4, #24
 8003278:	9401      	str	r4, [sp, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <display_text+0x174>)
 8003280:	f7fe fc86 	bl	8001b90 <lcd_ShowStr>
	lcd_ShowStr(box.x_year, box.y_year - 24, "YY", box.text_color, box.background_color, 24, 0);
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <display_text+0x15c>)
 8003286:	7d1b      	ldrb	r3, [r3, #20]
 8003288:	b298      	uxth	r0, r3
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <display_text+0x15c>)
 800328c:	7d5b      	ldrb	r3, [r3, #21]
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b18      	subs	r3, #24
 8003292:	b299      	uxth	r1, r3
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <display_text+0x15c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b29a      	uxth	r2, r3
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <display_text+0x15c>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2400      	movs	r4, #0
 80032a2:	9402      	str	r4, [sp, #8]
 80032a4:	2418      	movs	r4, #24
 80032a6:	9401      	str	r4, [sp, #4]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <display_text+0x178>)
 80032ae:	f7fe fc6f 	bl	8001b90 <lcd_ShowStr>
}
 80032b2:	bf00      	nop
 80032b4:	3704      	adds	r7, #4
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	bf00      	nop
 80032bc:	2000015c 	.word	0x2000015c
 80032c0:	08006d84 	.word	0x08006d84
 80032c4:	08006d88 	.word	0x08006d88
 80032c8:	08006d8c 	.word	0x08006d8c
 80032cc:	08006d90 	.word	0x08006d90
 80032d0:	08006d98 	.word	0x08006d98
 80032d4:	08006d9c 	.word	0x08006d9c
 80032d8:	08006da0 	.word	0x08006da0

080032dc <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <timer_init+0x10>)
 80032e2:	f002 fff5 	bl	80062d0 <HAL_TIM_Base_Start_IT>
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200001e4 	.word	0x200001e4

080032f0 <set_timer>:

void set_timer(unsigned i, unsigned int time) {
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f8a1 	bl	800044c <__aeabi_ui2d>
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <set_timer+0x50>)
 8003310:	f7fd fa40 	bl	8000794 <__aeabi_ddiv>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	f7fd fb22 	bl	8000964 <__aeabi_d2uiz>
 8003320:	4602      	mov	r2, r0
 8003322:	4908      	ldr	r1, [pc, #32]	; (8003344 <set_timer+0x54>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <set_timer+0x54>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2101      	movs	r1, #1
 8003332:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	408f4000 	.word	0x408f4000
 8003344:	20000174 	.word	0x20000174

08003348 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
	run_timer();
 8003350:	f000 f804 	bl	800335c <run_timer>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <run_timer>:

void run_timer(void) {
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	e01f      	b.n	80033a8 <run_timer+0x4c>
		if (timer[i].state) {
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <run_timer+0x60>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d016      	beq.n	80033a2 <run_timer+0x46>
			timer[i].count--;
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <run_timer+0x60>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	1e5a      	subs	r2, r3, #1
 8003380:	490e      	ldr	r1, [pc, #56]	; (80033bc <run_timer+0x60>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <run_timer+0x60>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <run_timer+0x46>
				timer[i].state = 0;
 8003398:	4a08      	ldr	r2, [pc, #32]	; (80033bc <run_timer+0x60>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2100      	movs	r1, #0
 800339e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3301      	adds	r3, #1
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d9dc      	bls.n	8003368 <run_timer+0xc>
			}
		}
	}
}
 80033ae:	bf00      	nop
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000174 	.word	0x20000174

080033c0 <flag_timer>:

bool flag_timer(unsigned i) {
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <flag_timer+0x28>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000174 	.word	0x20000174

080033ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <MX_SPI1_Init+0x64>)
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <MX_SPI1_Init+0x68>)
 80033f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <MX_SPI1_Init+0x64>)
 80033f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_SPI1_Init+0x64>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <MX_SPI1_Init+0x64>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_SPI1_Init+0x64>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <MX_SPI1_Init+0x64>)
 8003412:	2200      	movs	r2, #0
 8003414:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_SPI1_Init+0x64>)
 8003418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800341e:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <MX_SPI1_Init+0x64>)
 8003420:	2200      	movs	r2, #0
 8003422:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003424:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <MX_SPI1_Init+0x64>)
 8003426:	2200      	movs	r2, #0
 8003428:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <MX_SPI1_Init+0x64>)
 800342c:	2200      	movs	r2, #0
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <MX_SPI1_Init+0x64>)
 8003432:	2200      	movs	r2, #0
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <MX_SPI1_Init+0x64>)
 8003438:	220a      	movs	r2, #10
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800343c:	4804      	ldr	r0, [pc, #16]	; (8003450 <MX_SPI1_Init+0x64>)
 800343e:	f002 fa47 	bl	80058d0 <HAL_SPI_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003448:	f7fe fcb2 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800344c:	bf00      	nop
 800344e:	bd80      	pop	{r7, pc}
 8003450:	2000018c 	.word	0x2000018c
 8003454:	40013000 	.word	0x40013000

08003458 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <HAL_SPI_MspInit+0x84>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12b      	bne.n	80034d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 8003484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003488:	6453      	str	r3, [r2, #68]	; 0x44
 800348a:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a10      	ldr	r2, [pc, #64]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <HAL_SPI_MspInit+0x88>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80034b2:	2338      	movs	r3, #56	; 0x38
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c2:	2305      	movs	r3, #5
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	4805      	ldr	r0, [pc, #20]	; (80034e4 <HAL_SPI_MspInit+0x8c>)
 80034ce:	f000 fafb 	bl	8003ac8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034d2:	bf00      	nop
 80034d4:	3728      	adds	r7, #40	; 0x28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40013000 	.word	0x40013000
 80034e0:	40023800 	.word	0x40023800
 80034e4:	40020400 	.word	0x40020400

080034e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_MspInit+0x4c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_MspInit+0x4c>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_MspInit+0x4c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_MspInit+0x4c>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_MspInit+0x4c>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_MspInit+0x4c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800353c:	e7fe      	b.n	800353c <NMI_Handler+0x4>

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <MemManage_Handler+0x4>

0800354a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <BusFault_Handler+0x4>

08003550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <UsageFault_Handler+0x4>

08003556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003584:	f000 f94a 	bl	800381c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}

0800358c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <TIM2_IRQHandler+0x10>)
 8003592:	f002 ff0d 	bl	80063b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200001e4 	.word	0x200001e4

080035a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <SystemInit+0x20>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <SystemInit+0x20>)
 80035ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d8:	463b      	mov	r3, r7
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	; (8003658 <MX_TIM2_Init+0x94>)
 80035e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <MX_TIM2_Init+0x94>)
 80035ea:	f240 3247 	movw	r2, #839	; 0x347
 80035ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <MX_TIM2_Init+0x94>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <MX_TIM2_Init+0x94>)
 80035f8:	2263      	movs	r2, #99	; 0x63
 80035fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035fc:	4b16      	ldr	r3, [pc, #88]	; (8003658 <MX_TIM2_Init+0x94>)
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <MX_TIM2_Init+0x94>)
 8003604:	2200      	movs	r2, #0
 8003606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003608:	4813      	ldr	r0, [pc, #76]	; (8003658 <MX_TIM2_Init+0x94>)
 800360a:	f002 fe11 	bl	8006230 <HAL_TIM_Base_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003614:	f7fe fbcc 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	4619      	mov	r1, r3
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <MX_TIM2_Init+0x94>)
 8003626:	f002 ffcb 	bl	80065c0 <HAL_TIM_ConfigClockSource>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003630:	f7fe fbbe 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003634:	2300      	movs	r3, #0
 8003636:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800363c:	463b      	mov	r3, r7
 800363e:	4619      	mov	r1, r3
 8003640:	4805      	ldr	r0, [pc, #20]	; (8003658 <MX_TIM2_Init+0x94>)
 8003642:	f003 f9e7 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800364c:	f7fe fbb0 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200001e4 	.word	0x200001e4

0800365c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d115      	bne.n	800369a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_TIM_Base_MspInit+0x48>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_TIM_Base_MspInit+0x48>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_TIM_Base_MspInit+0x48>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800368a:	2200      	movs	r2, #0
 800368c:	2100      	movs	r1, #0
 800368e:	201c      	movs	r0, #28
 8003690:	f000 f9e3 	bl	8003a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003694:	201c      	movs	r0, #28
 8003696:	f000 f9fc 	bl	8003a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	0092      	lsls	r2, r2, #2
 80036bc:	4413      	add	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	b2db      	uxtb	r3, r3
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <DEC2BCD+0x44>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	08db      	lsrs	r3, r3, #3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	b258      	sxtb	r0, r3
 80036f6:	79fa      	ldrb	r2, [r7, #7]
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <DEC2BCD+0x44>)
 80036fa:	fba3 1302 	umull	r1, r3, r3, r2
 80036fe:	08d9      	lsrs	r1, r3, #3
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	b25b      	sxtb	r3, r3
 800370e:	4303      	orrs	r3, r0
 8003710:	b25b      	sxtb	r3, r3
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	cccccccd 	.word	0xcccccccd

08003724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800375c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800372a:	490e      	ldr	r1, [pc, #56]	; (8003764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003740:	4c0b      	ldr	r4, [pc, #44]	; (8003770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800374e:	f7ff ff27 	bl	80035a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003752:	f003 fabf 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003756:	f7fe fa7f 	bl	8001c58 <main>
  bx  lr    
 800375a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800375c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003764:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003768:	08009d4c 	.word	0x08009d4c
  ldr r2, =_sbss
 800376c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003770:	20000230 	.word	0x20000230

08003774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003774:	e7fe      	b.n	8003774 <ADC_IRQHandler>
	...

08003778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_Init+0x40>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <HAL_Init+0x40>)
 8003782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_Init+0x40>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_Init+0x40>)
 800378e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <HAL_Init+0x40>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a0:	2003      	movs	r0, #3
 80037a2:	f000 f94f 	bl	8003a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a6:	200f      	movs	r0, #15
 80037a8:	f000 f808 	bl	80037bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037ac:	f7ff fe9c 	bl	80034e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023c00 	.word	0x40023c00

080037bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_InitTick+0x54>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_InitTick+0x58>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f967 	bl	8003aae <HAL_SYSTICK_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00e      	b.n	8003808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d80a      	bhi.n	8003806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f0:	2200      	movs	r2, #0
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f000 f92f 	bl	8003a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <HAL_InitTick+0x5c>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000010 	.word	0x20000010
 8003814:	20000018 	.word	0x20000018
 8003818:	20000014 	.word	0x20000014

0800381c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_IncTick+0x20>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_IncTick+0x24>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_IncTick+0x24>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000018 	.word	0x20000018
 8003840:	2000022c 	.word	0x2000022c

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_GetTick+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	2000022c 	.word	0x2000022c

0800385c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003864:	f7ff ffee 	bl	8003844 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d005      	beq.n	8003882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_Delay+0x44>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003882:	bf00      	nop
 8003884:	f7ff ffde 	bl	8003844 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d8f7      	bhi.n	8003884 <HAL_Delay+0x28>
  {
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000018 	.word	0x20000018

080038a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d6:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	60d3      	str	r3, [r2, #12]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__NVIC_GetPriorityGrouping+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0307 	and.w	r3, r3, #7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db0b      	blt.n	8003932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	4907      	ldr	r1, [pc, #28]	; (8003940 <__NVIC_EnableIRQ+0x38>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2001      	movs	r0, #1
 800392a:	fa00 f202 	lsl.w	r2, r0, r2
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	; (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f1c3 0307 	rsb	r3, r3, #7
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf28      	it	cs
 80039b6:	2304      	movcs	r3, #4
 80039b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3304      	adds	r3, #4
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <NVIC_EncodePriority+0x30>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3b03      	subs	r3, #3
 80039c6:	e000      	b.n	80039ca <NVIC_EncodePriority+0x32>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	4313      	orrs	r3, r2
         );
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	; 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a10:	d301      	bcc.n	8003a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00f      	b.n	8003a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a16:	4a0a      	ldr	r2, [pc, #40]	; (8003a40 <SysTick_Config+0x40>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a1e:	210f      	movs	r1, #15
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	f7ff ff8e 	bl	8003944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <SysTick_Config+0x40>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <SysTick_Config+0x40>)
 8003a30:	2207      	movs	r2, #7
 8003a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	e000e010 	.word	0xe000e010

08003a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff29 	bl	80038a4 <__NVIC_SetPriorityGrouping>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a6c:	f7ff ff3e 	bl	80038ec <__NVIC_GetPriorityGrouping>
 8003a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	6978      	ldr	r0, [r7, #20]
 8003a78:	f7ff ff8e 	bl	8003998 <NVIC_EncodePriority>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff5d 	bl	8003944 <__NVIC_SetPriority>
}
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff ff31 	bl	8003908 <__NVIC_EnableIRQ>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff ffa2 	bl	8003a00 <SysTick_Config>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e16b      	b.n	8003dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	f040 815a 	bne.w	8003db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d005      	beq.n	8003b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d130      	bne.n	8003b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0201 	and.w	r2, r3, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d017      	beq.n	8003bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d123      	bne.n	8003c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	08da      	lsrs	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3208      	adds	r2, #8
 8003c06:	69b9      	ldr	r1, [r7, #24]
 8003c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0203 	and.w	r2, r3, #3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80b4 	beq.w	8003db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4b60      	ldr	r3, [pc, #384]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	4a5f      	ldr	r2, [pc, #380]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c5e:	4b5d      	ldr	r3, [pc, #372]	; (8003dd4 <HAL_GPIO_Init+0x30c>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_GPIO_Init+0x310>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	220f      	movs	r2, #15
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_GPIO_Init+0x314>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <HAL_GPIO_Init+0x226>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a51      	ldr	r2, [pc, #324]	; (8003de0 <HAL_GPIO_Init+0x318>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d025      	beq.n	8003cea <HAL_GPIO_Init+0x222>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_GPIO_Init+0x31c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01f      	beq.n	8003ce6 <HAL_GPIO_Init+0x21e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_GPIO_Init+0x320>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0x21a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_GPIO_Init+0x324>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_GPIO_Init+0x216>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_GPIO_Init+0x328>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_GPIO_Init+0x212>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_GPIO_Init+0x32c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x20e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <HAL_GPIO_Init+0x330>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_GPIO_Init+0x20a>
 8003cce:	2307      	movs	r3, #7
 8003cd0:	e00e      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cd2:	2308      	movs	r3, #8
 8003cd4:	e00c      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e00a      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cda:	2305      	movs	r3, #5
 8003cdc:	e008      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x228>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d00:	4935      	ldr	r1, [pc, #212]	; (8003dd8 <HAL_GPIO_Init+0x310>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d32:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d38:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d5c:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d86:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003db0:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <HAL_GPIO_Init+0x334>)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f67f ae90 	bls.w	8003ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3724      	adds	r7, #36	; 0x24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	40020400 	.word	0x40020400
 8003de4:	40020800 	.word	0x40020800
 8003de8:	40020c00 	.word	0x40020c00
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40021400 	.word	0x40021400
 8003df4:	40021800 	.word	0x40021800
 8003df8:	40021c00 	.word	0x40021c00
 8003dfc:	40013c00 	.word	0x40013c00

08003e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	807b      	strh	r3, [r7, #2]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e10:	787b      	ldrb	r3, [r7, #1]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e1c:	e003      	b.n	8003e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	041a      	lsls	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	619a      	str	r2, [r3, #24]
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e12b      	b.n	800409e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd fa92 	bl	8001384 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2224      	movs	r2, #36	; 0x24
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e98:	f001 fd06 	bl	80058a8 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4a81      	ldr	r2, [pc, #516]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d807      	bhi.n	8003eb8 <HAL_I2C_Init+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a80      	ldr	r2, [pc, #512]	; (80040ac <HAL_I2C_Init+0x278>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e006      	b.n	8003ec6 <HAL_I2C_Init+0x92>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a7d      	ldr	r2, [pc, #500]	; (80040b0 <HAL_I2C_Init+0x27c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0e7      	b.n	800409e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a78      	ldr	r2, [pc, #480]	; (80040b4 <HAL_I2C_Init+0x280>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	0c9b      	lsrs	r3, r3, #18
 8003ed8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	4a6a      	ldr	r2, [pc, #424]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d802      	bhi.n	8003f08 <HAL_I2C_Init+0xd4>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3301      	adds	r3, #1
 8003f06:	e009      	b.n	8003f1c <HAL_I2C_Init+0xe8>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a69      	ldr	r2, [pc, #420]	; (80040b8 <HAL_I2C_Init+0x284>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	495c      	ldr	r1, [pc, #368]	; (80040a8 <HAL_I2C_Init+0x274>)
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	d819      	bhi.n	8003f70 <HAL_I2C_Init+0x13c>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e59      	subs	r1, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f50:	400b      	ands	r3, r1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <HAL_I2C_Init+0x138>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1e59      	subs	r1, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	3301      	adds	r3, #1
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	e051      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	e04f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d111      	bne.n	8003f9c <HAL_I2C_Init+0x168>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1e58      	subs	r0, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	440b      	add	r3, r1
 8003f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e012      	b.n	8003fc2 <HAL_I2C_Init+0x18e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e58      	subs	r0, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	0099      	lsls	r1, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Init+0x196>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e022      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_I2C_Init+0x1bc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e58      	subs	r0, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	440b      	add	r3, r1
 8003fe0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	e00f      	b.n	8004010 <HAL_I2C_Init+0x1dc>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e58      	subs	r0, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6859      	ldr	r1, [r3, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	0099      	lsls	r1, r3, #2
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	6809      	ldr	r1, [r1, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800403e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6911      	ldr	r1, [r2, #16]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	68d2      	ldr	r2, [r2, #12]
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	430b      	orrs	r3, r1
 8004052:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	000186a0 	.word	0x000186a0
 80040ac:	001e847f 	.word	0x001e847f
 80040b0:	003d08ff 	.word	0x003d08ff
 80040b4:	431bde83 	.word	0x431bde83
 80040b8:	10624dd3 	.word	0x10624dd3

080040bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d6:	f7ff fbb5 	bl	8003844 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	f040 80d9 	bne.w	800429c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2319      	movs	r3, #25
 80040f0:	2201      	movs	r2, #1
 80040f2:	496d      	ldr	r1, [pc, #436]	; (80042a8 <HAL_I2C_Mem_Write+0x1ec>)
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fdad 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	e0cc      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_I2C_Mem_Write+0x56>
 800410e:	2302      	movs	r3, #2
 8004110:	e0c5      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	d007      	beq.n	8004138 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2221      	movs	r2, #33	; 0x21
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004168:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a4d      	ldr	r2, [pc, #308]	; (80042ac <HAL_I2C_Mem_Write+0x1f0>)
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800417a:	88f8      	ldrh	r0, [r7, #6]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	8979      	ldrh	r1, [r7, #10]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fbe4 	bl	8004958 <I2C_RequestMemoryWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d052      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e081      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fe2e 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d107      	bne.n	80041c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d11b      	bne.n	800423c <HAL_I2C_Mem_Write+0x180>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	d017      	beq.n	800423c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1aa      	bne.n	800419a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fe1a 	bl	8004e82 <I2C_WaitOnBTFFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e016      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	00100002 	.word	0x00100002
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08c      	sub	sp, #48	; 0x30
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	817b      	strh	r3, [r7, #10]
 80042c2:	460b      	mov	r3, r1
 80042c4:	813b      	strh	r3, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ca:	f7ff fabb 	bl	8003844 <HAL_GetTick>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b20      	cmp	r3, #32
 80042da:	f040 8208 	bne.w	80046ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	2319      	movs	r3, #25
 80042e4:	2201      	movs	r2, #1
 80042e6:	497b      	ldr	r1, [pc, #492]	; (80044d4 <HAL_I2C_Mem_Read+0x224>)
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fcb3 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
 80042f6:	e1fb      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_I2C_Mem_Read+0x56>
 8004302:	2302      	movs	r3, #2
 8004304:	e1f4      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d007      	beq.n	800432c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800433a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2222      	movs	r2, #34	; 0x22
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800435c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a5b      	ldr	r2, [pc, #364]	; (80044d8 <HAL_I2C_Mem_Read+0x228>)
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800436e:	88f8      	ldrh	r0, [r7, #6]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4603      	mov	r3, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 fb80 	bl	8004a84 <I2C_RequestMemoryRead>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e1b0      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004396:	2300      	movs	r3, #0
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e184      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d11b      	bne.n	80043fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e164      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	2b02      	cmp	r3, #2
 8004404:	d11b      	bne.n	800443e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004414:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004424:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	e144      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004454:	e138      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	2b03      	cmp	r3, #3
 800445c:	f200 80f1 	bhi.w	8004642 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	2b01      	cmp	r3, #1
 8004466:	d123      	bne.n	80044b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fd49 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e139      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ae:	e10b      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d14e      	bne.n	8004556 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	2200      	movs	r2, #0
 80044c0:	4906      	ldr	r1, [pc, #24]	; (80044dc <HAL_I2C_Mem_Read+0x22c>)
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fbc6 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e10e      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
 80044d2:	bf00      	nop
 80044d4:	00100002 	.word	0x00100002
 80044d8:	ffff0000 	.word	0xffff0000
 80044dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004554:	e0b8      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455c:	2200      	movs	r2, #0
 800455e:	4966      	ldr	r1, [pc, #408]	; (80046f8 <HAL_I2C_Mem_Read+0x448>)
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 fb77 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0bf      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	2200      	movs	r2, #0
 80045ba:	494f      	ldr	r1, [pc, #316]	; (80046f8 <HAL_I2C_Mem_Read+0x448>)
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fb49 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e091      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004640:	e042      	b.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fc5c 	bl	8004f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e04c      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	d118      	bne.n	80046c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f47f aec2 	bne.w	8004456 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3728      	adds	r7, #40	; 0x28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00010004 	.word	0x00010004

080046fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	460b      	mov	r3, r1
 800470a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800470c:	f7ff f89a 	bl	8003844 <HAL_GetTick>
 8004710:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b20      	cmp	r3, #32
 8004720:	f040 8111 	bne.w	8004946 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	2319      	movs	r3, #25
 800472a:	2201      	movs	r2, #1
 800472c:	4988      	ldr	r1, [pc, #544]	; (8004950 <HAL_I2C_IsDeviceReady+0x254>)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fa90 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800473a:	2302      	movs	r3, #2
 800473c:	e104      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_I2C_IsDeviceReady+0x50>
 8004748:	2302      	movs	r3, #2
 800474a:	e0fd      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b01      	cmp	r3, #1
 8004760:	d007      	beq.n	8004772 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004780:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2224      	movs	r2, #36	; 0x24
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4a70      	ldr	r2, [pc, #448]	; (8004954 <HAL_I2C_IsDeviceReady+0x258>)
 8004794:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa4e 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047cc:	d103      	bne.n	80047d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0b6      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047da:	897b      	ldrh	r3, [r7, #10]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80047ea:	f7ff f82b 	bl	8003844 <HAL_GetTick>
 80047ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800481e:	e025      	b.n	800486c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7ff f810 	bl	8003844 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <HAL_I2C_IsDeviceReady+0x13a>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	22a0      	movs	r2, #160	; 0xa0
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	bf0c      	ite	eq
 800484c:	2301      	moveq	r3, #1
 800484e:	2300      	movne	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2ba0      	cmp	r3, #160	; 0xa0
 8004876:	d005      	beq.n	8004884 <HAL_I2C_IsDeviceReady+0x188>
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_I2C_IsDeviceReady+0x188>
 800487e:	7dbb      	ldrb	r3, [r7, #22]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0cd      	beq.n	8004820 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b02      	cmp	r3, #2
 8004898:	d129      	bne.n	80048ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2319      	movs	r3, #25
 80048c6:	2201      	movs	r2, #1
 80048c8:	4921      	ldr	r1, [pc, #132]	; (8004950 <HAL_I2C_IsDeviceReady+0x254>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f9c2 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e036      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e02c      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004906:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2319      	movs	r3, #25
 800490e:	2201      	movs	r2, #1
 8004910:	490f      	ldr	r1, [pc, #60]	; (8004950 <HAL_I2C_IsDeviceReady+0x254>)
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f99e 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e012      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	3301      	adds	r3, #1
 8004926:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	f4ff af32 	bcc.w	8004796 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	00100002 	.word	0x00100002
 8004954:	ffff0000 	.word	0xffff0000

08004958 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4603      	mov	r3, r0
 8004968:	817b      	strh	r3, [r7, #10]
 800496a:	460b      	mov	r3, r1
 800496c:	813b      	strh	r3, [r7, #8]
 800496e:	4613      	mov	r3, r2
 8004970:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	2200      	movs	r2, #0
 800498a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f960 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d103      	bne.n	80049b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e05f      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	6a3a      	ldr	r2, [r7, #32]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <I2C_RequestMemoryWrite+0x128>)
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f998 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e04c      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	6a39      	ldr	r1, [r7, #32]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa02 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d107      	bne.n	8004a1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e02b      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1e:	88fb      	ldrh	r3, [r7, #6]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a24:	893b      	ldrh	r3, [r7, #8]
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	e021      	b.n	8004a74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6a39      	ldr	r1, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f9dc 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d107      	bne.n	8004a66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e005      	b.n	8004a76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a6a:	893b      	ldrh	r3, [r7, #8]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	00010002 	.word	0x00010002

08004a84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	461a      	mov	r2, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	817b      	strh	r3, [r7, #10]
 8004a96:	460b      	mov	r3, r1
 8004a98:	813b      	strh	r3, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f8c2 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae4:	d103      	bne.n	8004aee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0aa      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af2:	897b      	ldrh	r3, [r7, #10]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	4952      	ldr	r1, [pc, #328]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f8fa 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e097      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b30:	6a39      	ldr	r1, [r7, #32]
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 f964 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00d      	beq.n	8004b5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d107      	bne.n	8004b56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e076      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e021      	b.n	8004bb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	6a39      	ldr	r1, [r7, #32]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f93e 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d107      	bne.n	8004ba2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e050      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	6a39      	ldr	r1, [r7, #32]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f923 	bl	8004e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00d      	beq.n	8004bdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e035      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f82b 	bl	8004c54 <I2C_WaitOnFlagUntilTimeout>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00d      	beq.n	8004c20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d103      	bne.n	8004c1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e013      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c20:	897b      	ldrh	r3, [r7, #10]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	6a3a      	ldr	r2, [r7, #32]
 8004c34:	4906      	ldr	r1, [pc, #24]	; (8004c50 <I2C_RequestMemoryRead+0x1cc>)
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f863 	bl	8004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	00010002 	.word	0x00010002

08004c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c64:	e025      	b.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d021      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6e:	f7fe fde9 	bl	8003844 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d302      	bcc.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d116      	bne.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e023      	b.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10d      	bne.n	8004cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	e00c      	b.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	bf0c      	ite	eq
 8004cea:	2301      	moveq	r3, #1
 8004cec:	2300      	movne	r3, #0
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d0b6      	beq.n	8004c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d10:	e051      	b.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d20:	d123      	bne.n	8004d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f043 0204 	orr.w	r2, r3, #4
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e046      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d021      	beq.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d72:	f7fe fd67 	bl	8003844 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d302      	bcc.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d116      	bne.n	8004db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e020      	b.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d10c      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf14      	ite	ne
 8004dd2:	2301      	movne	r3, #1
 8004dd4:	2300      	moveq	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e00b      	b.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	43da      	mvns	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d18d      	bne.n	8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e0c:	e02d      	b.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f000 f8ce 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e02d      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d021      	beq.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e26:	f7fe fd0d 	bl	8003844 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d302      	bcc.n	8004e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d116      	bne.n	8004e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e007      	b.n	8004e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d1ca      	bne.n	8004e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e8e:	e02d      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f88d 	bl	8004fb0 <I2C_IsAcknowledgeFailed>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e02d      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d021      	beq.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea8:	f7fe fccc 	bl	8003844 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d116      	bne.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f043 0220 	orr.w	r2, r3, #32
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d1ca      	bne.n	8004e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f10:	e042      	b.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d119      	bne.n	8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0210 	mvn.w	r2, #16
 8004f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e029      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fc76 	bl	8003844 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e007      	b.n	8004fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d1b5      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d11b      	bne.n	8005000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	f043 0204 	orr.w	r2, r3, #4
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e264      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d075      	beq.n	800511a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502e:	4ba3      	ldr	r3, [pc, #652]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
 8005036:	2b04      	cmp	r3, #4
 8005038:	d00c      	beq.n	8005054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503a:	4ba0      	ldr	r3, [pc, #640]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005042:	2b08      	cmp	r3, #8
 8005044:	d112      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b9d      	ldr	r3, [pc, #628]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005052:	d10b      	bne.n	800506c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005054:	4b99      	ldr	r3, [pc, #612]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05b      	beq.n	8005118 <HAL_RCC_OscConfig+0x108>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d157      	bne.n	8005118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e23f      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d106      	bne.n	8005084 <HAL_RCC_OscConfig+0x74>
 8005076:	4b91      	ldr	r3, [pc, #580]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a90      	ldr	r2, [pc, #576]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800507c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e01d      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x98>
 800508e:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a8a      	ldr	r2, [pc, #552]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a87      	ldr	r2, [pc, #540]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e00b      	b.n	80050c0 <HAL_RCC_OscConfig+0xb0>
 80050a8:	4b84      	ldr	r3, [pc, #528]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a83      	ldr	r2, [pc, #524]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b81      	ldr	r3, [pc, #516]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a80      	ldr	r2, [pc, #512]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d013      	beq.n	80050f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe fbbc 	bl	8003844 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fe fbb8 	bl	8003844 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	; 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e204      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e2:	4b76      	ldr	r3, [pc, #472]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0xc0>
 80050ee:	e014      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fe fba8 	bl	8003844 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fe fba4 	bl	8003844 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e1f0      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800510a:	4b6c      	ldr	r3, [pc, #432]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0xe8>
 8005116:	e000      	b.n	800511a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005126:	4b65      	ldr	r3, [pc, #404]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b62      	ldr	r3, [pc, #392]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800513a:	2b08      	cmp	r3, #8
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b5f      	ldr	r3, [pc, #380]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b5c      	ldr	r3, [pc, #368]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1c4      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b56      	ldr	r3, [pc, #344]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4952      	ldr	r1, [pc, #328]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b4f      	ldr	r3, [pc, #316]	; (80052c0 <HAL_RCC_OscConfig+0x2b0>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fe fb5d 	bl	8003844 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518e:	f7fe fb59 	bl	8003844 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1a5      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b46      	ldr	r3, [pc, #280]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b43      	ldr	r3, [pc, #268]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4940      	ldr	r1, [pc, #256]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b3f      	ldr	r3, [pc, #252]	; (80052c0 <HAL_RCC_OscConfig+0x2b0>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fe fb3c 	bl	8003844 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fe fb38 	bl	8003844 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e184      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d030      	beq.n	800525c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <HAL_RCC_OscConfig+0x2b4>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fe fb1c 	bl	8003844 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fe fb18 	bl	8003844 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e164      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b26      	ldr	r3, [pc, #152]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x200>
 800522e:	e015      	b.n	800525c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005230:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_RCC_OscConfig+0x2b4>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005236:	f7fe fb05 	bl	8003844 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523e:	f7fe fb01 	bl	8003844 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e14d      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005250:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80a0 	beq.w	80053aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6413      	str	r3, [r2, #64]	; 0x40
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_RCC_OscConfig+0x2ac>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_OscConfig+0x2b8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d121      	bne.n	80052ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCC_OscConfig+0x2b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a07      	ldr	r2, [pc, #28]	; (80052c8 <HAL_RCC_OscConfig+0x2b8>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b2:	f7fe fac7 	bl	8003844 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b8:	e011      	b.n	80052de <HAL_RCC_OscConfig+0x2ce>
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	42470000 	.word	0x42470000
 80052c4:	42470e80 	.word	0x42470e80
 80052c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052cc:	f7fe faba 	bl	8003844 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e106      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052de:	4b85      	ldr	r3, [pc, #532]	; (80054f4 <HAL_RCC_OscConfig+0x4e4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0f0      	beq.n	80052cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x2f0>
 80052f2:	4b81      	ldr	r3, [pc, #516]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a80      	ldr	r2, [pc, #512]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70
 80052fe:	e01c      	b.n	800533a <HAL_RCC_OscConfig+0x32a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b05      	cmp	r3, #5
 8005306:	d10c      	bne.n	8005322 <HAL_RCC_OscConfig+0x312>
 8005308:	4b7b      	ldr	r3, [pc, #492]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	4a7a      	ldr	r2, [pc, #488]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800530e:	f043 0304 	orr.w	r3, r3, #4
 8005312:	6713      	str	r3, [r2, #112]	; 0x70
 8005314:	4b78      	ldr	r3, [pc, #480]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a77      	ldr	r2, [pc, #476]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
 8005320:	e00b      	b.n	800533a <HAL_RCC_OscConfig+0x32a>
 8005322:	4b75      	ldr	r3, [pc, #468]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005326:	4a74      	ldr	r2, [pc, #464]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6713      	str	r3, [r2, #112]	; 0x70
 800532e:	4b72      	ldr	r3, [pc, #456]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	4a71      	ldr	r2, [pc, #452]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005334:	f023 0304 	bic.w	r3, r3, #4
 8005338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d015      	beq.n	800536e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005342:	f7fe fa7f 	bl	8003844 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	e00a      	b.n	8005360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fe fa7b 	bl	8003844 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	4293      	cmp	r3, r2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e0c5      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005360:	4b65      	ldr	r3, [pc, #404]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0ee      	beq.n	800534a <HAL_RCC_OscConfig+0x33a>
 800536c:	e014      	b.n	8005398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536e:	f7fe fa69 	bl	8003844 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fe fa65 	bl	8003844 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0af      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800538c:	4b5a      	ldr	r3, [pc, #360]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ee      	bne.n	8005376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d105      	bne.n	80053aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539e:	4b56      	ldr	r3, [pc, #344]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4a55      	ldr	r2, [pc, #340]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 809b 	beq.w	80054ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053b4:	4b50      	ldr	r3, [pc, #320]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 030c 	and.w	r3, r3, #12
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d05c      	beq.n	800547a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d141      	bne.n	800544c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b4c      	ldr	r3, [pc, #304]	; (80054fc <HAL_RCC_OscConfig+0x4ec>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fe fa39 	bl	8003844 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fe fa35 	bl	8003844 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e081      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e8:	4b43      	ldr	r3, [pc, #268]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	019b      	lsls	r3, r3, #6
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	3b01      	subs	r3, #1
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	4937      	ldr	r1, [pc, #220]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541e:	4b37      	ldr	r3, [pc, #220]	; (80054fc <HAL_RCC_OscConfig+0x4ec>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fe fa0e 	bl	8003844 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542c:	f7fe fa0a 	bl	8003844 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e056      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b2e      	ldr	r3, [pc, #184]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x41c>
 800544a:	e04e      	b.n	80054ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544c:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCC_OscConfig+0x4ec>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005452:	f7fe f9f7 	bl	8003844 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545a:	f7fe f9f3 	bl	8003844 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e03f      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546c:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1f0      	bne.n	800545a <HAL_RCC_OscConfig+0x44a>
 8005478:	e037      	b.n	80054ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e032      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005486:	4b1c      	ldr	r3, [pc, #112]	; (80054f8 <HAL_RCC_OscConfig+0x4e8>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d028      	beq.n	80054e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549e:	429a      	cmp	r2, r3
 80054a0:	d121      	bne.n	80054e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d11a      	bne.n	80054e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054b6:	4013      	ands	r3, r2
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054be:	4293      	cmp	r3, r2
 80054c0:	d111      	bne.n	80054e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	3b01      	subs	r3, #1
 80054d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d107      	bne.n	80054e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d001      	beq.n	80054ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	40007000 	.word	0x40007000
 80054f8:	40023800 	.word	0x40023800
 80054fc:	42470060 	.word	0x42470060

08005500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e0cc      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005514:	4b68      	ldr	r3, [pc, #416]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d90c      	bls.n	800553c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005522:	4b65      	ldr	r3, [pc, #404]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b63      	ldr	r3, [pc, #396]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d001      	beq.n	800553c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0b8      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d020      	beq.n	800558a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005554:	4b59      	ldr	r3, [pc, #356]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4a58      	ldr	r2, [pc, #352]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800555e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800556c:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a52      	ldr	r2, [pc, #328]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005578:	4b50      	ldr	r3, [pc, #320]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	494d      	ldr	r1, [pc, #308]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d044      	beq.n	8005620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d119      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e07f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d003      	beq.n	80055be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055be:	4b3f      	ldr	r3, [pc, #252]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ce:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e067      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055de:	4b37      	ldr	r3, [pc, #220]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f023 0203 	bic.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	4934      	ldr	r1, [pc, #208]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fe f928 	bl	8003844 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f6:	e00a      	b.n	800560e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f8:	f7fe f924 	bl	8003844 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f241 3288 	movw	r2, #5000	; 0x1388
 8005606:	4293      	cmp	r3, r2
 8005608:	d901      	bls.n	800560e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e04f      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560e:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 020c 	and.w	r2, r3, #12
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	429a      	cmp	r2, r3
 800561e:	d1eb      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005620:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d20c      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005636:	4b20      	ldr	r3, [pc, #128]	; (80056b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d001      	beq.n	8005648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e032      	b.n	80056ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005654:	4b19      	ldr	r3, [pc, #100]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	4916      	ldr	r1, [pc, #88]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005672:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	490e      	ldr	r1, [pc, #56]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005686:	f000 f821 	bl	80056cc <HAL_RCC_GetSysClockFreq>
 800568a:	4602      	mov	r2, r0
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	490a      	ldr	r1, [pc, #40]	; (80056c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005698:	5ccb      	ldrb	r3, [r1, r3]
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <HAL_RCC_ClockConfig+0x1c4>)
 80056a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <HAL_RCC_ClockConfig+0x1c8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe f888 	bl	80037bc <HAL_InitTick>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40023c00 	.word	0x40023c00
 80056bc:	40023800 	.word	0x40023800
 80056c0:	08009d24 	.word	0x08009d24
 80056c4:	20000010 	.word	0x20000010
 80056c8:	20000014 	.word	0x20000014

080056cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	607b      	str	r3, [r7, #4]
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	2300      	movs	r3, #0
 80056de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e4:	4b67      	ldr	r3, [pc, #412]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 030c 	and.w	r3, r3, #12
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d00d      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x40>
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	f200 80bd 	bhi.w	8005870 <HAL_RCC_GetSysClockFreq+0x1a4>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x34>
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fe:	e0b7      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b61      	ldr	r3, [pc, #388]	; (8005888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005702:	60bb      	str	r3, [r7, #8]
       break;
 8005704:	e0b7      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005706:	4b61      	ldr	r3, [pc, #388]	; (800588c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005708:	60bb      	str	r3, [r7, #8]
      break;
 800570a:	e0b4      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800570c:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005714:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005716:	4b5b      	ldr	r3, [pc, #364]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d04d      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005722:	4b58      	ldr	r3, [pc, #352]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	461a      	mov	r2, r3
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	ea02 0800 	and.w	r8, r2, r0
 800573a:	ea03 0901 	and.w	r9, r3, r1
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	014b      	lsls	r3, r1, #5
 800574c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005750:	0142      	lsls	r2, r0, #5
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	ebb0 0008 	subs.w	r0, r0, r8
 800575a:	eb61 0109 	sbc.w	r1, r1, r9
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	018b      	lsls	r3, r1, #6
 8005768:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800576c:	0182      	lsls	r2, r0, #6
 800576e:	1a12      	subs	r2, r2, r0
 8005770:	eb63 0301 	sbc.w	r3, r3, r1
 8005774:	f04f 0000 	mov.w	r0, #0
 8005778:	f04f 0100 	mov.w	r1, #0
 800577c:	00d9      	lsls	r1, r3, #3
 800577e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005782:	00d0      	lsls	r0, r2, #3
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	eb12 0208 	adds.w	r2, r2, r8
 800578c:	eb43 0309 	adc.w	r3, r3, r9
 8005790:	f04f 0000 	mov.w	r0, #0
 8005794:	f04f 0100 	mov.w	r1, #0
 8005798:	0259      	lsls	r1, r3, #9
 800579a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800579e:	0250      	lsls	r0, r2, #9
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f7fb f8f8 	bl	80009a4 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e04a      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057be:	4b31      	ldr	r3, [pc, #196]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	ea02 0400 	and.w	r4, r2, r0
 80057d6:	ea03 0501 	and.w	r5, r3, r1
 80057da:	4620      	mov	r0, r4
 80057dc:	4629      	mov	r1, r5
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	014b      	lsls	r3, r1, #5
 80057e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057ec:	0142      	lsls	r2, r0, #5
 80057ee:	4610      	mov	r0, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	1b00      	subs	r0, r0, r4
 80057f4:	eb61 0105 	sbc.w	r1, r1, r5
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	018b      	lsls	r3, r1, #6
 8005802:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005806:	0182      	lsls	r2, r0, #6
 8005808:	1a12      	subs	r2, r2, r0
 800580a:	eb63 0301 	sbc.w	r3, r3, r1
 800580e:	f04f 0000 	mov.w	r0, #0
 8005812:	f04f 0100 	mov.w	r1, #0
 8005816:	00d9      	lsls	r1, r3, #3
 8005818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800581c:	00d0      	lsls	r0, r2, #3
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	1912      	adds	r2, r2, r4
 8005824:	eb45 0303 	adc.w	r3, r5, r3
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	0299      	lsls	r1, r3, #10
 8005832:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005836:	0290      	lsls	r0, r2, #10
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	461a      	mov	r2, r3
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	f7fb f8ac 	bl	80009a4 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4613      	mov	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	3301      	adds	r3, #1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	60bb      	str	r3, [r7, #8]
      break;
 800586e:	e002      	b.n	8005876 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005870:	4b05      	ldr	r3, [pc, #20]	; (8005888 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005872:	60bb      	str	r3, [r7, #8]
      break;
 8005874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005876:	68bb      	ldr	r3, [r7, #8]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005882:	bf00      	nop
 8005884:	40023800 	.word	0x40023800
 8005888:	00f42400 	.word	0x00f42400
 800588c:	007a1200 	.word	0x007a1200

08005890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005894:	4b03      	ldr	r3, [pc, #12]	; (80058a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005896:	681b      	ldr	r3, [r3, #0]
}
 8005898:	4618      	mov	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	20000010 	.word	0x20000010

080058a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058ac:	f7ff fff0 	bl	8005890 <HAL_RCC_GetHCLKFreq>
 80058b0:	4602      	mov	r2, r0
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	0a9b      	lsrs	r3, r3, #10
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	4903      	ldr	r1, [pc, #12]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058be:	5ccb      	ldrb	r3, [r1, r3]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40023800 	.word	0x40023800
 80058cc:	08009d34 	.word	0x08009d34

080058d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e07b      	b.n	80059da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d108      	bne.n	80058fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f2:	d009      	beq.n	8005908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	61da      	str	r2, [r3, #28]
 80058fa:	e005      	b.n	8005908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fd fd98 	bl	8003458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	ea42 0103 	orr.w	r1, r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	f003 0104 	and.w	r1, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	f003 0210 	and.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b088      	sub	sp, #32
 80059e6:	af02      	add	r7, sp, #8
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fe:	d112      	bne.n	8005a26 <HAL_SPI_Receive+0x44>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10e      	bne.n	8005a26 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a10:	88fa      	ldrh	r2, [r7, #6]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	4613      	mov	r3, r2
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f8f1 	bl	8005c04 <HAL_SPI_TransmitReceive>
 8005a22:	4603      	mov	r3, r0
 8005a24:	e0ea      	b.n	8005bfc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_SPI_Receive+0x52>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0e3      	b.n	8005bfc <HAL_SPI_Receive+0x21a>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3c:	f7fd ff02 	bl	8003844 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a52:	e0ca      	b.n	8005bea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Receive+0x7e>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a64:	e0c1      	b.n	8005bea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2204      	movs	r2, #4
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	88fa      	ldrh	r2, [r7, #6]
 8005a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aac:	d10f      	bne.n	8005ace <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005abc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005acc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b40      	cmp	r3, #64	; 0x40
 8005ada:	d007      	beq.n	8005aec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d162      	bne.n	8005bba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005af4:	e02e      	b.n	8005b54 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d115      	bne.n	8005b30 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f103 020c 	add.w	r2, r3, #12
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b2e:	e011      	b.n	8005b54 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b30:	f7fd fe88 	bl	8003844 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d803      	bhi.n	8005b48 <HAL_SPI_Receive+0x166>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d102      	bne.n	8005b4e <HAL_SPI_Receive+0x16c>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b52:	e04a      	b.n	8005bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_SPI_Receive+0x114>
 8005b5e:	e031      	b.n	8005bc4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d113      	bne.n	8005b96 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	1c9a      	adds	r2, r3, #2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b94:	e011      	b.n	8005bba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b96:	f7fd fe55 	bl	8003844 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d803      	bhi.n	8005bae <HAL_SPI_Receive+0x1cc>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d102      	bne.n	8005bb4 <HAL_SPI_Receive+0x1d2>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bb8:	e017      	b.n	8005bea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1cd      	bne.n	8005b60 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fa45 	bl	8006058 <SPI_EndRxTransaction>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	75fb      	strb	r3, [r7, #23]
 8005be6:	e000      	b.n	8005bea <HAL_SPI_Receive+0x208>
  }

error :
 8005be8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	; 0x30
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c12:	2301      	movs	r3, #1
 8005c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x26>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e18a      	b.n	8005f40 <HAL_SPI_TransmitReceive+0x33c>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c32:	f7fd fe07 	bl	8003844 <HAL_GetTick>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c48:	887b      	ldrh	r3, [r7, #2]
 8005c4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d00f      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x70>
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d107      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x68>
 8005c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d003      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c72:	e15b      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_SPI_TransmitReceive+0x82>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_SPI_TransmitReceive+0x82>
 8005c80:	887b      	ldrh	r3, [r7, #2]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c8c:	e14e      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d003      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	887a      	ldrh	r2, [r7, #2]
 8005cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	887a      	ldrh	r2, [r7, #2]
 8005cc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d007      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cfe:	d178      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0x10a>
 8005d08:	8b7b      	ldrh	r3, [r7, #26]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d166      	bne.n	8005ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	881a      	ldrh	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d32:	e053      	b.n	8005ddc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d11b      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x176>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <HAL_SPI_TransmitReceive+0x176>
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d113      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f003 0301 	and.w	r3, r3, #1
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d119      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x1b8>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	1c9a      	adds	r2, r3, #2
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db8:	2301      	movs	r3, #1
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dbc:	f7fd fd42 	bl	8003844 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d807      	bhi.n	8005ddc <HAL_SPI_TransmitReceive+0x1d8>
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d003      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dda:	e0a7      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1a6      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x130>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1a1      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x130>
 8005df0:	e07c      	b.n	8005eec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_TransmitReceive+0x1fc>
 8005dfa:	8b7b      	ldrh	r3, [r7, #26]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d16b      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e26:	e057      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d11c      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x26c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d017      	beq.n	8005e70 <HAL_SPI_TransmitReceive+0x26c>
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d114      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d119      	bne.n	8005eb2 <HAL_SPI_TransmitReceive+0x2ae>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d014      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	1c5a      	adds	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005eb2:	f7fd fcc7 	bl	8003844 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d803      	bhi.n	8005eca <HAL_SPI_TransmitReceive+0x2c6>
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec8:	d102      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x2cc>
 8005eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ed6:	e029      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1a2      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x224>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d19d      	bne.n	8005e28 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f917 	bl	8006124 <SPI_EndRxTxTransaction>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f08:	e010      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10b      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e000      	b.n	8005f2c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3730      	adds	r7, #48	; 0x30
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	603b      	str	r3, [r7, #0]
 8005f54:	4613      	mov	r3, r2
 8005f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f58:	f7fd fc74 	bl	8003844 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f68:	f7fd fc6c 	bl	8003844 <HAL_GetTick>
 8005f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f6e:	4b39      	ldr	r3, [pc, #228]	; (8006054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	015b      	lsls	r3, r3, #5
 8005f74:	0d1b      	lsrs	r3, r3, #20
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	fb02 f303 	mul.w	r3, r2, r3
 8005f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7e:	e054      	b.n	800602a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d050      	beq.n	800602a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f88:	f7fd fc5c 	bl	8003844 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d902      	bls.n	8005f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d13d      	bne.n	800601a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb6:	d111      	bne.n	8005fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fc0:	d004      	beq.n	8005fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fca:	d107      	bne.n	8005fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe4:	d10f      	bne.n	8006006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e017      	b.n	800604a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	3b01      	subs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	bf0c      	ite	eq
 800603a:	2301      	moveq	r3, #1
 800603c:	2300      	movne	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	429a      	cmp	r2, r3
 8006046:	d19b      	bne.n	8005f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000010 	.word	0x20000010

08006058 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af02      	add	r7, sp, #8
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606c:	d111      	bne.n	8006092 <SPI_EndRxTransaction+0x3a>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006076:	d004      	beq.n	8006082 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006080:	d107      	bne.n	8006092 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800609a:	d12a      	bne.n	80060f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a4:	d012      	beq.n	80060cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2180      	movs	r1, #128	; 0x80
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff49 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d02d      	beq.n	8006118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e026      	b.n	800611a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2101      	movs	r1, #1
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff ff36 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01a      	beq.n	8006118 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e013      	b.n	800611a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	2101      	movs	r1, #1
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f7ff ff23 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	f043 0220 	orr.w	r2, r3, #32
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e000      	b.n	800611a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <SPI_EndRxTxTransaction+0x7c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <SPI_EndRxTxTransaction+0x80>)
 8006136:	fba2 2303 	umull	r2, r3, r2, r3
 800613a:	0d5b      	lsrs	r3, r3, #21
 800613c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800614e:	d112      	bne.n	8006176 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	; 0x80
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fef4 	bl	8005f48 <SPI_WaitFlagStateUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616a:	f043 0220 	orr.w	r2, r3, #32
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e00f      	b.n	8006196 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	3b01      	subs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d0f2      	beq.n	8006176 <SPI_EndRxTxTransaction+0x52>
 8006190:	e000      	b.n	8006194 <SPI_EndRxTxTransaction+0x70>
        break;
 8006192:	bf00      	nop
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000010 	.word	0x20000010
 80061a4:	165e9f81 	.word	0x165e9f81

080061a8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e034      	b.n	8006228 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7fa ffa6 	bl	8001124 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3308      	adds	r3, #8
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fca6 	bl	8006b34 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	461a      	mov	r2, r3
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	f000 fcf0 	bl	8006bd8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6858      	ldr	r0, [r3, #4]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	f000 fd25 	bl	8006c54 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	6892      	ldr	r2, [r2, #8]
 8006212:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6892      	ldr	r2, [r2, #8]
 800621e:	f041 0101 	orr.w	r1, r1, #1
 8006222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e041      	b.n	80062c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fd fa00 	bl	800365c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3304      	adds	r3, #4
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f000 fa96 	bl	80067a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d001      	beq.n	80062e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e04e      	b.n	8006386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a23      	ldr	r2, [pc, #140]	; (8006394 <HAL_TIM_Base_Start_IT+0xc4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d022      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006312:	d01d      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <HAL_TIM_Base_Start_IT+0xc8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d018      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <HAL_TIM_Base_Start_IT+0xcc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d013      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d009      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	; (80063a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d004      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a18      	ldr	r2, [pc, #96]	; (80063ac <HAL_TIM_Base_Start_IT+0xdc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d111      	bne.n	8006374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b06      	cmp	r3, #6
 8006360:	d010      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0201 	orr.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006372:	e007      	b.n	8006384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0201 	orr.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40001800 	.word	0x40001800

080063b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0202 	mvn.w	r2, #2
 80063dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9b5 	bl	8006762 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9a7 	bl	800674e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9b8 	bl	8006776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b04      	cmp	r3, #4
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b04      	cmp	r3, #4
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0204 	mvn.w	r2, #4
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f98b 	bl	8006762 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f97d 	bl	800674e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f98e 	bl	8006776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b08      	cmp	r3, #8
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b08      	cmp	r3, #8
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0208 	mvn.w	r2, #8
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2204      	movs	r2, #4
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f961 	bl	8006762 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f953 	bl	800674e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f964 	bl	8006776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0310 	and.w	r3, r3, #16
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0210 	mvn.w	r2, #16
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2208      	movs	r2, #8
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f937 	bl	8006762 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f929 	bl	800674e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f93a 	bl	8006776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0201 	mvn.w	r2, #1
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7fc ff0a 	bl	8003348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b80      	cmp	r3, #128	; 0x80
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654c:	2b80      	cmp	r3, #128	; 0x80
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 fae0 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b40      	cmp	r3, #64	; 0x40
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b40      	cmp	r3, #64	; 0x40
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f8ff 	bl	800678a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b20      	cmp	r3, #32
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0320 	and.w	r3, r3, #32
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0220 	mvn.w	r2, #32
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 faaa 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065b8:	bf00      	nop
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIM_ConfigClockSource+0x1c>
 80065d8:	2302      	movs	r3, #2
 80065da:	e0b4      	b.n	8006746 <HAL_TIM_ConfigClockSource+0x186>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d03e      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0xd4>
 8006616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661a:	f200 8087 	bhi.w	800672c <HAL_TIM_ConfigClockSource+0x16c>
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006622:	f000 8086 	beq.w	8006732 <HAL_TIM_ConfigClockSource+0x172>
 8006626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662a:	d87f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 800662c:	2b70      	cmp	r3, #112	; 0x70
 800662e:	d01a      	beq.n	8006666 <HAL_TIM_ConfigClockSource+0xa6>
 8006630:	2b70      	cmp	r3, #112	; 0x70
 8006632:	d87b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 8006634:	2b60      	cmp	r3, #96	; 0x60
 8006636:	d050      	beq.n	80066da <HAL_TIM_ConfigClockSource+0x11a>
 8006638:	2b60      	cmp	r3, #96	; 0x60
 800663a:	d877      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 800663c:	2b50      	cmp	r3, #80	; 0x50
 800663e:	d03c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0xfa>
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d873      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d058      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0x13a>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d86f      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 800664c:	2b30      	cmp	r3, #48	; 0x30
 800664e:	d064      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15a>
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d86b      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d060      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15a>
 8006658:	2b20      	cmp	r3, #32
 800665a:	d867      	bhi.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d05c      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15a>
 8006660:	2b10      	cmp	r3, #16
 8006662:	d05a      	beq.n	800671a <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	e062      	b.n	800672c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6899      	ldr	r1, [r3, #8]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f000 f9ad 	bl	80069d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006688:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	609a      	str	r2, [r3, #8]
      break;
 8006692:	e04f      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6899      	ldr	r1, [r3, #8]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f000 f996 	bl	80069d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066b6:	609a      	str	r2, [r3, #8]
      break;
 80066b8:	e03c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f000 f90a 	bl	80068e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2150      	movs	r1, #80	; 0x50
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f963 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 80066d8:	e02c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	461a      	mov	r2, r3
 80066e8:	f000 f929 	bl	800693e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2160      	movs	r1, #96	; 0x60
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f953 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 80066f8:	e01c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	461a      	mov	r2, r3
 8006708:	f000 f8ea 	bl	80068e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2140      	movs	r1, #64	; 0x40
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f943 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 8006718:	e00c      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 f93a 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 800672a:	e003      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e000      	b.n	8006734 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006732:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a40      	ldr	r2, [pc, #256]	; (80068b4 <TIM_Base_SetConfig+0x114>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d00f      	beq.n	80067e0 <TIM_Base_SetConfig+0x40>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a3d      	ldr	r2, [pc, #244]	; (80068b8 <TIM_Base_SetConfig+0x118>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00b      	beq.n	80067e0 <TIM_Base_SetConfig+0x40>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a3c      	ldr	r2, [pc, #240]	; (80068bc <TIM_Base_SetConfig+0x11c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_Base_SetConfig+0x40>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a3b      	ldr	r2, [pc, #236]	; (80068c0 <TIM_Base_SetConfig+0x120>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0x40>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3a      	ldr	r2, [pc, #232]	; (80068c4 <TIM_Base_SetConfig+0x124>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d108      	bne.n	80067f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2f      	ldr	r2, [pc, #188]	; (80068b4 <TIM_Base_SetConfig+0x114>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02b      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006800:	d027      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2c      	ldr	r2, [pc, #176]	; (80068b8 <TIM_Base_SetConfig+0x118>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d023      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2b      	ldr	r2, [pc, #172]	; (80068bc <TIM_Base_SetConfig+0x11c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01f      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <TIM_Base_SetConfig+0x120>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <TIM_Base_SetConfig+0x124>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <TIM_Base_SetConfig+0x128>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a27      	ldr	r2, [pc, #156]	; (80068cc <TIM_Base_SetConfig+0x12c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <TIM_Base_SetConfig+0x130>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a25      	ldr	r2, [pc, #148]	; (80068d4 <TIM_Base_SetConfig+0x134>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a24      	ldr	r2, [pc, #144]	; (80068d8 <TIM_Base_SetConfig+0x138>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a23      	ldr	r2, [pc, #140]	; (80068dc <TIM_Base_SetConfig+0x13c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <TIM_Base_SetConfig+0x114>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_Base_SetConfig+0xf8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <TIM_Base_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d103      	bne.n	80068a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	615a      	str	r2, [r3, #20]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40000400 	.word	0x40000400
 80068bc:	40000800 	.word	0x40000800
 80068c0:	40000c00 	.word	0x40000c00
 80068c4:	40010400 	.word	0x40010400
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40014400 	.word	0x40014400
 80068d0:	40014800 	.word	0x40014800
 80068d4:	40001800 	.word	0x40001800
 80068d8:	40001c00 	.word	0x40001c00
 80068dc:	40002000 	.word	0x40002000

080068e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f023 030a 	bic.w	r3, r3, #10
 800691c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4313      	orrs	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0210 	bic.w	r2, r3, #16
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800697a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	4313      	orrs	r3, r2
 8006984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f043 0307 	orr.w	r3, r3, #7
 80069c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	609a      	str	r2, [r3, #8]
}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	431a      	orrs	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	609a      	str	r2, [r3, #8]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e05a      	b.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a78:	d01d      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1a      	ldr	r2, [pc, #104]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40000800 	.word	0x40000800
 8006afc:	40000c00 	.word	0x40000c00
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40001800 	.word	0x40001800

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <FSMC_NORSRAM_Init+0xa0>)
 8006b52:	4013      	ands	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006b5e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006b64:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006b6a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006b70:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006b76:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006b7c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006b82:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006b88:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006b8e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006b94:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006b9a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006ba0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d103      	bne.n	8006bb8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	fff00080 	.word	0xfff00080

08006bd8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bfa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c06:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006c0e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006c16:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c20:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	3b02      	subs	r3, #2
 8006c28:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006c2a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c30:	4313      	orrs	r3, r2
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6979      	ldr	r1, [r7, #20]
 8006c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
	...

08006c54 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c6c:	d122      	bne.n	8006cb4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c76:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006c8a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006c92:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006c9a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ca0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6979      	ldr	r1, [r7, #20]
 8006cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006cb2:	e005      	b.n	8006cc0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	cff00000 	.word	0xcff00000

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	; (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	; (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	; (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	; (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f000 f820 	bl	8006d2c <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08009d44 	.word	0x08009d44
 8006d10:	08009d44 	.word	0x08009d44
 8006d14:	08009d44 	.word	0x08009d44
 8006d18:	08009d48 	.word	0x08009d48

08006d1c <memset>:
 8006d1c:	4402      	add	r2, r0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d100      	bne.n	8006d26 <memset+0xa>
 8006d24:	4770      	bx	lr
 8006d26:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2a:	e7f9      	b.n	8006d20 <memset+0x4>

08006d2c <_init>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	bf00      	nop
 8006d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d32:	bc08      	pop	{r3}
 8006d34:	469e      	mov	lr, r3
 8006d36:	4770      	bx	lr

08006d38 <_fini>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr
